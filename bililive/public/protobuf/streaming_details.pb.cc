// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streaming_details.proto

#include "streaming_details.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace streaming_performance {
constexpr SystemInfo::SystemInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : graphic_()
  , system_ver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cpu_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , load_graphic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , co_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , region_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , network_(0)
{}
struct SystemInfoDefaultTypeInternal {
  constexpr SystemInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SystemInfoDefaultTypeInternal() {}
  union {
    SystemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
constexpr AppInfo::AppInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buvid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sys_info_(nullptr)
  , app_id_(0)
  , platform_(0)
  , uid_(int64_t{0})
  , roomid_(int64_t{0})
  , build_no_(0){}
struct AppInfoDefaultTypeInternal {
  constexpr AppInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppInfoDefaultTypeInternal() {}
  union {
    AppInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppInfoDefaultTypeInternal _AppInfo_default_instance_;
constexpr EncodingSettings::EncodingSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rate_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , fps_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resolution_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encoder_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ts_(int64_t{0})
  , bit_rate_(0){}
struct EncodingSettingsDefaultTypeInternal {
  constexpr EncodingSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncodingSettingsDefaultTypeInternal() {}
  union {
    EncodingSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncodingSettingsDefaultTypeInternal _EncodingSettings_default_instance_;
constexpr StartLiveInfo::StartLiveInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_settings_()
  , live_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cdn_host_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , live_type_(0)
  , live_status_(0)
  , start_time_(int64_t{0})
  , end_time_(int64_t{0}){}
struct StartLiveInfoDefaultTypeInternal {
  constexpr StartLiveInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartLiveInfoDefaultTypeInternal() {}
  union {
    StartLiveInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartLiveInfoDefaultTypeInternal _StartLiveInfo_default_instance_;
constexpr SourceItem_PropsEntry_DoNotUse::SourceItem_PropsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SourceItem_PropsEntry_DoNotUseDefaultTypeInternal {
  constexpr SourceItem_PropsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SourceItem_PropsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SourceItem_PropsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SourceItem_PropsEntry_DoNotUseDefaultTypeInternal _SourceItem_PropsEntry_DoNotUse_default_instance_;
constexpr SourceItem::SourceItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : props_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , source_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_type_(0)
  , visible_(false){}
struct SourceItemDefaultTypeInternal {
  constexpr SourceItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SourceItemDefaultTypeInternal() {}
  union {
    SourceItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SourceItemDefaultTypeInternal _SourceItem_default_instance_;
constexpr SampleData::SampleData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(int64_t{0})
  , data_(0){}
struct SampleDataDefaultTypeInternal {
  constexpr SampleDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SampleDataDefaultTypeInternal() {}
  union {
    SampleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SampleDataDefaultTypeInternal _SampleData_default_instance_;
constexpr BaseStatisticInfo::BaseStatisticInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : samples_(){}
struct BaseStatisticInfoDefaultTypeInternal {
  constexpr BaseStatisticInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseStatisticInfoDefaultTypeInternal() {}
  union {
    BaseStatisticInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseStatisticInfoDefaultTypeInternal _BaseStatisticInfo_default_instance_;
constexpr NetworkDropFrame::NetworkDropFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct NetworkDropFrameDefaultTypeInternal {
  constexpr NetworkDropFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetworkDropFrameDefaultTypeInternal() {}
  union {
    NetworkDropFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetworkDropFrameDefaultTypeInternal _NetworkDropFrame_default_instance_;
constexpr RenderDropFrame::RenderDropFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct RenderDropFrameDefaultTypeInternal {
  constexpr RenderDropFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenderDropFrameDefaultTypeInternal() {}
  union {
    RenderDropFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenderDropFrameDefaultTypeInternal _RenderDropFrame_default_instance_;
constexpr EncodeDropFrame::EncodeDropFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct EncodeDropFrameDefaultTypeInternal {
  constexpr EncodeDropFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncodeDropFrameDefaultTypeInternal() {}
  union {
    EncodeDropFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncodeDropFrameDefaultTypeInternal _EncodeDropFrame_default_instance_;
constexpr GpuUsage::GpuUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct GpuUsageDefaultTypeInternal {
  constexpr GpuUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpuUsageDefaultTypeInternal() {}
  union {
    GpuUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpuUsageDefaultTypeInternal _GpuUsage_default_instance_;
constexpr CpuUsage::CpuUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct CpuUsageDefaultTypeInternal {
  constexpr CpuUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CpuUsageDefaultTypeInternal() {}
  union {
    CpuUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CpuUsageDefaultTypeInternal _CpuUsage_default_instance_;
constexpr MemoryUsage::MemoryUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct MemoryUsageDefaultTypeInternal {
  constexpr MemoryUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoryUsageDefaultTypeInternal() {}
  union {
    MemoryUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoryUsageDefaultTypeInternal _MemoryUsage_default_instance_;
constexpr ProcessCpuUsage::ProcessCpuUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct ProcessCpuUsageDefaultTypeInternal {
  constexpr ProcessCpuUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessCpuUsageDefaultTypeInternal() {}
  union {
    ProcessCpuUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessCpuUsageDefaultTypeInternal _ProcessCpuUsage_default_instance_;
constexpr ProcessMemoryUsage::ProcessMemoryUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr){}
struct ProcessMemoryUsageDefaultTypeInternal {
  constexpr ProcessMemoryUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProcessMemoryUsageDefaultTypeInternal() {}
  union {
    ProcessMemoryUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProcessMemoryUsageDefaultTypeInternal _ProcessMemoryUsage_default_instance_;
constexpr StatisticsSet::StatisticsSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ndf_(nullptr)
  , rdf_(nullptr)
  , edf_(nullptr)
  , gpu_(nullptr)
  , cpu_(nullptr)
  , mem_(nullptr)
  , p_cpu_(nullptr)
  , p_mem_(nullptr){}
struct StatisticsSetDefaultTypeInternal {
  constexpr StatisticsSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatisticsSetDefaultTypeInternal() {}
  union {
    StatisticsSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatisticsSetDefaultTypeInternal _StatisticsSet_default_instance_;
constexpr PerformanceReport::PerformanceReport(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_items_()
  , app_info_(nullptr)
  , runtime_info_(nullptr)
  , statistics_(nullptr)
  , logver_(0)
  , sampling_(0){}
struct PerformanceReportDefaultTypeInternal {
  constexpr PerformanceReportDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PerformanceReportDefaultTypeInternal() {}
  union {
    PerformanceReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PerformanceReportDefaultTypeInternal _PerformanceReport_default_instance_;
}  // namespace streaming_performance
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_streaming_5fdetails_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_streaming_5fdetails_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_streaming_5fdetails_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_streaming_5fdetails_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, system_ver_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, cpu_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, graphic_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, load_graphic_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, memory_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, network_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, co_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SystemInfo, region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, sys_info_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, app_id_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, buvid_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, version_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, build_no_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, account_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::AppInfo, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodingSettings, ts_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodingSettings, bit_rate_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodingSettings, rate_type_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodingSettings, fps_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodingSettings, resolution_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodingSettings, encoder_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodingSettings, quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, live_key_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, cdn_host_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, addr_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, code_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, live_type_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, live_status_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, end_time_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StartLiveInfo, video_settings_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SourceItem_PropsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SourceItem_PropsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SourceItem_PropsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SourceItem_PropsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SourceItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SourceItem, source_type_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SourceItem, source_name_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SourceItem, props_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SourceItem, visible_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SampleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SampleData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::SampleData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::BaseStatisticInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::BaseStatisticInfo, samples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::NetworkDropFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::NetworkDropFrame, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::RenderDropFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::RenderDropFrame, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodeDropFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::EncodeDropFrame, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::GpuUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::GpuUsage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::CpuUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::CpuUsage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::MemoryUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::MemoryUsage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::ProcessCpuUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::ProcessCpuUsage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::ProcessMemoryUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::ProcessMemoryUsage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StatisticsSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StatisticsSet, ndf_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StatisticsSet, rdf_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StatisticsSet, edf_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StatisticsSet, gpu_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StatisticsSet, cpu_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StatisticsSet, mem_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StatisticsSet, p_cpu_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::StatisticsSet, p_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::PerformanceReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::streaming_performance::PerformanceReport, logver_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::PerformanceReport, sampling_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::PerformanceReport, app_info_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::PerformanceReport, runtime_info_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::PerformanceReport, statistics_),
  PROTOBUF_FIELD_OFFSET(::streaming_performance::PerformanceReport, source_items_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::streaming_performance::SystemInfo)},
  { 14, -1, sizeof(::streaming_performance::AppInfo)},
  { 28, -1, sizeof(::streaming_performance::EncodingSettings)},
  { 40, -1, sizeof(::streaming_performance::StartLiveInfo)},
  { 54, 61, sizeof(::streaming_performance::SourceItem_PropsEntry_DoNotUse)},
  { 63, -1, sizeof(::streaming_performance::SourceItem)},
  { 72, -1, sizeof(::streaming_performance::SampleData)},
  { 79, -1, sizeof(::streaming_performance::BaseStatisticInfo)},
  { 85, -1, sizeof(::streaming_performance::NetworkDropFrame)},
  { 91, -1, sizeof(::streaming_performance::RenderDropFrame)},
  { 97, -1, sizeof(::streaming_performance::EncodeDropFrame)},
  { 103, -1, sizeof(::streaming_performance::GpuUsage)},
  { 109, -1, sizeof(::streaming_performance::CpuUsage)},
  { 115, -1, sizeof(::streaming_performance::MemoryUsage)},
  { 121, -1, sizeof(::streaming_performance::ProcessCpuUsage)},
  { 127, -1, sizeof(::streaming_performance::ProcessMemoryUsage)},
  { 133, -1, sizeof(::streaming_performance::StatisticsSet)},
  { 146, -1, sizeof(::streaming_performance::PerformanceReport)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_SystemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_AppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_EncodingSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_StartLiveInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_SourceItem_PropsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_SourceItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_SampleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_BaseStatisticInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_NetworkDropFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_RenderDropFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_EncodeDropFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_GpuUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_CpuUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_MemoryUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_ProcessCpuUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_ProcessMemoryUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_StatisticsSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::streaming_performance::_PerformanceReport_default_instance_),
};

const char descriptor_table_protodef_streaming_5fdetails_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027streaming_details.proto\022\025streaming_per"
  "formance\"\304\001\n\nSystemInfo\022\022\n\nsystem_ver\030\001 "
  "\001(\t\022\013\n\003cpu\030\002 \001(\t\022\017\n\007graphic\030\003 \003(\t\022\024\n\014loa"
  "d_graphic\030\004 \001(\t\022\016\n\006memory\030\005 \001(\t\0226\n\007netwo"
  "rk\030\006 \001(\0162%.streaming_performance.Runtime"
  "NetWork\022\n\n\002co\030\007 \001(\t\022\n\n\002ip\030\010 \001(\t\022\016\n\006regio"
  "n\030\t \001(\t\"\300\001\n\007AppInfo\0223\n\010sys_info\030\001 \001(\0132!."
  "streaming_performance.SystemInfo\022\016\n\006app_"
  "id\030\002 \001(\005\022\020\n\010platform\030\003 \001(\005\022\r\n\005buvid\030\004 \001("
  "\t\022\017\n\007version\030\005 \001(\t\022\020\n\010build_no\030\006 \001(\005\022\017\n\007"
  "account\030\007 \001(\t\022\013\n\003uid\030\010 \001(\003\022\016\n\006roomid\030\t \001"
  "(\003\"\206\001\n\020EncodingSettings\022\n\n\002ts\030\001 \001(\003\022\020\n\010b"
  "it_rate\030\002 \001(\005\022\021\n\trate_type\030\003 \001(\t\022\013\n\003fps\030"
  "\004 \001(\t\022\022\n\nresolution\030\005 \001(\t\022\017\n\007encoder\030\006 \001"
  "(\t\022\017\n\007quality\030\007 \001(\t\"\336\001\n\rStartLiveInfo\022\020\n"
  "\010live_key\030\001 \001(\t\022\020\n\010cdn_host\030\002 \001(\t\022\014\n\004add"
  "r\030\003 \001(\t\022\014\n\004code\030\004 \001(\t\022\021\n\tlive_type\030\005 \001(\005"
  "\022\023\n\013live_status\030\006 \001(\005\022\022\n\nstart_time\030\007 \001("
  "\003\022\020\n\010end_time\030\010 \001(\003\022\?\n\016video_settings\030\t "
  "\003(\0132\'.streaming_performance.EncodingSett"
  "ings\"\262\001\n\nSourceItem\022\023\n\013source_type\030\001 \001(\005"
  "\022\023\n\013source_name\030\002 \001(\t\022;\n\005props\030\003 \003(\0132,.s"
  "treaming_performance.SourceItem.PropsEnt"
  "ry\022\017\n\007visible\030\004 \001(\010\032,\n\nPropsEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"-\n\nSampleData\022"
  "\021\n\ttimestamp\030\001 \001(\003\022\014\n\004data\030\002 \001(\001\"G\n\021Base"
  "StatisticInfo\0222\n\007samples\030\001 \003(\0132!.streami"
  "ng_performance.SampleData\"J\n\020NetworkDrop"
  "Frame\0226\n\004data\030\001 \001(\0132(.streaming_performa"
  "nce.BaseStatisticInfo\"I\n\017RenderDropFrame"
  "\0226\n\004data\030\001 \001(\0132(.streaming_performance.B"
  "aseStatisticInfo\"I\n\017EncodeDropFrame\0226\n\004d"
  "ata\030\001 \001(\0132(.streaming_performance.BaseSt"
  "atisticInfo\"B\n\010GpuUsage\0226\n\004data\030\001 \001(\0132(."
  "streaming_performance.BaseStatisticInfo\""
  "B\n\010CpuUsage\0226\n\004data\030\001 \001(\0132(.streaming_pe"
  "rformance.BaseStatisticInfo\"E\n\013MemoryUsa"
  "ge\0226\n\004data\030\001 \001(\0132(.streaming_performance"
  ".BaseStatisticInfo\"I\n\017ProcessCpuUsage\0226\n"
  "\004data\030\001 \001(\0132(.streaming_performance.Base"
  "StatisticInfo\"L\n\022ProcessMemoryUsage\0226\n\004d"
  "ata\030\001 \001(\0132(.streaming_performance.BaseSt"
  "atisticInfo\"\255\003\n\rStatisticsSet\0224\n\003ndf\030\001 \001"
  "(\0132\'.streaming_performance.NetworkDropFr"
  "ame\0223\n\003rdf\030\002 \001(\0132&.streaming_performance"
  ".RenderDropFrame\0223\n\003edf\030\003 \001(\0132&.streamin"
  "g_performance.EncodeDropFrame\022,\n\003gpu\030\004 \001"
  "(\0132\037.streaming_performance.GpuUsage\022,\n\003c"
  "pu\030\005 \001(\0132\037.streaming_performance.CpuUsag"
  "e\022/\n\003mem\030\006 \001(\0132\".streaming_performance.M"
  "emoryUsage\0225\n\005p_cpu\030\007 \001(\0132&.streaming_pe"
  "rformance.ProcessCpuUsage\0228\n\005p_mem\030\010 \001(\013"
  "2).streaming_performance.ProcessMemoryUs"
  "age\"\226\002\n\021PerformanceReport\022\016\n\006logver\030\001 \001("
  "\005\022\020\n\010sampling\030\002 \001(\005\0220\n\010app_info\030\003 \001(\0132\036."
  "streaming_performance.AppInfo\022:\n\014runtime"
  "_info\030\004 \001(\0132$.streaming_performance.Star"
  "tLiveInfo\0228\n\nstatistics\030\005 \001(\0132$.streamin"
  "g_performance.StatisticsSet\0227\n\014source_it"
  "ems\030\020 \003(\0132!.streaming_performance.Source"
  "Item*^\n\016RuntimeNetWork\022\013\n\007UNKNOWN\020\000\022\010\n\004W"
  "IFI\020\001\022\014\n\010CELLULAR\020\002\022\013\n\007OFFLINE\020\003\022\014\n\010OTHE"
  "RNET\020\004\022\014\n\010ETHERNET\020\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_streaming_5fdetails_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_streaming_5fdetails_2eproto = {
  false, false, 2508, descriptor_table_protodef_streaming_5fdetails_2eproto, "streaming_details.proto", 
  &descriptor_table_streaming_5fdetails_2eproto_once, nullptr, 0, 18,
  schemas, file_default_instances, TableStruct_streaming_5fdetails_2eproto::offsets,
  file_level_metadata_streaming_5fdetails_2eproto, file_level_enum_descriptors_streaming_5fdetails_2eproto, file_level_service_descriptors_streaming_5fdetails_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_streaming_5fdetails_2eproto_getter() {
  return &descriptor_table_streaming_5fdetails_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_streaming_5fdetails_2eproto(&descriptor_table_streaming_5fdetails_2eproto);
namespace streaming_performance {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuntimeNetWork_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_streaming_5fdetails_2eproto);
  return file_level_enum_descriptors_streaming_5fdetails_2eproto[0];
}
bool RuntimeNetWork_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SystemInfo::_Internal {
 public:
};

SystemInfo::SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  graphic_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.SystemInfo)
}
SystemInfo::SystemInfo(const SystemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graphic_(from.graphic_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  system_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_system_ver().empty()) {
    system_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_system_ver(), 
      GetArenaForAllocation());
  }
  cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu().empty()) {
    cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpu(), 
      GetArenaForAllocation());
  }
  load_graphic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_load_graphic().empty()) {
    load_graphic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_load_graphic(), 
      GetArenaForAllocation());
  }
  memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memory().empty()) {
    memory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memory(), 
      GetArenaForAllocation());
  }
  co_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_co().empty()) {
    co_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_co(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_region(), 
      GetArenaForAllocation());
  }
  network_ = from.network_;
  // @@protoc_insertion_point(copy_constructor:streaming_performance.SystemInfo)
}

inline void SystemInfo::SharedCtor() {
system_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
load_graphic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
memory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
co_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
network_ = 0;
}

SystemInfo::~SystemInfo() {
  // @@protoc_insertion_point(destructor:streaming_performance.SystemInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SystemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  system_ver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cpu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  load_graphic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  co_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemInfo::ArenaDtor(void* object) {
  SystemInfo* _this = reinterpret_cast< SystemInfo* >(object);
  (void)_this;
}
void SystemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.SystemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graphic_.Clear();
  system_ver_.ClearToEmpty();
  cpu_.ClearToEmpty();
  load_graphic_.ClearToEmpty();
  memory_.ClearToEmpty();
  co_.ClearToEmpty();
  ip_.ClearToEmpty();
  region_.ClearToEmpty();
  network_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string system_ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_system_ver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.SystemInfo.system_ver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cpu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cpu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.SystemInfo.cpu"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string graphic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_graphic();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.SystemInfo.graphic"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string load_graphic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_load_graphic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.SystemInfo.load_graphic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_memory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.SystemInfo.memory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.RuntimeNetWork network = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network(static_cast<::streaming_performance::RuntimeNetWork>(val));
        } else goto handle_unusual;
        continue;
      // string co = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_co();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.SystemInfo.co"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.SystemInfo.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.SystemInfo.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.SystemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system_ver = 1;
  if (!this->_internal_system_ver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system_ver().data(), static_cast<int>(this->_internal_system_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.SystemInfo.system_ver");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_system_ver(), target);
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu().data(), static_cast<int>(this->_internal_cpu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.SystemInfo.cpu");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cpu(), target);
  }

  // repeated string graphic = 3;
  for (int i = 0, n = this->_internal_graphic_size(); i < n; i++) {
    const auto& s = this->_internal_graphic(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.SystemInfo.graphic");
    target = stream->WriteString(3, s, target);
  }

  // string load_graphic = 4;
  if (!this->_internal_load_graphic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_load_graphic().data(), static_cast<int>(this->_internal_load_graphic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.SystemInfo.load_graphic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_load_graphic(), target);
  }

  // string memory = 5;
  if (!this->_internal_memory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memory().data(), static_cast<int>(this->_internal_memory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.SystemInfo.memory");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_memory(), target);
  }

  // .streaming_performance.RuntimeNetWork network = 6;
  if (this->_internal_network() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_network(), target);
  }

  // string co = 7;
  if (!this->_internal_co().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_co().data(), static_cast<int>(this->_internal_co().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.SystemInfo.co");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_co(), target);
  }

  // string ip = 8;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.SystemInfo.ip");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ip(), target);
  }

  // string region = 9;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.SystemInfo.region");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.SystemInfo)
  return target;
}

size_t SystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.SystemInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string graphic = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(graphic_.size());
  for (int i = 0, n = graphic_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      graphic_.Get(i));
  }

  // string system_ver = 1;
  if (!this->_internal_system_ver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system_ver());
  }

  // string cpu = 2;
  if (!this->_internal_cpu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu());
  }

  // string load_graphic = 4;
  if (!this->_internal_load_graphic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_load_graphic());
  }

  // string memory = 5;
  if (!this->_internal_memory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memory());
  }

  // string co = 7;
  if (!this->_internal_co().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_co());
  }

  // string ip = 8;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string region = 9;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // .streaming_performance.RuntimeNetWork network = 6;
  if (this->_internal_network() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SystemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemInfo::GetClassData() const { return &_class_data_; }

void SystemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SystemInfo *>(to)->MergeFrom(
      static_cast<const SystemInfo &>(from));
}


void SystemInfo::MergeFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graphic_.MergeFrom(from.graphic_);
  if (!from._internal_system_ver().empty()) {
    _internal_set_system_ver(from._internal_system_ver());
  }
  if (!from._internal_cpu().empty()) {
    _internal_set_cpu(from._internal_cpu());
  }
  if (!from._internal_load_graphic().empty()) {
    _internal_set_load_graphic(from._internal_load_graphic());
  }
  if (!from._internal_memory().empty()) {
    _internal_set_memory(from._internal_memory());
  }
  if (!from._internal_co().empty()) {
    _internal_set_co(from._internal_co());
  }
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_region().empty()) {
    _internal_set_region(from._internal_region());
  }
  if (from._internal_network() != 0) {
    _internal_set_network(from._internal_network());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemInfo::CopyFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo::IsInitialized() const {
  return true;
}

void SystemInfo::InternalSwap(SystemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  graphic_.InternalSwap(&other->graphic_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &system_ver_, GetArenaForAllocation(),
      &other->system_ver_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpu_, GetArenaForAllocation(),
      &other->cpu_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &load_graphic_, GetArenaForAllocation(),
      &other->load_graphic_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memory_, GetArenaForAllocation(),
      &other->memory_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &co_, GetArenaForAllocation(),
      &other->co_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &region_, GetArenaForAllocation(),
      &other->region_, other->GetArenaForAllocation()
  );
  swap(network_, other->network_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[0]);
}

// ===================================================================

class AppInfo::_Internal {
 public:
  static const ::streaming_performance::SystemInfo& sys_info(const AppInfo* msg);
};

const ::streaming_performance::SystemInfo&
AppInfo::_Internal::sys_info(const AppInfo* msg) {
  return *msg->sys_info_;
}
AppInfo::AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.AppInfo)
}
AppInfo::AppInfo(const AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buvid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buvid().empty()) {
    buvid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buvid(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sys_info()) {
    sys_info_ = new ::streaming_performance::SystemInfo(*from.sys_info_);
  } else {
    sys_info_ = nullptr;
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_no_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(build_no_));
  // @@protoc_insertion_point(copy_constructor:streaming_performance.AppInfo)
}

inline void AppInfo::SharedCtor() {
buvid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sys_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&build_no_) -
    reinterpret_cast<char*>(&sys_info_)) + sizeof(build_no_));
}

AppInfo::~AppInfo() {
  // @@protoc_insertion_point(destructor:streaming_performance.AppInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buvid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sys_info_;
}

void AppInfo::ArenaDtor(void* object) {
  AppInfo* _this = reinterpret_cast< AppInfo* >(object);
  (void)_this;
}
void AppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buvid_.ClearToEmpty();
  version_.ClearToEmpty();
  account_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sys_info_ != nullptr) {
    delete sys_info_;
  }
  sys_info_ = nullptr;
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_no_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(build_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.SystemInfo sys_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 platform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buvid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_buvid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.AppInfo.buvid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.AppInfo.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 build_no = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          build_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.AppInfo.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 roomid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.SystemInfo sys_info = 1;
  if (this->_internal_has_sys_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sys_info(this), target, stream);
  }

  // int32 app_id = 2;
  if (this->_internal_app_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_app_id(), target);
  }

  // int32 platform = 3;
  if (this->_internal_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_platform(), target);
  }

  // string buvid = 4;
  if (!this->_internal_buvid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buvid().data(), static_cast<int>(this->_internal_buvid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.AppInfo.buvid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_buvid(), target);
  }

  // string version = 5;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.AppInfo.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // int32 build_no = 6;
  if (this->_internal_build_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_build_no(), target);
  }

  // string account = 7;
  if (!this->_internal_account().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.AppInfo.account");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_account(), target);
  }

  // int64 uid = 8;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_uid(), target);
  }

  // int64 roomid = 9;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.AppInfo)
  return target;
}

size_t AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.AppInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string buvid = 4;
  if (!this->_internal_buvid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buvid());
  }

  // string version = 5;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string account = 7;
  if (!this->_internal_account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // .streaming_performance.SystemInfo sys_info = 1;
  if (this->_internal_has_sys_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sys_info_);
  }

  // int32 app_id = 2;
  if (this->_internal_app_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_app_id());
  }

  // int32 platform = 3;
  if (this->_internal_platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_platform());
  }

  // int64 uid = 8;
  if (this->_internal_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uid());
  }

  // int64 roomid = 9;
  if (this->_internal_roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roomid());
  }

  // int32 build_no = 6;
  if (this->_internal_build_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_build_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppInfo::GetClassData() const { return &_class_data_; }

void AppInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppInfo *>(to)->MergeFrom(
      static_cast<const AppInfo &>(from));
}


void AppInfo::MergeFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buvid().empty()) {
    _internal_set_buvid(from._internal_buvid());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from._internal_has_sys_info()) {
    _internal_mutable_sys_info()->::streaming_performance::SystemInfo::MergeFrom(from._internal_sys_info());
  }
  if (from._internal_app_id() != 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_platform() != 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_build_no() != 0) {
    _internal_set_build_no(from._internal_build_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppInfo::CopyFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfo::IsInitialized() const {
  return true;
}

void AppInfo::InternalSwap(AppInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buvid_, GetArenaForAllocation(),
      &other->buvid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppInfo, build_no_)
      + sizeof(AppInfo::build_no_)
      - PROTOBUF_FIELD_OFFSET(AppInfo, sys_info_)>(
          reinterpret_cast<char*>(&sys_info_),
          reinterpret_cast<char*>(&other->sys_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[1]);
}

// ===================================================================

class EncodingSettings::_Internal {
 public:
};

EncodingSettings::EncodingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.EncodingSettings)
}
EncodingSettings::EncodingSettings(const EncodingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rate_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rate_type().empty()) {
    rate_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rate_type(), 
      GetArenaForAllocation());
  }
  fps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fps().empty()) {
    fps_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fps(), 
      GetArenaForAllocation());
  }
  resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resolution().empty()) {
    resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resolution(), 
      GetArenaForAllocation());
  }
  encoder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoder().empty()) {
    encoder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoder(), 
      GetArenaForAllocation());
  }
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quality().empty()) {
    quality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quality(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&bit_rate_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(bit_rate_));
  // @@protoc_insertion_point(copy_constructor:streaming_performance.EncodingSettings)
}

inline void EncodingSettings::SharedCtor() {
rate_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
fps_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
encoder_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ts_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bit_rate_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(bit_rate_));
}

EncodingSettings::~EncodingSettings() {
  // @@protoc_insertion_point(destructor:streaming_performance.EncodingSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EncodingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rate_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fps_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resolution_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoder_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EncodingSettings::ArenaDtor(void* object) {
  EncodingSettings* _this = reinterpret_cast< EncodingSettings* >(object);
  (void)_this;
}
void EncodingSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncodingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncodingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.EncodingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_type_.ClearToEmpty();
  fps_.ClearToEmpty();
  resolution_.ClearToEmpty();
  encoder_.ClearToEmpty();
  quality_.ClearToEmpty();
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bit_rate_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(bit_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncodingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bit_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rate_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_rate_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.EncodingSettings.rate_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fps();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.EncodingSettings.fps"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resolution = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_resolution();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.EncodingSettings.resolution"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encoder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_encoder();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.EncodingSettings.encoder"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_quality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.EncodingSettings.quality"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncodingSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.EncodingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ts = 1;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ts(), target);
  }

  // int32 bit_rate = 2;
  if (this->_internal_bit_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bit_rate(), target);
  }

  // string rate_type = 3;
  if (!this->_internal_rate_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rate_type().data(), static_cast<int>(this->_internal_rate_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.EncodingSettings.rate_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rate_type(), target);
  }

  // string fps = 4;
  if (!this->_internal_fps().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fps().data(), static_cast<int>(this->_internal_fps().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.EncodingSettings.fps");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_fps(), target);
  }

  // string resolution = 5;
  if (!this->_internal_resolution().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resolution().data(), static_cast<int>(this->_internal_resolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.EncodingSettings.resolution");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_resolution(), target);
  }

  // string encoder = 6;
  if (!this->_internal_encoder().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoder().data(), static_cast<int>(this->_internal_encoder().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.EncodingSettings.encoder");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_encoder(), target);
  }

  // string quality = 7;
  if (!this->_internal_quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.EncodingSettings.quality");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.EncodingSettings)
  return target;
}

size_t EncodingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.EncodingSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rate_type = 3;
  if (!this->_internal_rate_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rate_type());
  }

  // string fps = 4;
  if (!this->_internal_fps().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fps());
  }

  // string resolution = 5;
  if (!this->_internal_resolution().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resolution());
  }

  // string encoder = 6;
  if (!this->_internal_encoder().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoder());
  }

  // string quality = 7;
  if (!this->_internal_quality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // int64 ts = 1;
  if (this->_internal_ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  // int32 bit_rate = 2;
  if (this->_internal_bit_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bit_rate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncodingSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EncodingSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncodingSettings::GetClassData() const { return &_class_data_; }

void EncodingSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EncodingSettings *>(to)->MergeFrom(
      static_cast<const EncodingSettings &>(from));
}


void EncodingSettings::MergeFrom(const EncodingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.EncodingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rate_type().empty()) {
    _internal_set_rate_type(from._internal_rate_type());
  }
  if (!from._internal_fps().empty()) {
    _internal_set_fps(from._internal_fps());
  }
  if (!from._internal_resolution().empty()) {
    _internal_set_resolution(from._internal_resolution());
  }
  if (!from._internal_encoder().empty()) {
    _internal_set_encoder(from._internal_encoder());
  }
  if (!from._internal_quality().empty()) {
    _internal_set_quality(from._internal_quality());
  }
  if (from._internal_ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
  if (from._internal_bit_rate() != 0) {
    _internal_set_bit_rate(from._internal_bit_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncodingSettings::CopyFrom(const EncodingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.EncodingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodingSettings::IsInitialized() const {
  return true;
}

void EncodingSettings::InternalSwap(EncodingSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rate_type_, GetArenaForAllocation(),
      &other->rate_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fps_, GetArenaForAllocation(),
      &other->fps_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resolution_, GetArenaForAllocation(),
      &other->resolution_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoder_, GetArenaForAllocation(),
      &other->encoder_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quality_, GetArenaForAllocation(),
      &other->quality_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncodingSettings, bit_rate_)
      + sizeof(EncodingSettings::bit_rate_)
      - PROTOBUF_FIELD_OFFSET(EncodingSettings, ts_)>(
          reinterpret_cast<char*>(&ts_),
          reinterpret_cast<char*>(&other->ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncodingSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[2]);
}

// ===================================================================

class StartLiveInfo::_Internal {
 public:
};

StartLiveInfo::StartLiveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  video_settings_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.StartLiveInfo)
}
StartLiveInfo::StartLiveInfo(const StartLiveInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      video_settings_(from.video_settings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  live_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_live_key().empty()) {
    live_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_live_key(), 
      GetArenaForAllocation());
  }
  cdn_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cdn_host().empty()) {
    cdn_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cdn_host(), 
      GetArenaForAllocation());
  }
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&live_type_, &from.live_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&live_type_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:streaming_performance.StartLiveInfo)
}

inline void StartLiveInfo::SharedCtor() {
live_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cdn_host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&live_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&live_type_)) + sizeof(end_time_));
}

StartLiveInfo::~StartLiveInfo() {
  // @@protoc_insertion_point(destructor:streaming_performance.StartLiveInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartLiveInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  live_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cdn_host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StartLiveInfo::ArenaDtor(void* object) {
  StartLiveInfo* _this = reinterpret_cast< StartLiveInfo* >(object);
  (void)_this;
}
void StartLiveInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartLiveInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartLiveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.StartLiveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  video_settings_.Clear();
  live_key_.ClearToEmpty();
  cdn_host_.ClearToEmpty();
  addr_.ClearToEmpty();
  code_.ClearToEmpty();
  ::memset(&live_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&live_type_)) + sizeof(end_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartLiveInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string live_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_live_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.StartLiveInfo.live_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cdn_host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cdn_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.StartLiveInfo.cdn_host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.StartLiveInfo.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.StartLiveInfo.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 live_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          live_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 live_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          live_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .streaming_performance.EncodingSettings video_settings = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_video_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartLiveInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.StartLiveInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string live_key = 1;
  if (!this->_internal_live_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_live_key().data(), static_cast<int>(this->_internal_live_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.StartLiveInfo.live_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_live_key(), target);
  }

  // string cdn_host = 2;
  if (!this->_internal_cdn_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cdn_host().data(), static_cast<int>(this->_internal_cdn_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.StartLiveInfo.cdn_host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cdn_host(), target);
  }

  // string addr = 3;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.StartLiveInfo.addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_addr(), target);
  }

  // string code = 4;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.StartLiveInfo.code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code(), target);
  }

  // int32 live_type = 5;
  if (this->_internal_live_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_live_type(), target);
  }

  // int32 live_status = 6;
  if (this->_internal_live_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_live_status(), target);
  }

  // int64 start_time = 7;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_start_time(), target);
  }

  // int64 end_time = 8;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_end_time(), target);
  }

  // repeated .streaming_performance.EncodingSettings video_settings = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_video_settings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_video_settings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.StartLiveInfo)
  return target;
}

size_t StartLiveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.StartLiveInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .streaming_performance.EncodingSettings video_settings = 9;
  total_size += 1UL * this->_internal_video_settings_size();
  for (const auto& msg : this->video_settings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string live_key = 1;
  if (!this->_internal_live_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_live_key());
  }

  // string cdn_host = 2;
  if (!this->_internal_cdn_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cdn_host());
  }

  // string addr = 3;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string code = 4;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // int32 live_type = 5;
  if (this->_internal_live_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_live_type());
  }

  // int32 live_status = 6;
  if (this->_internal_live_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_live_status());
  }

  // int64 start_time = 7;
  if (this->_internal_start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_time());
  }

  // int64 end_time = 8;
  if (this->_internal_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartLiveInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartLiveInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartLiveInfo::GetClassData() const { return &_class_data_; }

void StartLiveInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StartLiveInfo *>(to)->MergeFrom(
      static_cast<const StartLiveInfo &>(from));
}


void StartLiveInfo::MergeFrom(const StartLiveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.StartLiveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  video_settings_.MergeFrom(from.video_settings_);
  if (!from._internal_live_key().empty()) {
    _internal_set_live_key(from._internal_live_key());
  }
  if (!from._internal_cdn_host().empty()) {
    _internal_set_cdn_host(from._internal_cdn_host());
  }
  if (!from._internal_addr().empty()) {
    _internal_set_addr(from._internal_addr());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_live_type() != 0) {
    _internal_set_live_type(from._internal_live_type());
  }
  if (from._internal_live_status() != 0) {
    _internal_set_live_status(from._internal_live_status());
  }
  if (from._internal_start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartLiveInfo::CopyFrom(const StartLiveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.StartLiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartLiveInfo::IsInitialized() const {
  return true;
}

void StartLiveInfo::InternalSwap(StartLiveInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  video_settings_.InternalSwap(&other->video_settings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &live_key_, GetArenaForAllocation(),
      &other->live_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cdn_host_, GetArenaForAllocation(),
      &other->cdn_host_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addr_, GetArenaForAllocation(),
      &other->addr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartLiveInfo, end_time_)
      + sizeof(StartLiveInfo::end_time_)
      - PROTOBUF_FIELD_OFFSET(StartLiveInfo, live_type_)>(
          reinterpret_cast<char*>(&live_type_),
          reinterpret_cast<char*>(&other->live_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartLiveInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[3]);
}

// ===================================================================

SourceItem_PropsEntry_DoNotUse::SourceItem_PropsEntry_DoNotUse() {}
SourceItem_PropsEntry_DoNotUse::SourceItem_PropsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SourceItem_PropsEntry_DoNotUse::MergeFrom(const SourceItem_PropsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SourceItem_PropsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[4]);
}

// ===================================================================

class SourceItem::_Internal {
 public:
};

SourceItem::SourceItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  props_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.SourceItem)
}
SourceItem::SourceItem(const SourceItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  props_.MergeFrom(from.props_);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_name().empty()) {
    source_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&source_type_, &from.source_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&source_type_)) + sizeof(visible_));
  // @@protoc_insertion_point(copy_constructor:streaming_performance.SourceItem)
}

inline void SourceItem::SharedCtor() {
source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&visible_) -
    reinterpret_cast<char*>(&source_type_)) + sizeof(visible_));
}

SourceItem::~SourceItem() {
  // @@protoc_insertion_point(destructor:streaming_performance.SourceItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SourceItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SourceItem::ArenaDtor(void* object) {
  SourceItem* _this = reinterpret_cast< SourceItem* >(object);
  (void)_this;
  _this->props_. ~MapField();
}
inline void SourceItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &SourceItem::ArenaDtor);
  }
}
void SourceItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SourceItem::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.SourceItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  source_name_.ClearToEmpty();
  ::memset(&source_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&visible_) -
      reinterpret_cast<char*>(&source_type_)) + sizeof(visible_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 source_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          source_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "streaming_performance.SourceItem.source_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> props = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&props_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool visible = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.SourceItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 source_type = 1;
  if (this->_internal_source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source_type(), target);
  }

  // string source_name = 2;
  if (!this->_internal_source_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "streaming_performance.SourceItem.source_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_name(), target);
  }

  // map<string, string> props = 3;
  if (!this->_internal_props().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "streaming_performance.SourceItem.PropsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "streaming_performance.SourceItem.PropsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_props().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_props().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_props().begin();
          it != this->_internal_props().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SourceItem_PropsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_props().begin();
          it != this->_internal_props().end(); ++it) {
        target = SourceItem_PropsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool visible = 4;
  if (this->_internal_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_visible(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.SourceItem)
  return target;
}

size_t SourceItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.SourceItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> props = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_props_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_props().begin();
      it != this->_internal_props().end(); ++it) {
    total_size += SourceItem_PropsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string source_name = 2;
  if (!this->_internal_source_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_name());
  }

  // int32 source_type = 1;
  if (this->_internal_source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_source_type());
  }

  // bool visible = 4;
  if (this->_internal_visible() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SourceItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceItem::GetClassData() const { return &_class_data_; }

void SourceItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SourceItem *>(to)->MergeFrom(
      static_cast<const SourceItem &>(from));
}


void SourceItem::MergeFrom(const SourceItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.SourceItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  if (!from._internal_source_name().empty()) {
    _internal_set_source_name(from._internal_source_name());
  }
  if (from._internal_source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
  if (from._internal_visible() != 0) {
    _internal_set_visible(from._internal_visible());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceItem::CopyFrom(const SourceItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.SourceItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceItem::IsInitialized() const {
  return true;
}

void SourceItem::InternalSwap(SourceItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  props_.InternalSwap(&other->props_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_name_, GetArenaForAllocation(),
      &other->source_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SourceItem, visible_)
      + sizeof(SourceItem::visible_)
      - PROTOBUF_FIELD_OFFSET(SourceItem, source_type_)>(
          reinterpret_cast<char*>(&source_type_),
          reinterpret_cast<char*>(&other->source_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[5]);
}

// ===================================================================

class SampleData::_Internal {
 public:
};

SampleData::SampleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.SampleData)
}
SampleData::SampleData(const SampleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(data_));
  // @@protoc_insertion_point(copy_constructor:streaming_performance.SampleData)
}

inline void SampleData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(data_));
}

SampleData::~SampleData() {
  // @@protoc_insertion_point(destructor:streaming_performance.SampleData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SampleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SampleData::ArenaDtor(void* object) {
  SampleData* _this = reinterpret_cast< SampleData* >(object);
  (void)_this;
}
void SampleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SampleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SampleData::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.SampleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SampleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SampleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.SampleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // double data = 2;
  if (!(this->_internal_data() <= 0 && this->_internal_data() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.SampleData)
  return target;
}

size_t SampleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.SampleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // double data = 2;
  if (!(this->_internal_data() <= 0 && this->_internal_data() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SampleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SampleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SampleData::GetClassData() const { return &_class_data_; }

void SampleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SampleData *>(to)->MergeFrom(
      static_cast<const SampleData &>(from));
}


void SampleData::MergeFrom(const SampleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.SampleData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (!(from._internal_data() <= 0 && from._internal_data() >= 0)) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SampleData::CopyFrom(const SampleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.SampleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleData::IsInitialized() const {
  return true;
}

void SampleData::InternalSwap(SampleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SampleData, data_)
      + sizeof(SampleData::data_)
      - PROTOBUF_FIELD_OFFSET(SampleData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SampleData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[6]);
}

// ===================================================================

class BaseStatisticInfo::_Internal {
 public:
};

BaseStatisticInfo::BaseStatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  samples_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.BaseStatisticInfo)
}
BaseStatisticInfo::BaseStatisticInfo(const BaseStatisticInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      samples_(from.samples_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:streaming_performance.BaseStatisticInfo)
}

inline void BaseStatisticInfo::SharedCtor() {
}

BaseStatisticInfo::~BaseStatisticInfo() {
  // @@protoc_insertion_point(destructor:streaming_performance.BaseStatisticInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BaseStatisticInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BaseStatisticInfo::ArenaDtor(void* object) {
  BaseStatisticInfo* _this = reinterpret_cast< BaseStatisticInfo* >(object);
  (void)_this;
}
void BaseStatisticInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseStatisticInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseStatisticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.BaseStatisticInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  samples_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseStatisticInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .streaming_performance.SampleData samples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseStatisticInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.BaseStatisticInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .streaming_performance.SampleData samples = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_samples_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_samples(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.BaseStatisticInfo)
  return target;
}

size_t BaseStatisticInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.BaseStatisticInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .streaming_performance.SampleData samples = 1;
  total_size += 1UL * this->_internal_samples_size();
  for (const auto& msg : this->samples_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseStatisticInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BaseStatisticInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseStatisticInfo::GetClassData() const { return &_class_data_; }

void BaseStatisticInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BaseStatisticInfo *>(to)->MergeFrom(
      static_cast<const BaseStatisticInfo &>(from));
}


void BaseStatisticInfo::MergeFrom(const BaseStatisticInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.BaseStatisticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  samples_.MergeFrom(from.samples_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseStatisticInfo::CopyFrom(const BaseStatisticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.BaseStatisticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStatisticInfo::IsInitialized() const {
  return true;
}

void BaseStatisticInfo::InternalSwap(BaseStatisticInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  samples_.InternalSwap(&other->samples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseStatisticInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[7]);
}

// ===================================================================

class NetworkDropFrame::_Internal {
 public:
  static const ::streaming_performance::BaseStatisticInfo& data(const NetworkDropFrame* msg);
};

const ::streaming_performance::BaseStatisticInfo&
NetworkDropFrame::_Internal::data(const NetworkDropFrame* msg) {
  return *msg->data_;
}
NetworkDropFrame::NetworkDropFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.NetworkDropFrame)
}
NetworkDropFrame::NetworkDropFrame(const NetworkDropFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::streaming_performance::BaseStatisticInfo(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:streaming_performance.NetworkDropFrame)
}

inline void NetworkDropFrame::SharedCtor() {
data_ = nullptr;
}

NetworkDropFrame::~NetworkDropFrame() {
  // @@protoc_insertion_point(destructor:streaming_performance.NetworkDropFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetworkDropFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void NetworkDropFrame::ArenaDtor(void* object) {
  NetworkDropFrame* _this = reinterpret_cast< NetworkDropFrame* >(object);
  (void)_this;
}
void NetworkDropFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkDropFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkDropFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.NetworkDropFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkDropFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.BaseStatisticInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkDropFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.NetworkDropFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.NetworkDropFrame)
  return target;
}

size_t NetworkDropFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.NetworkDropFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkDropFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkDropFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkDropFrame::GetClassData() const { return &_class_data_; }

void NetworkDropFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NetworkDropFrame *>(to)->MergeFrom(
      static_cast<const NetworkDropFrame &>(from));
}


void NetworkDropFrame::MergeFrom(const NetworkDropFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.NetworkDropFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::streaming_performance::BaseStatisticInfo::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkDropFrame::CopyFrom(const NetworkDropFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.NetworkDropFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkDropFrame::IsInitialized() const {
  return true;
}

void NetworkDropFrame::InternalSwap(NetworkDropFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkDropFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[8]);
}

// ===================================================================

class RenderDropFrame::_Internal {
 public:
  static const ::streaming_performance::BaseStatisticInfo& data(const RenderDropFrame* msg);
};

const ::streaming_performance::BaseStatisticInfo&
RenderDropFrame::_Internal::data(const RenderDropFrame* msg) {
  return *msg->data_;
}
RenderDropFrame::RenderDropFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.RenderDropFrame)
}
RenderDropFrame::RenderDropFrame(const RenderDropFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::streaming_performance::BaseStatisticInfo(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:streaming_performance.RenderDropFrame)
}

inline void RenderDropFrame::SharedCtor() {
data_ = nullptr;
}

RenderDropFrame::~RenderDropFrame() {
  // @@protoc_insertion_point(destructor:streaming_performance.RenderDropFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RenderDropFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void RenderDropFrame::ArenaDtor(void* object) {
  RenderDropFrame* _this = reinterpret_cast< RenderDropFrame* >(object);
  (void)_this;
}
void RenderDropFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenderDropFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenderDropFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.RenderDropFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderDropFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.BaseStatisticInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenderDropFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.RenderDropFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.RenderDropFrame)
  return target;
}

size_t RenderDropFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.RenderDropFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderDropFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RenderDropFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderDropFrame::GetClassData() const { return &_class_data_; }

void RenderDropFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RenderDropFrame *>(to)->MergeFrom(
      static_cast<const RenderDropFrame &>(from));
}


void RenderDropFrame::MergeFrom(const RenderDropFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.RenderDropFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::streaming_performance::BaseStatisticInfo::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderDropFrame::CopyFrom(const RenderDropFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.RenderDropFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderDropFrame::IsInitialized() const {
  return true;
}

void RenderDropFrame::InternalSwap(RenderDropFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderDropFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[9]);
}

// ===================================================================

class EncodeDropFrame::_Internal {
 public:
  static const ::streaming_performance::BaseStatisticInfo& data(const EncodeDropFrame* msg);
};

const ::streaming_performance::BaseStatisticInfo&
EncodeDropFrame::_Internal::data(const EncodeDropFrame* msg) {
  return *msg->data_;
}
EncodeDropFrame::EncodeDropFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.EncodeDropFrame)
}
EncodeDropFrame::EncodeDropFrame(const EncodeDropFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::streaming_performance::BaseStatisticInfo(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:streaming_performance.EncodeDropFrame)
}

inline void EncodeDropFrame::SharedCtor() {
data_ = nullptr;
}

EncodeDropFrame::~EncodeDropFrame() {
  // @@protoc_insertion_point(destructor:streaming_performance.EncodeDropFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EncodeDropFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void EncodeDropFrame::ArenaDtor(void* object) {
  EncodeDropFrame* _this = reinterpret_cast< EncodeDropFrame* >(object);
  (void)_this;
}
void EncodeDropFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncodeDropFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncodeDropFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.EncodeDropFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncodeDropFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.BaseStatisticInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncodeDropFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.EncodeDropFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.EncodeDropFrame)
  return target;
}

size_t EncodeDropFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.EncodeDropFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncodeDropFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EncodeDropFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncodeDropFrame::GetClassData() const { return &_class_data_; }

void EncodeDropFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EncodeDropFrame *>(to)->MergeFrom(
      static_cast<const EncodeDropFrame &>(from));
}


void EncodeDropFrame::MergeFrom(const EncodeDropFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.EncodeDropFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::streaming_performance::BaseStatisticInfo::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncodeDropFrame::CopyFrom(const EncodeDropFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.EncodeDropFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodeDropFrame::IsInitialized() const {
  return true;
}

void EncodeDropFrame::InternalSwap(EncodeDropFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncodeDropFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[10]);
}

// ===================================================================

class GpuUsage::_Internal {
 public:
  static const ::streaming_performance::BaseStatisticInfo& data(const GpuUsage* msg);
};

const ::streaming_performance::BaseStatisticInfo&
GpuUsage::_Internal::data(const GpuUsage* msg) {
  return *msg->data_;
}
GpuUsage::GpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.GpuUsage)
}
GpuUsage::GpuUsage(const GpuUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::streaming_performance::BaseStatisticInfo(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:streaming_performance.GpuUsage)
}

inline void GpuUsage::SharedCtor() {
data_ = nullptr;
}

GpuUsage::~GpuUsage() {
  // @@protoc_insertion_point(destructor:streaming_performance.GpuUsage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GpuUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void GpuUsage::ArenaDtor(void* object) {
  GpuUsage* _this = reinterpret_cast< GpuUsage* >(object);
  (void)_this;
}
void GpuUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpuUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpuUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.GpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpuUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.BaseStatisticInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpuUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.GpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.GpuUsage)
  return target;
}

size_t GpuUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.GpuUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GpuUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GpuUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GpuUsage::GetClassData() const { return &_class_data_; }

void GpuUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GpuUsage *>(to)->MergeFrom(
      static_cast<const GpuUsage &>(from));
}


void GpuUsage::MergeFrom(const GpuUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.GpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::streaming_performance::BaseStatisticInfo::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GpuUsage::CopyFrom(const GpuUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.GpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuUsage::IsInitialized() const {
  return true;
}

void GpuUsage::InternalSwap(GpuUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuUsage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[11]);
}

// ===================================================================

class CpuUsage::_Internal {
 public:
  static const ::streaming_performance::BaseStatisticInfo& data(const CpuUsage* msg);
};

const ::streaming_performance::BaseStatisticInfo&
CpuUsage::_Internal::data(const CpuUsage* msg) {
  return *msg->data_;
}
CpuUsage::CpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.CpuUsage)
}
CpuUsage::CpuUsage(const CpuUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::streaming_performance::BaseStatisticInfo(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:streaming_performance.CpuUsage)
}

inline void CpuUsage::SharedCtor() {
data_ = nullptr;
}

CpuUsage::~CpuUsage() {
  // @@protoc_insertion_point(destructor:streaming_performance.CpuUsage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CpuUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void CpuUsage::ArenaDtor(void* object) {
  CpuUsage* _this = reinterpret_cast< CpuUsage* >(object);
  (void)_this;
}
void CpuUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpuUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CpuUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.CpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpuUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.BaseStatisticInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpuUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.CpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.CpuUsage)
  return target;
}

size_t CpuUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.CpuUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CpuUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CpuUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CpuUsage::GetClassData() const { return &_class_data_; }

void CpuUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CpuUsage *>(to)->MergeFrom(
      static_cast<const CpuUsage &>(from));
}


void CpuUsage::MergeFrom(const CpuUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.CpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::streaming_performance::BaseStatisticInfo::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CpuUsage::CopyFrom(const CpuUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.CpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuUsage::IsInitialized() const {
  return true;
}

void CpuUsage::InternalSwap(CpuUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CpuUsage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[12]);
}

// ===================================================================

class MemoryUsage::_Internal {
 public:
  static const ::streaming_performance::BaseStatisticInfo& data(const MemoryUsage* msg);
};

const ::streaming_performance::BaseStatisticInfo&
MemoryUsage::_Internal::data(const MemoryUsage* msg) {
  return *msg->data_;
}
MemoryUsage::MemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.MemoryUsage)
}
MemoryUsage::MemoryUsage(const MemoryUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::streaming_performance::BaseStatisticInfo(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:streaming_performance.MemoryUsage)
}

inline void MemoryUsage::SharedCtor() {
data_ = nullptr;
}

MemoryUsage::~MemoryUsage() {
  // @@protoc_insertion_point(destructor:streaming_performance.MemoryUsage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MemoryUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void MemoryUsage::ArenaDtor(void* object) {
  MemoryUsage* _this = reinterpret_cast< MemoryUsage* >(object);
  (void)_this;
}
void MemoryUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.MemoryUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.BaseStatisticInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.MemoryUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.MemoryUsage)
  return target;
}

size_t MemoryUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.MemoryUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemoryUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryUsage::GetClassData() const { return &_class_data_; }

void MemoryUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MemoryUsage *>(to)->MergeFrom(
      static_cast<const MemoryUsage &>(from));
}


void MemoryUsage::MergeFrom(const MemoryUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.MemoryUsage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::streaming_performance::BaseStatisticInfo::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryUsage::CopyFrom(const MemoryUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.MemoryUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryUsage::IsInitialized() const {
  return true;
}

void MemoryUsage::InternalSwap(MemoryUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryUsage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[13]);
}

// ===================================================================

class ProcessCpuUsage::_Internal {
 public:
  static const ::streaming_performance::BaseStatisticInfo& data(const ProcessCpuUsage* msg);
};

const ::streaming_performance::BaseStatisticInfo&
ProcessCpuUsage::_Internal::data(const ProcessCpuUsage* msg) {
  return *msg->data_;
}
ProcessCpuUsage::ProcessCpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.ProcessCpuUsage)
}
ProcessCpuUsage::ProcessCpuUsage(const ProcessCpuUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::streaming_performance::BaseStatisticInfo(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:streaming_performance.ProcessCpuUsage)
}

inline void ProcessCpuUsage::SharedCtor() {
data_ = nullptr;
}

ProcessCpuUsage::~ProcessCpuUsage() {
  // @@protoc_insertion_point(destructor:streaming_performance.ProcessCpuUsage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessCpuUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ProcessCpuUsage::ArenaDtor(void* object) {
  ProcessCpuUsage* _this = reinterpret_cast< ProcessCpuUsage* >(object);
  (void)_this;
}
void ProcessCpuUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessCpuUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessCpuUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.ProcessCpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessCpuUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.BaseStatisticInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessCpuUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.ProcessCpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.ProcessCpuUsage)
  return target;
}

size_t ProcessCpuUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.ProcessCpuUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessCpuUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessCpuUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessCpuUsage::GetClassData() const { return &_class_data_; }

void ProcessCpuUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProcessCpuUsage *>(to)->MergeFrom(
      static_cast<const ProcessCpuUsage &>(from));
}


void ProcessCpuUsage::MergeFrom(const ProcessCpuUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.ProcessCpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::streaming_performance::BaseStatisticInfo::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessCpuUsage::CopyFrom(const ProcessCpuUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.ProcessCpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessCpuUsage::IsInitialized() const {
  return true;
}

void ProcessCpuUsage::InternalSwap(ProcessCpuUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessCpuUsage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[14]);
}

// ===================================================================

class ProcessMemoryUsage::_Internal {
 public:
  static const ::streaming_performance::BaseStatisticInfo& data(const ProcessMemoryUsage* msg);
};

const ::streaming_performance::BaseStatisticInfo&
ProcessMemoryUsage::_Internal::data(const ProcessMemoryUsage* msg) {
  return *msg->data_;
}
ProcessMemoryUsage::ProcessMemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.ProcessMemoryUsage)
}
ProcessMemoryUsage::ProcessMemoryUsage(const ProcessMemoryUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::streaming_performance::BaseStatisticInfo(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:streaming_performance.ProcessMemoryUsage)
}

inline void ProcessMemoryUsage::SharedCtor() {
data_ = nullptr;
}

ProcessMemoryUsage::~ProcessMemoryUsage() {
  // @@protoc_insertion_point(destructor:streaming_performance.ProcessMemoryUsage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProcessMemoryUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void ProcessMemoryUsage::ArenaDtor(void* object) {
  ProcessMemoryUsage* _this = reinterpret_cast< ProcessMemoryUsage* >(object);
  (void)_this;
}
void ProcessMemoryUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessMemoryUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessMemoryUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.ProcessMemoryUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessMemoryUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.BaseStatisticInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessMemoryUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.ProcessMemoryUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.ProcessMemoryUsage)
  return target;
}

size_t ProcessMemoryUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.ProcessMemoryUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .streaming_performance.BaseStatisticInfo data = 1;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessMemoryUsage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessMemoryUsage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessMemoryUsage::GetClassData() const { return &_class_data_; }

void ProcessMemoryUsage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ProcessMemoryUsage *>(to)->MergeFrom(
      static_cast<const ProcessMemoryUsage &>(from));
}


void ProcessMemoryUsage::MergeFrom(const ProcessMemoryUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.ProcessMemoryUsage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::streaming_performance::BaseStatisticInfo::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessMemoryUsage::CopyFrom(const ProcessMemoryUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.ProcessMemoryUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessMemoryUsage::IsInitialized() const {
  return true;
}

void ProcessMemoryUsage::InternalSwap(ProcessMemoryUsage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessMemoryUsage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[15]);
}

// ===================================================================

class StatisticsSet::_Internal {
 public:
  static const ::streaming_performance::NetworkDropFrame& ndf(const StatisticsSet* msg);
  static const ::streaming_performance::RenderDropFrame& rdf(const StatisticsSet* msg);
  static const ::streaming_performance::EncodeDropFrame& edf(const StatisticsSet* msg);
  static const ::streaming_performance::GpuUsage& gpu(const StatisticsSet* msg);
  static const ::streaming_performance::CpuUsage& cpu(const StatisticsSet* msg);
  static const ::streaming_performance::MemoryUsage& mem(const StatisticsSet* msg);
  static const ::streaming_performance::ProcessCpuUsage& p_cpu(const StatisticsSet* msg);
  static const ::streaming_performance::ProcessMemoryUsage& p_mem(const StatisticsSet* msg);
};

const ::streaming_performance::NetworkDropFrame&
StatisticsSet::_Internal::ndf(const StatisticsSet* msg) {
  return *msg->ndf_;
}
const ::streaming_performance::RenderDropFrame&
StatisticsSet::_Internal::rdf(const StatisticsSet* msg) {
  return *msg->rdf_;
}
const ::streaming_performance::EncodeDropFrame&
StatisticsSet::_Internal::edf(const StatisticsSet* msg) {
  return *msg->edf_;
}
const ::streaming_performance::GpuUsage&
StatisticsSet::_Internal::gpu(const StatisticsSet* msg) {
  return *msg->gpu_;
}
const ::streaming_performance::CpuUsage&
StatisticsSet::_Internal::cpu(const StatisticsSet* msg) {
  return *msg->cpu_;
}
const ::streaming_performance::MemoryUsage&
StatisticsSet::_Internal::mem(const StatisticsSet* msg) {
  return *msg->mem_;
}
const ::streaming_performance::ProcessCpuUsage&
StatisticsSet::_Internal::p_cpu(const StatisticsSet* msg) {
  return *msg->p_cpu_;
}
const ::streaming_performance::ProcessMemoryUsage&
StatisticsSet::_Internal::p_mem(const StatisticsSet* msg) {
  return *msg->p_mem_;
}
StatisticsSet::StatisticsSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.StatisticsSet)
}
StatisticsSet::StatisticsSet(const StatisticsSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ndf()) {
    ndf_ = new ::streaming_performance::NetworkDropFrame(*from.ndf_);
  } else {
    ndf_ = nullptr;
  }
  if (from._internal_has_rdf()) {
    rdf_ = new ::streaming_performance::RenderDropFrame(*from.rdf_);
  } else {
    rdf_ = nullptr;
  }
  if (from._internal_has_edf()) {
    edf_ = new ::streaming_performance::EncodeDropFrame(*from.edf_);
  } else {
    edf_ = nullptr;
  }
  if (from._internal_has_gpu()) {
    gpu_ = new ::streaming_performance::GpuUsage(*from.gpu_);
  } else {
    gpu_ = nullptr;
  }
  if (from._internal_has_cpu()) {
    cpu_ = new ::streaming_performance::CpuUsage(*from.cpu_);
  } else {
    cpu_ = nullptr;
  }
  if (from._internal_has_mem()) {
    mem_ = new ::streaming_performance::MemoryUsage(*from.mem_);
  } else {
    mem_ = nullptr;
  }
  if (from._internal_has_p_cpu()) {
    p_cpu_ = new ::streaming_performance::ProcessCpuUsage(*from.p_cpu_);
  } else {
    p_cpu_ = nullptr;
  }
  if (from._internal_has_p_mem()) {
    p_mem_ = new ::streaming_performance::ProcessMemoryUsage(*from.p_mem_);
  } else {
    p_mem_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:streaming_performance.StatisticsSet)
}

inline void StatisticsSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ndf_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p_mem_) -
    reinterpret_cast<char*>(&ndf_)) + sizeof(p_mem_));
}

StatisticsSet::~StatisticsSet() {
  // @@protoc_insertion_point(destructor:streaming_performance.StatisticsSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatisticsSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ndf_;
  if (this != internal_default_instance()) delete rdf_;
  if (this != internal_default_instance()) delete edf_;
  if (this != internal_default_instance()) delete gpu_;
  if (this != internal_default_instance()) delete cpu_;
  if (this != internal_default_instance()) delete mem_;
  if (this != internal_default_instance()) delete p_cpu_;
  if (this != internal_default_instance()) delete p_mem_;
}

void StatisticsSet::ArenaDtor(void* object) {
  StatisticsSet* _this = reinterpret_cast< StatisticsSet* >(object);
  (void)_this;
}
void StatisticsSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatisticsSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatisticsSet::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.StatisticsSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ndf_ != nullptr) {
    delete ndf_;
  }
  ndf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rdf_ != nullptr) {
    delete rdf_;
  }
  rdf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edf_ != nullptr) {
    delete edf_;
  }
  edf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && gpu_ != nullptr) {
    delete gpu_;
  }
  gpu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mem_ != nullptr) {
    delete mem_;
  }
  mem_ = nullptr;
  if (GetArenaForAllocation() == nullptr && p_cpu_ != nullptr) {
    delete p_cpu_;
  }
  p_cpu_ = nullptr;
  if (GetArenaForAllocation() == nullptr && p_mem_ != nullptr) {
    delete p_mem_;
  }
  p_mem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatisticsSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .streaming_performance.NetworkDropFrame ndf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ndf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.RenderDropFrame rdf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rdf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.EncodeDropFrame edf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.GpuUsage gpu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gpu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.CpuUsage cpu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.MemoryUsage mem = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.ProcessCpuUsage p_cpu = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_p_cpu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.ProcessMemoryUsage p_mem = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_p_mem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatisticsSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.StatisticsSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .streaming_performance.NetworkDropFrame ndf = 1;
  if (this->_internal_has_ndf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ndf(this), target, stream);
  }

  // .streaming_performance.RenderDropFrame rdf = 2;
  if (this->_internal_has_rdf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rdf(this), target, stream);
  }

  // .streaming_performance.EncodeDropFrame edf = 3;
  if (this->_internal_has_edf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::edf(this), target, stream);
  }

  // .streaming_performance.GpuUsage gpu = 4;
  if (this->_internal_has_gpu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gpu(this), target, stream);
  }

  // .streaming_performance.CpuUsage cpu = 5;
  if (this->_internal_has_cpu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cpu(this), target, stream);
  }

  // .streaming_performance.MemoryUsage mem = 6;
  if (this->_internal_has_mem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mem(this), target, stream);
  }

  // .streaming_performance.ProcessCpuUsage p_cpu = 7;
  if (this->_internal_has_p_cpu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::p_cpu(this), target, stream);
  }

  // .streaming_performance.ProcessMemoryUsage p_mem = 8;
  if (this->_internal_has_p_mem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::p_mem(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.StatisticsSet)
  return target;
}

size_t StatisticsSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.StatisticsSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .streaming_performance.NetworkDropFrame ndf = 1;
  if (this->_internal_has_ndf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ndf_);
  }

  // .streaming_performance.RenderDropFrame rdf = 2;
  if (this->_internal_has_rdf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rdf_);
  }

  // .streaming_performance.EncodeDropFrame edf = 3;
  if (this->_internal_has_edf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edf_);
  }

  // .streaming_performance.GpuUsage gpu = 4;
  if (this->_internal_has_gpu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gpu_);
  }

  // .streaming_performance.CpuUsage cpu = 5;
  if (this->_internal_has_cpu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cpu_);
  }

  // .streaming_performance.MemoryUsage mem = 6;
  if (this->_internal_has_mem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mem_);
  }

  // .streaming_performance.ProcessCpuUsage p_cpu = 7;
  if (this->_internal_has_p_cpu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p_cpu_);
  }

  // .streaming_performance.ProcessMemoryUsage p_mem = 8;
  if (this->_internal_has_p_mem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p_mem_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatisticsSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatisticsSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatisticsSet::GetClassData() const { return &_class_data_; }

void StatisticsSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StatisticsSet *>(to)->MergeFrom(
      static_cast<const StatisticsSet &>(from));
}


void StatisticsSet::MergeFrom(const StatisticsSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.StatisticsSet)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ndf()) {
    _internal_mutable_ndf()->::streaming_performance::NetworkDropFrame::MergeFrom(from._internal_ndf());
  }
  if (from._internal_has_rdf()) {
    _internal_mutable_rdf()->::streaming_performance::RenderDropFrame::MergeFrom(from._internal_rdf());
  }
  if (from._internal_has_edf()) {
    _internal_mutable_edf()->::streaming_performance::EncodeDropFrame::MergeFrom(from._internal_edf());
  }
  if (from._internal_has_gpu()) {
    _internal_mutable_gpu()->::streaming_performance::GpuUsage::MergeFrom(from._internal_gpu());
  }
  if (from._internal_has_cpu()) {
    _internal_mutable_cpu()->::streaming_performance::CpuUsage::MergeFrom(from._internal_cpu());
  }
  if (from._internal_has_mem()) {
    _internal_mutable_mem()->::streaming_performance::MemoryUsage::MergeFrom(from._internal_mem());
  }
  if (from._internal_has_p_cpu()) {
    _internal_mutable_p_cpu()->::streaming_performance::ProcessCpuUsage::MergeFrom(from._internal_p_cpu());
  }
  if (from._internal_has_p_mem()) {
    _internal_mutable_p_mem()->::streaming_performance::ProcessMemoryUsage::MergeFrom(from._internal_p_mem());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatisticsSet::CopyFrom(const StatisticsSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.StatisticsSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsSet::IsInitialized() const {
  return true;
}

void StatisticsSet::InternalSwap(StatisticsSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatisticsSet, p_mem_)
      + sizeof(StatisticsSet::p_mem_)
      - PROTOBUF_FIELD_OFFSET(StatisticsSet, ndf_)>(
          reinterpret_cast<char*>(&ndf_),
          reinterpret_cast<char*>(&other->ndf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatisticsSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[16]);
}

// ===================================================================

class PerformanceReport::_Internal {
 public:
  static const ::streaming_performance::AppInfo& app_info(const PerformanceReport* msg);
  static const ::streaming_performance::StartLiveInfo& runtime_info(const PerformanceReport* msg);
  static const ::streaming_performance::StatisticsSet& statistics(const PerformanceReport* msg);
};

const ::streaming_performance::AppInfo&
PerformanceReport::_Internal::app_info(const PerformanceReport* msg) {
  return *msg->app_info_;
}
const ::streaming_performance::StartLiveInfo&
PerformanceReport::_Internal::runtime_info(const PerformanceReport* msg) {
  return *msg->runtime_info_;
}
const ::streaming_performance::StatisticsSet&
PerformanceReport::_Internal::statistics(const PerformanceReport* msg) {
  return *msg->statistics_;
}
PerformanceReport::PerformanceReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  source_items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:streaming_performance.PerformanceReport)
}
PerformanceReport::PerformanceReport(const PerformanceReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      source_items_(from.source_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_app_info()) {
    app_info_ = new ::streaming_performance::AppInfo(*from.app_info_);
  } else {
    app_info_ = nullptr;
  }
  if (from._internal_has_runtime_info()) {
    runtime_info_ = new ::streaming_performance::StartLiveInfo(*from.runtime_info_);
  } else {
    runtime_info_ = nullptr;
  }
  if (from._internal_has_statistics()) {
    statistics_ = new ::streaming_performance::StatisticsSet(*from.statistics_);
  } else {
    statistics_ = nullptr;
  }
  ::memcpy(&logver_, &from.logver_,
    static_cast<size_t>(reinterpret_cast<char*>(&sampling_) -
    reinterpret_cast<char*>(&logver_)) + sizeof(sampling_));
  // @@protoc_insertion_point(copy_constructor:streaming_performance.PerformanceReport)
}

inline void PerformanceReport::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sampling_) -
    reinterpret_cast<char*>(&app_info_)) + sizeof(sampling_));
}

PerformanceReport::~PerformanceReport() {
  // @@protoc_insertion_point(destructor:streaming_performance.PerformanceReport)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PerformanceReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete app_info_;
  if (this != internal_default_instance()) delete runtime_info_;
  if (this != internal_default_instance()) delete statistics_;
}

void PerformanceReport::ArenaDtor(void* object) {
  PerformanceReport* _this = reinterpret_cast< PerformanceReport* >(object);
  (void)_this;
}
void PerformanceReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PerformanceReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerformanceReport::Clear() {
// @@protoc_insertion_point(message_clear_start:streaming_performance.PerformanceReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_items_.Clear();
  if (GetArenaForAllocation() == nullptr && app_info_ != nullptr) {
    delete app_info_;
  }
  app_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && runtime_info_ != nullptr) {
    delete runtime_info_;
  }
  runtime_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && statistics_ != nullptr) {
    delete statistics_;
  }
  statistics_ = nullptr;
  ::memset(&logver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampling_) -
      reinterpret_cast<char*>(&logver_)) + sizeof(sampling_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerformanceReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 logver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          logver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sampling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sampling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.AppInfo app_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.StartLiveInfo runtime_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .streaming_performance.StatisticsSet statistics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .streaming_performance.SourceItem source_items = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_source_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PerformanceReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:streaming_performance.PerformanceReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 logver = 1;
  if (this->_internal_logver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_logver(), target);
  }

  // int32 sampling = 2;
  if (this->_internal_sampling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sampling(), target);
  }

  // .streaming_performance.AppInfo app_info = 3;
  if (this->_internal_has_app_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::app_info(this), target, stream);
  }

  // .streaming_performance.StartLiveInfo runtime_info = 4;
  if (this->_internal_has_runtime_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::runtime_info(this), target, stream);
  }

  // .streaming_performance.StatisticsSet statistics = 5;
  if (this->_internal_has_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::statistics(this), target, stream);
  }

  // repeated .streaming_performance.SourceItem source_items = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_source_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_source_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streaming_performance.PerformanceReport)
  return target;
}

size_t PerformanceReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:streaming_performance.PerformanceReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .streaming_performance.SourceItem source_items = 16;
  total_size += 2UL * this->_internal_source_items_size();
  for (const auto& msg : this->source_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .streaming_performance.AppInfo app_info = 3;
  if (this->_internal_has_app_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_info_);
  }

  // .streaming_performance.StartLiveInfo runtime_info = 4;
  if (this->_internal_has_runtime_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runtime_info_);
  }

  // .streaming_performance.StatisticsSet statistics = 5;
  if (this->_internal_has_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statistics_);
  }

  // int32 logver = 1;
  if (this->_internal_logver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logver());
  }

  // int32 sampling = 2;
  if (this->_internal_sampling() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sampling());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerformanceReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerformanceReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerformanceReport::GetClassData() const { return &_class_data_; }

void PerformanceReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PerformanceReport *>(to)->MergeFrom(
      static_cast<const PerformanceReport &>(from));
}


void PerformanceReport::MergeFrom(const PerformanceReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:streaming_performance.PerformanceReport)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_items_.MergeFrom(from.source_items_);
  if (from._internal_has_app_info()) {
    _internal_mutable_app_info()->::streaming_performance::AppInfo::MergeFrom(from._internal_app_info());
  }
  if (from._internal_has_runtime_info()) {
    _internal_mutable_runtime_info()->::streaming_performance::StartLiveInfo::MergeFrom(from._internal_runtime_info());
  }
  if (from._internal_has_statistics()) {
    _internal_mutable_statistics()->::streaming_performance::StatisticsSet::MergeFrom(from._internal_statistics());
  }
  if (from._internal_logver() != 0) {
    _internal_set_logver(from._internal_logver());
  }
  if (from._internal_sampling() != 0) {
    _internal_set_sampling(from._internal_sampling());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerformanceReport::CopyFrom(const PerformanceReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:streaming_performance.PerformanceReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceReport::IsInitialized() const {
  return true;
}

void PerformanceReport::InternalSwap(PerformanceReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  source_items_.InternalSwap(&other->source_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerformanceReport, sampling_)
      + sizeof(PerformanceReport::sampling_)
      - PROTOBUF_FIELD_OFFSET(PerformanceReport, app_info_)>(
          reinterpret_cast<char*>(&app_info_),
          reinterpret_cast<char*>(&other->app_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerformanceReport::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_streaming_5fdetails_2eproto_getter, &descriptor_table_streaming_5fdetails_2eproto_once,
      file_level_metadata_streaming_5fdetails_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace streaming_performance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::streaming_performance::SystemInfo* Arena::CreateMaybeMessage< ::streaming_performance::SystemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::SystemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::AppInfo* Arena::CreateMaybeMessage< ::streaming_performance::AppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::EncodingSettings* Arena::CreateMaybeMessage< ::streaming_performance::EncodingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::EncodingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::StartLiveInfo* Arena::CreateMaybeMessage< ::streaming_performance::StartLiveInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::StartLiveInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::SourceItem_PropsEntry_DoNotUse* Arena::CreateMaybeMessage< ::streaming_performance::SourceItem_PropsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::SourceItem_PropsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::SourceItem* Arena::CreateMaybeMessage< ::streaming_performance::SourceItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::SourceItem >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::SampleData* Arena::CreateMaybeMessage< ::streaming_performance::SampleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::SampleData >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::BaseStatisticInfo* Arena::CreateMaybeMessage< ::streaming_performance::BaseStatisticInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::BaseStatisticInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::NetworkDropFrame* Arena::CreateMaybeMessage< ::streaming_performance::NetworkDropFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::NetworkDropFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::RenderDropFrame* Arena::CreateMaybeMessage< ::streaming_performance::RenderDropFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::RenderDropFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::EncodeDropFrame* Arena::CreateMaybeMessage< ::streaming_performance::EncodeDropFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::EncodeDropFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::GpuUsage* Arena::CreateMaybeMessage< ::streaming_performance::GpuUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::GpuUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::CpuUsage* Arena::CreateMaybeMessage< ::streaming_performance::CpuUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::CpuUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::MemoryUsage* Arena::CreateMaybeMessage< ::streaming_performance::MemoryUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::MemoryUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::ProcessCpuUsage* Arena::CreateMaybeMessage< ::streaming_performance::ProcessCpuUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::ProcessCpuUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::ProcessMemoryUsage* Arena::CreateMaybeMessage< ::streaming_performance::ProcessMemoryUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::ProcessMemoryUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::StatisticsSet* Arena::CreateMaybeMessage< ::streaming_performance::StatisticsSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::StatisticsSet >(arena);
}
template<> PROTOBUF_NOINLINE ::streaming_performance::PerformanceReport* Arena::CreateMaybeMessage< ::streaming_performance::PerformanceReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::streaming_performance::PerformanceReport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
