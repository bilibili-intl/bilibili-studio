// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: polaris_bsns_event_report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_polaris_5fbsns_5fevent_5freport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_polaris_5fbsns_5fevent_5freport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_polaris_5fbsns_5fevent_5freport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_polaris_5fbsns_5fevent_5freport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_polaris_5fbsns_5fevent_5freport_2eproto;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventList;
struct EventListDefaultTypeInternal;
extern EventListDefaultTypeInternal _EventList_default_instance_;
class Event_MetaEntry_DoNotUse;
struct Event_MetaEntry_DoNotUseDefaultTypeInternal;
extern Event_MetaEntry_DoNotUseDefaultTypeInternal _Event_MetaEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Event* Arena::CreateMaybeMessage<::Event>(Arena*);
template<> ::EventList* Arena::CreateMaybeMessage<::EventList>(Arena*);
template<> ::Event_MetaEntry_DoNotUse* Arena::CreateMaybeMessage<::Event_MetaEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Event_MetaEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Event_MetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Event_MetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Event_MetaEntry_DoNotUse();
  explicit constexpr Event_MetaEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Event_MetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Event_MetaEntry_DoNotUse& other);
  static const Event_MetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Event_MetaEntry_DoNotUse*>(&_Event_MetaEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Event.MetaEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Event.MetaEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit constexpr Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return new Event();
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 4,
    kLogIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kBodyFieldNumber = 3,
  };
  // map<string, string> meta = 4;
  int meta_size() const;
  private:
  int _internal_meta_size() const;
  public:
  void clear_meta();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_meta();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_meta();

  // string logId = 1;
  void clear_logid();
  const std::string& logid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logid();
  PROTOBUF_MUST_USE_RESULT std::string* release_logid();
  void set_allocated_logid(std::string* logid);
  private:
  const std::string& _internal_logid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logid(const std::string& value);
  std::string* _internal_mutable_logid();
  public:

  // string eventId = 2;
  void clear_eventid();
  const std::string& eventid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eventid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eventid();
  PROTOBUF_MUST_USE_RESULT std::string* release_eventid();
  void set_allocated_eventid(std::string* eventid);
  private:
  const std::string& _internal_eventid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eventid(const std::string& value);
  std::string* _internal_mutable_eventid();
  public:

  // bytes body = 3;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_MUST_USE_RESULT std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Event_MetaEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> meta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_polaris_5fbsns_5fevent_5freport_2eproto;
};
// -------------------------------------------------------------------

class EventList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventList) */ {
 public:
  inline EventList() : EventList(nullptr) {}
  ~EventList() override;
  explicit constexpr EventList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventList(const EventList& from);
  EventList(EventList&& from) noexcept
    : EventList() {
    *this = ::std::move(from);
  }

  inline EventList& operator=(const EventList& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventList& operator=(EventList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventList& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventList* internal_default_instance() {
    return reinterpret_cast<const EventList*>(
               &_EventList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventList& a, EventList& b) {
    a.Swap(&b);
  }
  inline void Swap(EventList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventList* New() const final {
    return new EventList();
  }

  EventList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventList";
  }
  protected:
  explicit EventList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .Event events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
      mutable_events();
  private:
  const ::Event& _internal_events(int index) const;
  ::Event* _internal_add_events();
  public:
  const ::Event& events(int index) const;
  ::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:EventList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_polaris_5fbsns_5fevent_5freport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Event

// string logId = 1;
inline void Event::clear_logid() {
  logid_.ClearToEmpty();
}
inline const std::string& Event::logid() const {
  // @@protoc_insertion_point(field_get:Event.logId)
  return _internal_logid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_logid(ArgT0&& arg0, ArgT... args) {
 
 logid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Event.logId)
}
inline std::string* Event::mutable_logid() {
  std::string* _s = _internal_mutable_logid();
  // @@protoc_insertion_point(field_mutable:Event.logId)
  return _s;
}
inline const std::string& Event::_internal_logid() const {
  return logid_.Get();
}
inline void Event::_internal_set_logid(const std::string& value) {
  
  logid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_logid() {
  
  return logid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Event::release_logid() {
  // @@protoc_insertion_point(field_release:Event.logId)
  return logid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Event::set_allocated_logid(std::string* logid) {
  if (logid != nullptr) {
    
  } else {
    
  }
  logid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Event.logId)
}

// string eventId = 2;
inline void Event::clear_eventid() {
  eventid_.ClearToEmpty();
}
inline const std::string& Event::eventid() const {
  // @@protoc_insertion_point(field_get:Event.eventId)
  return _internal_eventid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_eventid(ArgT0&& arg0, ArgT... args) {
 
 eventid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Event.eventId)
}
inline std::string* Event::mutable_eventid() {
  std::string* _s = _internal_mutable_eventid();
  // @@protoc_insertion_point(field_mutable:Event.eventId)
  return _s;
}
inline const std::string& Event::_internal_eventid() const {
  return eventid_.Get();
}
inline void Event::_internal_set_eventid(const std::string& value) {
  
  eventid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_eventid() {
  
  return eventid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Event::release_eventid() {
  // @@protoc_insertion_point(field_release:Event.eventId)
  return eventid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Event::set_allocated_eventid(std::string* eventid) {
  if (eventid != nullptr) {
    
  } else {
    
  }
  eventid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eventid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Event.eventId)
}

// bytes body = 3;
inline void Event::clear_body() {
  body_.ClearToEmpty();
}
inline const std::string& Event::body() const {
  // @@protoc_insertion_point(field_get:Event.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_body(ArgT0&& arg0, ArgT... args) {
 
 body_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Event.body)
}
inline std::string* Event::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:Event.body)
  return _s;
}
inline const std::string& Event::_internal_body() const {
  return body_.Get();
}
inline void Event::_internal_set_body(const std::string& value) {
  
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_body() {
  
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Event::release_body() {
  // @@protoc_insertion_point(field_release:Event.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Event::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Event.body)
}

// map<string, string> meta = 4;
inline int Event::_internal_meta_size() const {
  return meta_.size();
}
inline int Event::meta_size() const {
  return _internal_meta_size();
}
inline void Event::clear_meta() {
  meta_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Event::_internal_meta() const {
  return meta_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Event::meta() const {
  // @@protoc_insertion_point(field_map:Event.meta)
  return _internal_meta();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Event::_internal_mutable_meta() {
  return meta_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Event::mutable_meta() {
  // @@protoc_insertion_point(field_mutable_map:Event.meta)
  return _internal_mutable_meta();
}

// -------------------------------------------------------------------

// EventList

// repeated .Event events = 1;
inline int EventList::_internal_events_size() const {
  return events_.size();
}
inline int EventList::events_size() const {
  return _internal_events_size();
}
inline void EventList::clear_events() {
  events_.Clear();
}
inline ::Event* EventList::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:EventList.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
EventList::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:EventList.events)
  return &events_;
}
inline const ::Event& EventList::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::Event& EventList::events(int index) const {
  // @@protoc_insertion_point(field_get:EventList.events)
  return _internal_events(index);
}
inline ::Event* EventList::_internal_add_events() {
  return events_.Add();
}
inline ::Event* EventList::add_events() {
  ::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:EventList.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
EventList::events() const {
  // @@protoc_insertion_point(field_list:EventList.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_polaris_5fbsns_5fevent_5freport_2eproto
