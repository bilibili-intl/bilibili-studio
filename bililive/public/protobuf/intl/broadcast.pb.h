// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: broadcast.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_broadcast_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_broadcast_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "status.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/empty.pb.h>
#include "gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_broadcast_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_broadcast_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_broadcast_2eproto;
namespace bilibili {
namespace broadcast {
namespace v1 {
class AuthReq;
struct AuthReqDefaultTypeInternal;
extern AuthReqDefaultTypeInternal _AuthReq_default_instance_;
class AuthResp;
struct AuthRespDefaultTypeInternal;
extern AuthRespDefaultTypeInternal _AuthResp_default_instance_;
class BroadcastFrame;
struct BroadcastFrameDefaultTypeInternal;
extern BroadcastFrameDefaultTypeInternal _BroadcastFrame_default_instance_;
class FrameOption;
struct FrameOptionDefaultTypeInternal;
extern FrameOptionDefaultTypeInternal _FrameOption_default_instance_;
class HeartbeatReq;
struct HeartbeatReqDefaultTypeInternal;
extern HeartbeatReqDefaultTypeInternal _HeartbeatReq_default_instance_;
class HeartbeatResp;
struct HeartbeatRespDefaultTypeInternal;
extern HeartbeatRespDefaultTypeInternal _HeartbeatResp_default_instance_;
class MessageAckReq;
struct MessageAckReqDefaultTypeInternal;
extern MessageAckReqDefaultTypeInternal _MessageAckReq_default_instance_;
class TargetPath;
struct TargetPathDefaultTypeInternal;
extern TargetPathDefaultTypeInternal _TargetPath_default_instance_;
}  // namespace v1
}  // namespace broadcast
}  // namespace bilibili
PROTOBUF_NAMESPACE_OPEN
template<> ::bilibili::broadcast::v1::AuthReq* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::AuthReq>(Arena*);
template<> ::bilibili::broadcast::v1::AuthResp* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::AuthResp>(Arena*);
template<> ::bilibili::broadcast::v1::BroadcastFrame* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::BroadcastFrame>(Arena*);
template<> ::bilibili::broadcast::v1::FrameOption* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::FrameOption>(Arena*);
template<> ::bilibili::broadcast::v1::HeartbeatReq* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::HeartbeatReq>(Arena*);
template<> ::bilibili::broadcast::v1::HeartbeatResp* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::HeartbeatResp>(Arena*);
template<> ::bilibili::broadcast::v1::MessageAckReq* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::MessageAckReq>(Arena*);
template<> ::bilibili::broadcast::v1::TargetPath* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::TargetPath>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bilibili {
namespace broadcast {
namespace v1 {

// ===================================================================

class AuthReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.AuthReq) */ {
 public:
  inline AuthReq() : AuthReq(nullptr) {}
  ~AuthReq() override;
  explicit constexpr AuthReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthReq(const AuthReq& from);
  AuthReq(AuthReq&& from) noexcept
    : AuthReq() {
    *this = ::std::move(from);
  }

  inline AuthReq& operator=(const AuthReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthReq& operator=(AuthReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthReq* internal_default_instance() {
    return reinterpret_cast<const AuthReq*>(
               &_AuthReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthReq& a, AuthReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthReq* New() const final {
    return new AuthReq();
  }

  AuthReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.AuthReq";
  }
  protected:
  explicit AuthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
    kConnIdFieldNumber = 2,
    kLastMsgIdFieldNumber = 3,
  };
  // string guid = 1;
  void clear_guid();
  const std::string& guid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guid();
  PROTOBUF_MUST_USE_RESULT std::string* release_guid();
  void set_allocated_guid(std::string* guid);
  private:
  const std::string& _internal_guid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guid(const std::string& value);
  std::string* _internal_mutable_guid();
  public:

  // string conn_id = 2;
  void clear_conn_id();
  const std::string& conn_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_conn_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_conn_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_conn_id();
  void set_allocated_conn_id(std::string* conn_id);
  private:
  const std::string& _internal_conn_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_conn_id(const std::string& value);
  std::string* _internal_mutable_conn_id();
  public:

  // int64 last_msg_id = 3;
  void clear_last_msg_id();
  ::PROTOBUF_NAMESPACE_ID::int64 last_msg_id() const;
  void set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_msg_id() const;
  void _internal_set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.AuthReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conn_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class AuthResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.AuthResp) */ {
 public:
  inline AuthResp() : AuthResp(nullptr) {}
  ~AuthResp() override;
  explicit constexpr AuthResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthResp(const AuthResp& from);
  AuthResp(AuthResp&& from) noexcept
    : AuthResp() {
    *this = ::std::move(from);
  }

  inline AuthResp& operator=(const AuthResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthResp& operator=(AuthResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthResp* internal_default_instance() {
    return reinterpret_cast<const AuthResp*>(
               &_AuthResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthResp& a, AuthResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthResp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthResp* New() const final {
    return new AuthResp();
  }

  AuthResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.AuthResp";
  }
  protected:
  explicit AuthResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.AuthResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.HeartbeatReq) */ {
 public:
  inline HeartbeatReq() : HeartbeatReq(nullptr) {}
  ~HeartbeatReq() override;
  explicit constexpr HeartbeatReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatReq(const HeartbeatReq& from);
  HeartbeatReq(HeartbeatReq&& from) noexcept
    : HeartbeatReq() {
    *this = ::std::move(from);
  }

  inline HeartbeatReq& operator=(const HeartbeatReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatReq& operator=(HeartbeatReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatReq* internal_default_instance() {
    return reinterpret_cast<const HeartbeatReq*>(
               &_HeartbeatReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartbeatReq& a, HeartbeatReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatReq* New() const final {
    return new HeartbeatReq();
  }

  HeartbeatReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartbeatReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeartbeatReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.HeartbeatReq";
  }
  protected:
  explicit HeartbeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.HeartbeatReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class HeartbeatResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.HeartbeatResp) */ {
 public:
  inline HeartbeatResp() : HeartbeatResp(nullptr) {}
  ~HeartbeatResp() override;
  explicit constexpr HeartbeatResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartbeatResp(const HeartbeatResp& from);
  HeartbeatResp(HeartbeatResp&& from) noexcept
    : HeartbeatResp() {
    *this = ::std::move(from);
  }

  inline HeartbeatResp& operator=(const HeartbeatResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartbeatResp& operator=(HeartbeatResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartbeatResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartbeatResp* internal_default_instance() {
    return reinterpret_cast<const HeartbeatResp*>(
               &_HeartbeatResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeartbeatResp& a, HeartbeatResp& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartbeatResp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartbeatResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartbeatResp* New() const final {
    return new HeartbeatResp();
  }

  HeartbeatResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartbeatResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartbeatResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeartbeatResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartbeatResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.HeartbeatResp";
  }
  protected:
  explicit HeartbeatResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.HeartbeatResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class TargetPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.TargetPath) */ {
 public:
  inline TargetPath() : TargetPath(nullptr) {}
  ~TargetPath() override;
  explicit constexpr TargetPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetPath(const TargetPath& from);
  TargetPath(TargetPath&& from) noexcept
    : TargetPath() {
    *this = ::std::move(from);
  }

  inline TargetPath& operator=(const TargetPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetPath& operator=(TargetPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetPath* internal_default_instance() {
    return reinterpret_cast<const TargetPath*>(
               &_TargetPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TargetPath& a, TargetPath& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetPath* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetPath* New() const final {
    return new TargetPath();
  }

  TargetPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TargetPath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.TargetPath";
  }
  protected:
  explicit TargetPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPathsFieldNumber = 1,
  };
  // repeated string target_paths = 1;
  int target_paths_size() const;
  private:
  int _internal_target_paths_size() const;
  public:
  void clear_target_paths();
  const std::string& target_paths(int index) const;
  std::string* mutable_target_paths(int index);
  void set_target_paths(int index, const std::string& value);
  void set_target_paths(int index, std::string&& value);
  void set_target_paths(int index, const char* value);
  void set_target_paths(int index, const char* value, size_t size);
  std::string* add_target_paths();
  void add_target_paths(const std::string& value);
  void add_target_paths(std::string&& value);
  void add_target_paths(const char* value);
  void add_target_paths(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_paths();
  private:
  const std::string& _internal_target_paths(int index) const;
  std::string* _internal_add_target_paths();
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.TargetPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class MessageAckReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.MessageAckReq) */ {
 public:
  inline MessageAckReq() : MessageAckReq(nullptr) {}
  ~MessageAckReq() override;
  explicit constexpr MessageAckReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageAckReq(const MessageAckReq& from);
  MessageAckReq(MessageAckReq&& from) noexcept
    : MessageAckReq() {
    *this = ::std::move(from);
  }

  inline MessageAckReq& operator=(const MessageAckReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageAckReq& operator=(MessageAckReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageAckReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageAckReq* internal_default_instance() {
    return reinterpret_cast<const MessageAckReq*>(
               &_MessageAckReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MessageAckReq& a, MessageAckReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageAckReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageAckReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageAckReq* New() const final {
    return new MessageAckReq();
  }

  MessageAckReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageAckReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageAckReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageAckReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAckReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.MessageAckReq";
  }
  protected:
  explicit MessageAckReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckOriginFieldNumber = 2,
    kTargetPathFieldNumber = 3,
    kAckIdFieldNumber = 1,
  };
  // string ack_origin = 2;
  void clear_ack_origin();
  const std::string& ack_origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ack_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ack_origin();
  PROTOBUF_MUST_USE_RESULT std::string* release_ack_origin();
  void set_allocated_ack_origin(std::string* ack_origin);
  private:
  const std::string& _internal_ack_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ack_origin(const std::string& value);
  std::string* _internal_mutable_ack_origin();
  public:

  // string target_path = 3;
  void clear_target_path();
  const std::string& target_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_target_path();
  void set_allocated_target_path(std::string* target_path);
  private:
  const std::string& _internal_target_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_path(const std::string& value);
  std::string* _internal_mutable_target_path();
  public:

  // int64 ack_id = 1;
  void clear_ack_id();
  ::PROTOBUF_NAMESPACE_ID::int64 ack_id() const;
  void set_ack_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ack_id() const;
  void _internal_set_ack_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.MessageAckReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ack_origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_path_;
  ::PROTOBUF_NAMESPACE_ID::int64 ack_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class FrameOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.FrameOption) */ {
 public:
  inline FrameOption() : FrameOption(nullptr) {}
  ~FrameOption() override;
  explicit constexpr FrameOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameOption(const FrameOption& from);
  FrameOption(FrameOption&& from) noexcept
    : FrameOption() {
    *this = ::std::move(from);
  }

  inline FrameOption& operator=(const FrameOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameOption& operator=(FrameOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameOption* internal_default_instance() {
    return reinterpret_cast<const FrameOption*>(
               &_FrameOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FrameOption& a, FrameOption& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameOption* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameOption* New() const final {
    return new FrameOption();
  }

  FrameOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameOption& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameOption* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.FrameOption";
  }
  protected:
  explicit FrameOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckOriginFieldNumber = 5,
    kStatusFieldNumber = 4,
    kMessageIdFieldNumber = 1,
    kSequenceFieldNumber = 2,
    kTimestampFieldNumber = 6,
    kIsAckFieldNumber = 3,
  };
  // string ack_origin = 5;
  void clear_ack_origin();
  const std::string& ack_origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ack_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ack_origin();
  PROTOBUF_MUST_USE_RESULT std::string* release_ack_origin();
  void set_allocated_ack_origin(std::string* ack_origin);
  private:
  const std::string& _internal_ack_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ack_origin(const std::string& value);
  std::string* _internal_mutable_ack_origin();
  public:

  // .bilibili.rpc.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::bilibili::rpc::Status& status() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::rpc::Status* release_status();
  ::bilibili::rpc::Status* mutable_status();
  void set_allocated_status(::bilibili::rpc::Status* status);
  private:
  const ::bilibili::rpc::Status& _internal_status() const;
  ::bilibili::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::bilibili::rpc::Status* status);
  ::bilibili::rpc::Status* unsafe_arena_release_status();

  // int64 message_id = 1;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::int64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sequence = 2;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_ack = 3;
  void clear_is_ack();
  bool is_ack() const;
  void set_is_ack(bool value);
  private:
  bool _internal_is_ack() const;
  void _internal_set_is_ack(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.FrameOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ack_origin_;
  ::bilibili::rpc::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int64 message_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  bool is_ack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_broadcast_2eproto;
};
// -------------------------------------------------------------------

class BroadcastFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.BroadcastFrame) */ {
 public:
  inline BroadcastFrame() : BroadcastFrame(nullptr) {}
  ~BroadcastFrame() override;
  explicit constexpr BroadcastFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastFrame(const BroadcastFrame& from);
  BroadcastFrame(BroadcastFrame&& from) noexcept
    : BroadcastFrame() {
    *this = ::std::move(from);
  }

  inline BroadcastFrame& operator=(const BroadcastFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastFrame& operator=(BroadcastFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastFrame* internal_default_instance() {
    return reinterpret_cast<const BroadcastFrame*>(
               &_BroadcastFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BroadcastFrame& a, BroadcastFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastFrame* New() const final {
    return new BroadcastFrame();
  }

  BroadcastFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BroadcastFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.BroadcastFrame";
  }
  protected:
  explicit BroadcastFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPathFieldNumber = 2,
    kOptionsFieldNumber = 1,
    kBodyFieldNumber = 3,
  };
  // string target_path = 2;
  void clear_target_path();
  const std::string& target_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_target_path();
  void set_allocated_target_path(std::string* target_path);
  private:
  const std::string& _internal_target_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_path(const std::string& value);
  std::string* _internal_mutable_target_path();
  public:

  // .bilibili.broadcast.v1.FrameOption options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::bilibili::broadcast::v1::FrameOption& options() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::FrameOption* release_options();
  ::bilibili::broadcast::v1::FrameOption* mutable_options();
  void set_allocated_options(::bilibili::broadcast::v1::FrameOption* options);
  private:
  const ::bilibili::broadcast::v1::FrameOption& _internal_options() const;
  ::bilibili::broadcast::v1::FrameOption* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::bilibili::broadcast::v1::FrameOption* options);
  ::bilibili::broadcast::v1::FrameOption* unsafe_arena_release_options();

  // .google.protobuf.Any body = 3;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const PROTOBUF_NAMESPACE_ID::Any& body() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_body();
  PROTOBUF_NAMESPACE_ID::Any* mutable_body();
  void set_allocated_body(PROTOBUF_NAMESPACE_ID::Any* body);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_body() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      PROTOBUF_NAMESPACE_ID::Any* body);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.BroadcastFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_path_;
  ::bilibili::broadcast::v1::FrameOption* options_;
  PROTOBUF_NAMESPACE_ID::Any* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_broadcast_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthReq

// string guid = 1;
inline void AuthReq::clear_guid() {
  guid_.ClearToEmpty();
}
inline const std::string& AuthReq::guid() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.AuthReq.guid)
  return _internal_guid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthReq::set_guid(ArgT0&& arg0, ArgT... args) {
 
 guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.AuthReq.guid)
}
inline std::string* AuthReq::mutable_guid() {
  std::string* _s = _internal_mutable_guid();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.AuthReq.guid)
  return _s;
}
inline const std::string& AuthReq::_internal_guid() const {
  return guid_.Get();
}
inline void AuthReq::_internal_set_guid(const std::string& value) {
  
  guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthReq::_internal_mutable_guid() {
  
  return guid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthReq::release_guid() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.AuthReq.guid)
  return guid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthReq::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    
  } else {
    
  }
  guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.AuthReq.guid)
}

// string conn_id = 2;
inline void AuthReq::clear_conn_id() {
  conn_id_.ClearToEmpty();
}
inline const std::string& AuthReq::conn_id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.AuthReq.conn_id)
  return _internal_conn_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthReq::set_conn_id(ArgT0&& arg0, ArgT... args) {
 
 conn_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.AuthReq.conn_id)
}
inline std::string* AuthReq::mutable_conn_id() {
  std::string* _s = _internal_mutable_conn_id();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.AuthReq.conn_id)
  return _s;
}
inline const std::string& AuthReq::_internal_conn_id() const {
  return conn_id_.Get();
}
inline void AuthReq::_internal_set_conn_id(const std::string& value) {
  
  conn_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthReq::_internal_mutable_conn_id() {
  
  return conn_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthReq::release_conn_id() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.AuthReq.conn_id)
  return conn_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthReq::set_allocated_conn_id(std::string* conn_id) {
  if (conn_id != nullptr) {
    
  } else {
    
  }
  conn_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conn_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.AuthReq.conn_id)
}

// int64 last_msg_id = 3;
inline void AuthReq::clear_last_msg_id() {
  last_msg_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthReq::_internal_last_msg_id() const {
  return last_msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthReq::last_msg_id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.AuthReq.last_msg_id)
  return _internal_last_msg_id();
}
inline void AuthReq::_internal_set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_msg_id_ = value;
}
inline void AuthReq::set_last_msg_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_msg_id(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.AuthReq.last_msg_id)
}

// -------------------------------------------------------------------

// AuthResp

// -------------------------------------------------------------------

// HeartbeatReq

// -------------------------------------------------------------------

// HeartbeatResp

// -------------------------------------------------------------------

// TargetPath

// repeated string target_paths = 1;
inline int TargetPath::_internal_target_paths_size() const {
  return target_paths_.size();
}
inline int TargetPath::target_paths_size() const {
  return _internal_target_paths_size();
}
inline void TargetPath::clear_target_paths() {
  target_paths_.Clear();
}
inline std::string* TargetPath::add_target_paths() {
  std::string* _s = _internal_add_target_paths();
  // @@protoc_insertion_point(field_add_mutable:bilibili.broadcast.v1.TargetPath.target_paths)
  return _s;
}
inline const std::string& TargetPath::_internal_target_paths(int index) const {
  return target_paths_.Get(index);
}
inline const std::string& TargetPath::target_paths(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.TargetPath.target_paths)
  return _internal_target_paths(index);
}
inline std::string* TargetPath::mutable_target_paths(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.TargetPath.target_paths)
  return target_paths_.Mutable(index);
}
inline void TargetPath::set_target_paths(int index, const std::string& value) {
  target_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.TargetPath.target_paths)
}
inline void TargetPath::set_target_paths(int index, std::string&& value) {
  target_paths_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.TargetPath.target_paths)
}
inline void TargetPath::set_target_paths(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bilibili.broadcast.v1.TargetPath.target_paths)
}
inline void TargetPath::set_target_paths(int index, const char* value, size_t size) {
  target_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bilibili.broadcast.v1.TargetPath.target_paths)
}
inline std::string* TargetPath::_internal_add_target_paths() {
  return target_paths_.Add();
}
inline void TargetPath::add_target_paths(const std::string& value) {
  target_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bilibili.broadcast.v1.TargetPath.target_paths)
}
inline void TargetPath::add_target_paths(std::string&& value) {
  target_paths_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bilibili.broadcast.v1.TargetPath.target_paths)
}
inline void TargetPath::add_target_paths(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bilibili.broadcast.v1.TargetPath.target_paths)
}
inline void TargetPath::add_target_paths(const char* value, size_t size) {
  target_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bilibili.broadcast.v1.TargetPath.target_paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TargetPath::target_paths() const {
  // @@protoc_insertion_point(field_list:bilibili.broadcast.v1.TargetPath.target_paths)
  return target_paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TargetPath::mutable_target_paths() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.broadcast.v1.TargetPath.target_paths)
  return &target_paths_;
}

// -------------------------------------------------------------------

// MessageAckReq

// int64 ack_id = 1;
inline void MessageAckReq::clear_ack_id() {
  ack_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageAckReq::_internal_ack_id() const {
  return ack_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageAckReq::ack_id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.MessageAckReq.ack_id)
  return _internal_ack_id();
}
inline void MessageAckReq::_internal_set_ack_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ack_id_ = value;
}
inline void MessageAckReq::set_ack_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ack_id(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.MessageAckReq.ack_id)
}

// string ack_origin = 2;
inline void MessageAckReq::clear_ack_origin() {
  ack_origin_.ClearToEmpty();
}
inline const std::string& MessageAckReq::ack_origin() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.MessageAckReq.ack_origin)
  return _internal_ack_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageAckReq::set_ack_origin(ArgT0&& arg0, ArgT... args) {
 
 ack_origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.MessageAckReq.ack_origin)
}
inline std::string* MessageAckReq::mutable_ack_origin() {
  std::string* _s = _internal_mutable_ack_origin();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.MessageAckReq.ack_origin)
  return _s;
}
inline const std::string& MessageAckReq::_internal_ack_origin() const {
  return ack_origin_.Get();
}
inline void MessageAckReq::_internal_set_ack_origin(const std::string& value) {
  
  ack_origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageAckReq::_internal_mutable_ack_origin() {
  
  return ack_origin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageAckReq::release_ack_origin() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.MessageAckReq.ack_origin)
  return ack_origin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageAckReq::set_allocated_ack_origin(std::string* ack_origin) {
  if (ack_origin != nullptr) {
    
  } else {
    
  }
  ack_origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ack_origin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.MessageAckReq.ack_origin)
}

// string target_path = 3;
inline void MessageAckReq::clear_target_path() {
  target_path_.ClearToEmpty();
}
inline const std::string& MessageAckReq::target_path() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.MessageAckReq.target_path)
  return _internal_target_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageAckReq::set_target_path(ArgT0&& arg0, ArgT... args) {
 
 target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.MessageAckReq.target_path)
}
inline std::string* MessageAckReq::mutable_target_path() {
  std::string* _s = _internal_mutable_target_path();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.MessageAckReq.target_path)
  return _s;
}
inline const std::string& MessageAckReq::_internal_target_path() const {
  return target_path_.Get();
}
inline void MessageAckReq::_internal_set_target_path(const std::string& value) {
  
  target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageAckReq::_internal_mutable_target_path() {
  
  return target_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageAckReq::release_target_path() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.MessageAckReq.target_path)
  return target_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageAckReq::set_allocated_target_path(std::string* target_path) {
  if (target_path != nullptr) {
    
  } else {
    
  }
  target_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.MessageAckReq.target_path)
}

// -------------------------------------------------------------------

// FrameOption

// int64 message_id = 1;
inline void FrameOption::clear_message_id() {
  message_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameOption::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameOption::message_id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.FrameOption.message_id)
  return _internal_message_id();
}
inline void FrameOption::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  message_id_ = value;
}
inline void FrameOption::set_message_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.FrameOption.message_id)
}

// int64 sequence = 2;
inline void FrameOption::clear_sequence() {
  sequence_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameOption::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameOption::sequence() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.FrameOption.sequence)
  return _internal_sequence();
}
inline void FrameOption::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void FrameOption::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.FrameOption.sequence)
}

// bool is_ack = 3;
inline void FrameOption::clear_is_ack() {
  is_ack_ = false;
}
inline bool FrameOption::_internal_is_ack() const {
  return is_ack_;
}
inline bool FrameOption::is_ack() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.FrameOption.is_ack)
  return _internal_is_ack();
}
inline void FrameOption::_internal_set_is_ack(bool value) {
  
  is_ack_ = value;
}
inline void FrameOption::set_is_ack(bool value) {
  _internal_set_is_ack(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.FrameOption.is_ack)
}

// .bilibili.rpc.Status status = 4;
inline bool FrameOption::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool FrameOption::has_status() const {
  return _internal_has_status();
}
inline const ::bilibili::rpc::Status& FrameOption::_internal_status() const {
  const ::bilibili::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::rpc::Status&>(
      ::bilibili::rpc::_Status_default_instance_);
}
inline const ::bilibili::rpc::Status& FrameOption::status() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.FrameOption.status)
  return _internal_status();
}
inline void FrameOption::unsafe_arena_set_allocated_status(
    ::bilibili::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.FrameOption.status)
}
inline ::bilibili::rpc::Status* FrameOption::release_status() {
  
  ::bilibili::rpc::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::rpc::Status* FrameOption::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.FrameOption.status)
  
  ::bilibili::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::bilibili::rpc::Status* FrameOption::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::rpc::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::bilibili::rpc::Status* FrameOption::mutable_status() {
  ::bilibili::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.FrameOption.status)
  return _msg;
}
inline void FrameOption::set_allocated_status(::bilibili::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.FrameOption.status)
}

// string ack_origin = 5;
inline void FrameOption::clear_ack_origin() {
  ack_origin_.ClearToEmpty();
}
inline const std::string& FrameOption::ack_origin() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.FrameOption.ack_origin)
  return _internal_ack_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrameOption::set_ack_origin(ArgT0&& arg0, ArgT... args) {
 
 ack_origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.FrameOption.ack_origin)
}
inline std::string* FrameOption::mutable_ack_origin() {
  std::string* _s = _internal_mutable_ack_origin();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.FrameOption.ack_origin)
  return _s;
}
inline const std::string& FrameOption::_internal_ack_origin() const {
  return ack_origin_.Get();
}
inline void FrameOption::_internal_set_ack_origin(const std::string& value) {
  
  ack_origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FrameOption::_internal_mutable_ack_origin() {
  
  return ack_origin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FrameOption::release_ack_origin() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.FrameOption.ack_origin)
  return ack_origin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FrameOption::set_allocated_ack_origin(std::string* ack_origin) {
  if (ack_origin != nullptr) {
    
  } else {
    
  }
  ack_origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ack_origin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.FrameOption.ack_origin)
}

// int64 timestamp = 6;
inline void FrameOption::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameOption::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FrameOption::timestamp() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.FrameOption.timestamp)
  return _internal_timestamp();
}
inline void FrameOption::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void FrameOption::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.FrameOption.timestamp)
}

// -------------------------------------------------------------------

// BroadcastFrame

// .bilibili.broadcast.v1.FrameOption options = 1;
inline bool BroadcastFrame::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool BroadcastFrame::has_options() const {
  return _internal_has_options();
}
inline void BroadcastFrame::clear_options() {
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::bilibili::broadcast::v1::FrameOption& BroadcastFrame::_internal_options() const {
  const ::bilibili::broadcast::v1::FrameOption* p = options_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::v1::FrameOption&>(
      ::bilibili::broadcast::v1::_FrameOption_default_instance_);
}
inline const ::bilibili::broadcast::v1::FrameOption& BroadcastFrame::options() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.BroadcastFrame.options)
  return _internal_options();
}
inline void BroadcastFrame::unsafe_arena_set_allocated_options(
    ::bilibili::broadcast::v1::FrameOption* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.BroadcastFrame.options)
}
inline ::bilibili::broadcast::v1::FrameOption* BroadcastFrame::release_options() {
  
  ::bilibili::broadcast::v1::FrameOption* temp = options_;
  options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::v1::FrameOption* BroadcastFrame::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.BroadcastFrame.options)
  
  ::bilibili::broadcast::v1::FrameOption* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::v1::FrameOption* BroadcastFrame::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::v1::FrameOption>(GetArenaForAllocation());
    options_ = p;
  }
  return options_;
}
inline ::bilibili::broadcast::v1::FrameOption* BroadcastFrame::mutable_options() {
  ::bilibili::broadcast::v1::FrameOption* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.BroadcastFrame.options)
  return _msg;
}
inline void BroadcastFrame::set_allocated_options(::bilibili::broadcast::v1::FrameOption* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::v1::FrameOption>::GetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.BroadcastFrame.options)
}

// string target_path = 2;
inline void BroadcastFrame::clear_target_path() {
  target_path_.ClearToEmpty();
}
inline const std::string& BroadcastFrame::target_path() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.BroadcastFrame.target_path)
  return _internal_target_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BroadcastFrame::set_target_path(ArgT0&& arg0, ArgT... args) {
 
 target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.BroadcastFrame.target_path)
}
inline std::string* BroadcastFrame::mutable_target_path() {
  std::string* _s = _internal_mutable_target_path();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.BroadcastFrame.target_path)
  return _s;
}
inline const std::string& BroadcastFrame::_internal_target_path() const {
  return target_path_.Get();
}
inline void BroadcastFrame::_internal_set_target_path(const std::string& value) {
  
  target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BroadcastFrame::_internal_mutable_target_path() {
  
  return target_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BroadcastFrame::release_target_path() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.BroadcastFrame.target_path)
  return target_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BroadcastFrame::set_allocated_target_path(std::string* target_path) {
  if (target_path != nullptr) {
    
  } else {
    
  }
  target_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.BroadcastFrame.target_path)
}

// .google.protobuf.Any body = 3;
inline bool BroadcastFrame::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool BroadcastFrame::has_body() const {
  return _internal_has_body();
}
inline const PROTOBUF_NAMESPACE_ID::Any& BroadcastFrame::_internal_body() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& BroadcastFrame::body() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.BroadcastFrame.body)
  return _internal_body();
}
inline void BroadcastFrame::unsafe_arena_set_allocated_body(
    PROTOBUF_NAMESPACE_ID::Any* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.BroadcastFrame.body)
}
inline PROTOBUF_NAMESPACE_ID::Any* BroadcastFrame::release_body() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = body_;
  body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* BroadcastFrame::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.BroadcastFrame.body)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = body_;
  body_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* BroadcastFrame::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    body_ = p;
  }
  return body_;
}
inline PROTOBUF_NAMESPACE_ID::Any* BroadcastFrame::mutable_body() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.BroadcastFrame.body)
  return _msg;
}
inline void BroadcastFrame::set_allocated_body(PROTOBUF_NAMESPACE_ID::Any* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body));
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.BroadcastFrame.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace broadcast
}  // namespace bilibili

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_broadcast_2eproto
