// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: broadcast.proto

#include "broadcast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace bilibili {
namespace broadcast {
namespace v1 {
constexpr AuthReq::AuthReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , conn_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_msg_id_(int64_t{0}){}
struct AuthReqDefaultTypeInternal {
  constexpr AuthReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthReqDefaultTypeInternal() {}
  union {
    AuthReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthReqDefaultTypeInternal _AuthReq_default_instance_;
constexpr AuthResp::AuthResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AuthRespDefaultTypeInternal {
  constexpr AuthRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRespDefaultTypeInternal() {}
  union {
    AuthResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRespDefaultTypeInternal _AuthResp_default_instance_;
constexpr HeartbeatReq::HeartbeatReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HeartbeatReqDefaultTypeInternal {
  constexpr HeartbeatReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartbeatReqDefaultTypeInternal() {}
  union {
    HeartbeatReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartbeatReqDefaultTypeInternal _HeartbeatReq_default_instance_;
constexpr HeartbeatResp::HeartbeatResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HeartbeatRespDefaultTypeInternal {
  constexpr HeartbeatRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartbeatRespDefaultTypeInternal() {}
  union {
    HeartbeatResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartbeatRespDefaultTypeInternal _HeartbeatResp_default_instance_;
constexpr TargetPath::TargetPath(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_paths_(){}
struct TargetPathDefaultTypeInternal {
  constexpr TargetPathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetPathDefaultTypeInternal() {}
  union {
    TargetPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetPathDefaultTypeInternal _TargetPath_default_instance_;
constexpr MessageAckReq::MessageAckReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_origin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ack_id_(int64_t{0}){}
struct MessageAckReqDefaultTypeInternal {
  constexpr MessageAckReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageAckReqDefaultTypeInternal() {}
  union {
    MessageAckReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageAckReqDefaultTypeInternal _MessageAckReq_default_instance_;
constexpr FrameOption::FrameOption(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_origin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(nullptr)
  , message_id_(int64_t{0})
  , sequence_(int64_t{0})
  , timestamp_(int64_t{0})
  , is_ack_(false){}
struct FrameOptionDefaultTypeInternal {
  constexpr FrameOptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrameOptionDefaultTypeInternal() {}
  union {
    FrameOption _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrameOptionDefaultTypeInternal _FrameOption_default_instance_;
constexpr BroadcastFrame::BroadcastFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , options_(nullptr)
  , body_(nullptr){}
struct BroadcastFrameDefaultTypeInternal {
  constexpr BroadcastFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BroadcastFrameDefaultTypeInternal() {}
  union {
    BroadcastFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BroadcastFrameDefaultTypeInternal _BroadcastFrame_default_instance_;
}  // namespace v1
}  // namespace broadcast
}  // namespace bilibili
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_broadcast_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_broadcast_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_broadcast_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_broadcast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::AuthReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::AuthReq, guid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::AuthReq, conn_id_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::AuthReq, last_msg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::AuthResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::HeartbeatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::HeartbeatResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::TargetPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::TargetPath, target_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::MessageAckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::MessageAckReq, ack_id_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::MessageAckReq, ack_origin_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::MessageAckReq, target_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::FrameOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::FrameOption, message_id_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::FrameOption, sequence_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::FrameOption, is_ack_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::FrameOption, status_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::FrameOption, ack_origin_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::FrameOption, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::BroadcastFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::BroadcastFrame, options_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::BroadcastFrame, target_path_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::v1::BroadcastFrame, body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bilibili::broadcast::v1::AuthReq)},
  { 8, -1, sizeof(::bilibili::broadcast::v1::AuthResp)},
  { 13, -1, sizeof(::bilibili::broadcast::v1::HeartbeatReq)},
  { 18, -1, sizeof(::bilibili::broadcast::v1::HeartbeatResp)},
  { 23, -1, sizeof(::bilibili::broadcast::v1::TargetPath)},
  { 29, -1, sizeof(::bilibili::broadcast::v1::MessageAckReq)},
  { 37, -1, sizeof(::bilibili::broadcast::v1::FrameOption)},
  { 48, -1, sizeof(::bilibili::broadcast::v1::BroadcastFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::v1::_AuthReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::v1::_AuthResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::v1::_HeartbeatReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::v1::_HeartbeatResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::v1::_TargetPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::v1::_MessageAckReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::v1::_FrameOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::v1::_BroadcastFrame_default_instance_),
};

const char descriptor_table_protodef_broadcast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017broadcast.proto\022\025bilibili.broadcast.v1"
  "\032\014status.proto\032\031google/protobuf/any.prot"
  "o\032\033google/protobuf/empty.proto\032\ngogo.pro"
  "to\"=\n\007AuthReq\022\014\n\004guid\030\001 \001(\t\022\017\n\007conn_id\030\002"
  " \001(\t\022\023\n\013last_msg_id\030\003 \001(\003\"\n\n\010AuthResp\"\016\n"
  "\014HeartbeatReq\"\017\n\rHeartbeatResp\"\"\n\nTarget"
  "Path\022\024\n\014target_paths\030\001 \003(\t\"H\n\rMessageAck"
  "Req\022\016\n\006ack_id\030\001 \001(\003\022\022\n\nack_origin\030\002 \001(\t\022"
  "\023\n\013target_path\030\003 \001(\t\"\220\001\n\013FrameOption\022\022\n\n"
  "message_id\030\001 \001(\003\022\020\n\010sequence\030\002 \001(\003\022\016\n\006is"
  "_ack\030\003 \001(\010\022$\n\006status\030\004 \001(\0132\024.bilibili.rp"
  "c.Status\022\022\n\nack_origin\030\005 \001(\t\022\021\n\ttimestam"
  "p\030\006 \001(\003\"~\n\016BroadcastFrame\0223\n\007options\030\001 \001"
  "(\0132\".bilibili.broadcast.v1.FrameOption\022\023"
  "\n\013target_path\030\002 \001(\t\022\"\n\004body\030\003 \001(\0132\024.goog"
  "le.protobuf.Any2s\n\017BroadcastTunnel\022`\n\014Cr"
  "eateTunnel\022%.bilibili.broadcast.v1.Broad"
  "castFrame\032%.bilibili.broadcast.v1.Broadc"
  "astFrame(\0010\0012\212\003\n\tBroadcast\022G\n\004Auth\022\036.bil"
  "ibili.broadcast.v1.AuthReq\032\037.bilibili.br"
  "oadcast.v1.AuthResp\022V\n\tHeartbeat\022#.bilib"
  "ili.broadcast.v1.HeartbeatReq\032$.bilibili"
  ".broadcast.v1.HeartbeatResp\022F\n\tSubscribe"
  "\022!.bilibili.broadcast.v1.TargetPath\032\026.go"
  "ogle.protobuf.Empty\022H\n\013Unsubscribe\022!.bil"
  "ibili.broadcast.v1.TargetPath\032\026.google.p"
  "rotobuf.Empty\022J\n\nMessageAck\022$.bilibili.b"
  "roadcast.v1.MessageAckReq\032\026.google.proto"
  "buf.EmptyBz\n\037com.bapis.bilibili.broadcas"
  "t.v1P\001Z7git.bilibili.co/bapis/bapis-go/b"
  "ilibili/broadcast/v1;v1\242\002\017BAPIBroadcastV"
  "1\340\342\036\000\310\342\036\000\320\342\036\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_broadcast_2eproto_deps[4] = {
  &::descriptor_table_gogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_status_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_broadcast_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_broadcast_2eproto = {
  false, false, 1261, descriptor_table_protodef_broadcast_2eproto, "broadcast.proto", 
  &descriptor_table_broadcast_2eproto_once, descriptor_table_broadcast_2eproto_deps, 4, 8,
  schemas, file_default_instances, TableStruct_broadcast_2eproto::offsets,
  file_level_metadata_broadcast_2eproto, file_level_enum_descriptors_broadcast_2eproto, file_level_service_descriptors_broadcast_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_broadcast_2eproto_getter() {
  return &descriptor_table_broadcast_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_broadcast_2eproto(&descriptor_table_broadcast_2eproto);
namespace bilibili {
namespace broadcast {
namespace v1 {

// ===================================================================

class AuthReq::_Internal {
 public:
};

AuthReq::AuthReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.v1.AuthReq)
}
AuthReq::AuthReq(const AuthReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guid().empty()) {
    guid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_guid(), 
      GetArenaForAllocation());
  }
  conn_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_conn_id().empty()) {
    conn_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_conn_id(), 
      GetArenaForAllocation());
  }
  last_msg_id_ = from.last_msg_id_;
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.v1.AuthReq)
}

inline void AuthReq::SharedCtor() {
guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
conn_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_msg_id_ = int64_t{0};
}

AuthReq::~AuthReq() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.v1.AuthReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conn_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthReq::ArenaDtor(void* object) {
  AuthReq* _this = reinterpret_cast< AuthReq* >(object);
  (void)_this;
}
void AuthReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.v1.AuthReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guid_.ClearToEmpty();
  conn_id_.ClearToEmpty();
  last_msg_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.v1.AuthReq.guid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string conn_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_conn_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.v1.AuthReq.conn_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_msg_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.v1.AuthReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string guid = 1;
  if (!this->_internal_guid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.v1.AuthReq.guid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  // string conn_id = 2;
  if (!this->_internal_conn_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_conn_id().data(), static_cast<int>(this->_internal_conn_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.v1.AuthReq.conn_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_conn_id(), target);
  }

  // int64 last_msg_id = 3;
  if (this->_internal_last_msg_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_msg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.v1.AuthReq)
  return target;
}

size_t AuthReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.v1.AuthReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string guid = 1;
  if (!this->_internal_guid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  // string conn_id = 2;
  if (!this->_internal_conn_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_conn_id());
  }

  // int64 last_msg_id = 3;
  if (this->_internal_last_msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthReq::GetClassData() const { return &_class_data_; }

void AuthReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AuthReq *>(to)->MergeFrom(
      static_cast<const AuthReq &>(from));
}


void AuthReq::MergeFrom(const AuthReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.v1.AuthReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_guid().empty()) {
    _internal_set_guid(from._internal_guid());
  }
  if (!from._internal_conn_id().empty()) {
    _internal_set_conn_id(from._internal_conn_id());
  }
  if (from._internal_last_msg_id() != 0) {
    _internal_set_last_msg_id(from._internal_last_msg_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthReq::CopyFrom(const AuthReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.v1.AuthReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthReq::IsInitialized() const {
  return true;
}

void AuthReq::InternalSwap(AuthReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &guid_, GetArenaForAllocation(),
      &other->guid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &conn_id_, GetArenaForAllocation(),
      &other->conn_id_, other->GetArenaForAllocation()
  );
  swap(last_msg_id_, other->last_msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[0]);
}

// ===================================================================

class AuthResp::_Internal {
 public:
};

AuthResp::AuthResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.v1.AuthResp)
}
AuthResp::AuthResp(const AuthResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.v1.AuthResp)
}

inline void AuthResp::SharedCtor() {
}

AuthResp::~AuthResp() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.v1.AuthResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AuthResp::ArenaDtor(void* object) {
  AuthResp* _this = reinterpret_cast< AuthResp* >(object);
  (void)_this;
}
void AuthResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.v1.AuthResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.v1.AuthResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.v1.AuthResp)
  return target;
}

size_t AuthResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.v1.AuthResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthResp::GetClassData() const { return &_class_data_; }

void AuthResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AuthResp *>(to)->MergeFrom(
      static_cast<const AuthResp &>(from));
}


void AuthResp::MergeFrom(const AuthResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.v1.AuthResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthResp::CopyFrom(const AuthResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.v1.AuthResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResp::IsInitialized() const {
  return true;
}

void AuthResp::InternalSwap(AuthResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[1]);
}

// ===================================================================

class HeartbeatReq::_Internal {
 public:
};

HeartbeatReq::HeartbeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.v1.HeartbeatReq)
}
HeartbeatReq::HeartbeatReq(const HeartbeatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.v1.HeartbeatReq)
}

inline void HeartbeatReq::SharedCtor() {
}

HeartbeatReq::~HeartbeatReq() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.v1.HeartbeatReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeartbeatReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartbeatReq::ArenaDtor(void* object) {
  HeartbeatReq* _this = reinterpret_cast< HeartbeatReq* >(object);
  (void)_this;
}
void HeartbeatReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartbeatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.v1.HeartbeatReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.v1.HeartbeatReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.v1.HeartbeatReq)
  return target;
}

size_t HeartbeatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.v1.HeartbeatReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeartbeatReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatReq::GetClassData() const { return &_class_data_; }

void HeartbeatReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeartbeatReq *>(to)->MergeFrom(
      static_cast<const HeartbeatReq &>(from));
}


void HeartbeatReq::MergeFrom(const HeartbeatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.v1.HeartbeatReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatReq::CopyFrom(const HeartbeatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.v1.HeartbeatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatReq::IsInitialized() const {
  return true;
}

void HeartbeatReq::InternalSwap(HeartbeatReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[2]);
}

// ===================================================================

class HeartbeatResp::_Internal {
 public:
};

HeartbeatResp::HeartbeatResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.v1.HeartbeatResp)
}
HeartbeatResp::HeartbeatResp(const HeartbeatResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.v1.HeartbeatResp)
}

inline void HeartbeatResp::SharedCtor() {
}

HeartbeatResp::~HeartbeatResp() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.v1.HeartbeatResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeartbeatResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartbeatResp::ArenaDtor(void* object) {
  HeartbeatResp* _this = reinterpret_cast< HeartbeatResp* >(object);
  (void)_this;
}
void HeartbeatResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartbeatResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartbeatResp::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.v1.HeartbeatResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.v1.HeartbeatResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.v1.HeartbeatResp)
  return target;
}

size_t HeartbeatResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.v1.HeartbeatResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeartbeatResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatResp::GetClassData() const { return &_class_data_; }

void HeartbeatResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HeartbeatResp *>(to)->MergeFrom(
      static_cast<const HeartbeatResp &>(from));
}


void HeartbeatResp::MergeFrom(const HeartbeatResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.v1.HeartbeatResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatResp::CopyFrom(const HeartbeatResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.v1.HeartbeatResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResp::IsInitialized() const {
  return true;
}

void HeartbeatResp::InternalSwap(HeartbeatResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[3]);
}

// ===================================================================

class TargetPath::_Internal {
 public:
};

TargetPath::TargetPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  target_paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.v1.TargetPath)
}
TargetPath::TargetPath(const TargetPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      target_paths_(from.target_paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.v1.TargetPath)
}

inline void TargetPath::SharedCtor() {
}

TargetPath::~TargetPath() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.v1.TargetPath)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TargetPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TargetPath::ArenaDtor(void* object) {
  TargetPath* _this = reinterpret_cast< TargetPath* >(object);
  (void)_this;
}
void TargetPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetPath::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.v1.TargetPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string target_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.v1.TargetPath.target_paths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.v1.TargetPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string target_paths = 1;
  for (int i = 0, n = this->_internal_target_paths_size(); i < n; i++) {
    const auto& s = this->_internal_target_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.v1.TargetPath.target_paths");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.v1.TargetPath)
  return target;
}

size_t TargetPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.v1.TargetPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string target_paths = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_paths_.size());
  for (int i = 0, n = target_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_paths_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetPath::GetClassData() const { return &_class_data_; }

void TargetPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TargetPath *>(to)->MergeFrom(
      static_cast<const TargetPath &>(from));
}


void TargetPath::MergeFrom(const TargetPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.v1.TargetPath)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_paths_.MergeFrom(from.target_paths_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetPath::CopyFrom(const TargetPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.v1.TargetPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetPath::IsInitialized() const {
  return true;
}

void TargetPath::InternalSwap(TargetPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  target_paths_.InternalSwap(&other->target_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetPath::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[4]);
}

// ===================================================================

class MessageAckReq::_Internal {
 public:
};

MessageAckReq::MessageAckReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.v1.MessageAckReq)
}
MessageAckReq::MessageAckReq(const MessageAckReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ack_origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ack_origin().empty()) {
    ack_origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ack_origin(), 
      GetArenaForAllocation());
  }
  target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_path().empty()) {
    target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_path(), 
      GetArenaForAllocation());
  }
  ack_id_ = from.ack_id_;
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.v1.MessageAckReq)
}

inline void MessageAckReq::SharedCtor() {
ack_origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ack_id_ = int64_t{0};
}

MessageAckReq::~MessageAckReq() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.v1.MessageAckReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageAckReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ack_origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageAckReq::ArenaDtor(void* object) {
  MessageAckReq* _this = reinterpret_cast< MessageAckReq* >(object);
  (void)_this;
}
void MessageAckReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageAckReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageAckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.v1.MessageAckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_origin_.ClearToEmpty();
  target_path_.ClearToEmpty();
  ack_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageAckReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ack_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ack_origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ack_origin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.v1.MessageAckReq.ack_origin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.v1.MessageAckReq.target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageAckReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.v1.MessageAckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ack_id = 1;
  if (this->_internal_ack_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ack_id(), target);
  }

  // string ack_origin = 2;
  if (!this->_internal_ack_origin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ack_origin().data(), static_cast<int>(this->_internal_ack_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.v1.MessageAckReq.ack_origin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ack_origin(), target);
  }

  // string target_path = 3;
  if (!this->_internal_target_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_path().data(), static_cast<int>(this->_internal_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.v1.MessageAckReq.target_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.v1.MessageAckReq)
  return target;
}

size_t MessageAckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.v1.MessageAckReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ack_origin = 2;
  if (!this->_internal_ack_origin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ack_origin());
  }

  // string target_path = 3;
  if (!this->_internal_target_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_path());
  }

  // int64 ack_id = 1;
  if (this->_internal_ack_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ack_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageAckReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageAckReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageAckReq::GetClassData() const { return &_class_data_; }

void MessageAckReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MessageAckReq *>(to)->MergeFrom(
      static_cast<const MessageAckReq &>(from));
}


void MessageAckReq::MergeFrom(const MessageAckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.v1.MessageAckReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ack_origin().empty()) {
    _internal_set_ack_origin(from._internal_ack_origin());
  }
  if (!from._internal_target_path().empty()) {
    _internal_set_target_path(from._internal_target_path());
  }
  if (from._internal_ack_id() != 0) {
    _internal_set_ack_id(from._internal_ack_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageAckReq::CopyFrom(const MessageAckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.v1.MessageAckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAckReq::IsInitialized() const {
  return true;
}

void MessageAckReq::InternalSwap(MessageAckReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ack_origin_, GetArenaForAllocation(),
      &other->ack_origin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_path_, GetArenaForAllocation(),
      &other->target_path_, other->GetArenaForAllocation()
  );
  swap(ack_id_, other->ack_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAckReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[5]);
}

// ===================================================================

class FrameOption::_Internal {
 public:
  static const ::bilibili::rpc::Status& status(const FrameOption* msg);
};

const ::bilibili::rpc::Status&
FrameOption::_Internal::status(const FrameOption* msg) {
  return *msg->status_;
}
void FrameOption::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
FrameOption::FrameOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.v1.FrameOption)
}
FrameOption::FrameOption(const FrameOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ack_origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ack_origin().empty()) {
    ack_origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ack_origin(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_status()) {
    status_ = new ::bilibili::rpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ack_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(is_ack_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.v1.FrameOption)
}

inline void FrameOption::SharedCtor() {
ack_origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_ack_) -
    reinterpret_cast<char*>(&status_)) + sizeof(is_ack_));
}

FrameOption::~FrameOption() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.v1.FrameOption)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FrameOption::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ack_origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void FrameOption::ArenaDtor(void* object) {
  FrameOption* _this = reinterpret_cast< FrameOption* >(object);
  (void)_this;
}
void FrameOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrameOption::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.v1.FrameOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_origin_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ack_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(is_ack_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_ack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.rpc.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ack_origin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ack_origin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.v1.FrameOption.ack_origin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.v1.FrameOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 message_id = 1;
  if (this->_internal_message_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_message_id(), target);
  }

  // int64 sequence = 2;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_sequence(), target);
  }

  // bool is_ack = 3;
  if (this->_internal_is_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_ack(), target);
  }

  // .bilibili.rpc.Status status = 4;
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  // string ack_origin = 5;
  if (!this->_internal_ack_origin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ack_origin().data(), static_cast<int>(this->_internal_ack_origin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.v1.FrameOption.ack_origin");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ack_origin(), target);
  }

  // int64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.v1.FrameOption)
  return target;
}

size_t FrameOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.v1.FrameOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ack_origin = 5;
  if (!this->_internal_ack_origin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ack_origin());
  }

  // .bilibili.rpc.Status status = 4;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int64 message_id = 1;
  if (this->_internal_message_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_message_id());
  }

  // int64 sequence = 2;
  if (this->_internal_sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // int64 timestamp = 6;
  if (this->_internal_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // bool is_ack = 3;
  if (this->_internal_is_ack() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrameOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameOption::GetClassData() const { return &_class_data_; }

void FrameOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FrameOption *>(to)->MergeFrom(
      static_cast<const FrameOption &>(from));
}


void FrameOption::MergeFrom(const FrameOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.v1.FrameOption)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ack_origin().empty()) {
    _internal_set_ack_origin(from._internal_ack_origin());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::bilibili::rpc::Status::MergeFrom(from._internal_status());
  }
  if (from._internal_message_id() != 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_is_ack() != 0) {
    _internal_set_is_ack(from._internal_is_ack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameOption::CopyFrom(const FrameOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.v1.FrameOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameOption::IsInitialized() const {
  return true;
}

void FrameOption::InternalSwap(FrameOption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ack_origin_, GetArenaForAllocation(),
      &other->ack_origin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameOption, is_ack_)
      + sizeof(FrameOption::is_ack_)
      - PROTOBUF_FIELD_OFFSET(FrameOption, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameOption::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[6]);
}

// ===================================================================

class BroadcastFrame::_Internal {
 public:
  static const ::bilibili::broadcast::v1::FrameOption& options(const BroadcastFrame* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& body(const BroadcastFrame* msg);
};

const ::bilibili::broadcast::v1::FrameOption&
BroadcastFrame::_Internal::options(const BroadcastFrame* msg) {
  return *msg->options_;
}
const PROTOBUF_NAMESPACE_ID::Any&
BroadcastFrame::_Internal::body(const BroadcastFrame* msg) {
  return *msg->body_;
}
void BroadcastFrame::clear_body() {
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
BroadcastFrame::BroadcastFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.v1.BroadcastFrame)
}
BroadcastFrame::BroadcastFrame(const BroadcastFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_path().empty()) {
    target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    options_ = new ::bilibili::broadcast::v1::FrameOption(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new PROTOBUF_NAMESPACE_ID::Any(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.v1.BroadcastFrame)
}

inline void BroadcastFrame::SharedCtor() {
target_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_) -
    reinterpret_cast<char*>(&options_)) + sizeof(body_));
}

BroadcastFrame::~BroadcastFrame() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.v1.BroadcastFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BroadcastFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete body_;
}

void BroadcastFrame::ArenaDtor(void* object) {
  BroadcastFrame* _this = reinterpret_cast< BroadcastFrame* >(object);
  (void)_this;
}
void BroadcastFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BroadcastFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BroadcastFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.v1.BroadcastFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bilibili.broadcast.v1.FrameOption options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_target_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.v1.BroadcastFrame.target_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BroadcastFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.v1.BroadcastFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bilibili.broadcast.v1.FrameOption options = 1;
  if (this->_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::options(this), target, stream);
  }

  // string target_path = 2;
  if (!this->_internal_target_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_path().data(), static_cast<int>(this->_internal_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.v1.BroadcastFrame.target_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_path(), target);
  }

  // .google.protobuf.Any body = 3;
  if (this->_internal_has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.v1.BroadcastFrame)
  return target;
}

size_t BroadcastFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.v1.BroadcastFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_path = 2;
  if (!this->_internal_target_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_path());
  }

  // .bilibili.broadcast.v1.FrameOption options = 1;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // .google.protobuf.Any body = 3;
  if (this->_internal_has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BroadcastFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastFrame::GetClassData() const { return &_class_data_; }

void BroadcastFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BroadcastFrame *>(to)->MergeFrom(
      static_cast<const BroadcastFrame &>(from));
}


void BroadcastFrame::MergeFrom(const BroadcastFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.v1.BroadcastFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_path().empty()) {
    _internal_set_target_path(from._internal_target_path());
  }
  if (from._internal_has_options()) {
    _internal_mutable_options()->::bilibili::broadcast::v1::FrameOption::MergeFrom(from._internal_options());
  }
  if (from._internal_has_body()) {
    _internal_mutable_body()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastFrame::CopyFrom(const BroadcastFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.v1.BroadcastFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastFrame::IsInitialized() const {
  return true;
}

void BroadcastFrame::InternalSwap(BroadcastFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_path_, GetArenaForAllocation(),
      &other->target_path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastFrame, body_)
      + sizeof(BroadcastFrame::body_)
      - PROTOBUF_FIELD_OFFSET(BroadcastFrame, options_)>(
          reinterpret_cast<char*>(&options_),
          reinterpret_cast<char*>(&other->options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_broadcast_2eproto_getter, &descriptor_table_broadcast_2eproto_once,
      file_level_metadata_broadcast_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace broadcast
}  // namespace bilibili
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::v1::AuthReq* Arena::CreateMaybeMessage< ::bilibili::broadcast::v1::AuthReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::v1::AuthReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::v1::AuthResp* Arena::CreateMaybeMessage< ::bilibili::broadcast::v1::AuthResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::v1::AuthResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::v1::HeartbeatReq* Arena::CreateMaybeMessage< ::bilibili::broadcast::v1::HeartbeatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::v1::HeartbeatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::v1::HeartbeatResp* Arena::CreateMaybeMessage< ::bilibili::broadcast::v1::HeartbeatResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::v1::HeartbeatResp >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::v1::TargetPath* Arena::CreateMaybeMessage< ::bilibili::broadcast::v1::TargetPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::v1::TargetPath >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::v1::MessageAckReq* Arena::CreateMaybeMessage< ::bilibili::broadcast::v1::MessageAckReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::v1::MessageAckReq >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::v1::FrameOption* Arena::CreateMaybeMessage< ::bilibili::broadcast::v1::FrameOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::v1::FrameOption >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::v1::BroadcastFrame* Arena::CreateMaybeMessage< ::bilibili::broadcast::v1::BroadcastFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::v1::BroadcastFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
