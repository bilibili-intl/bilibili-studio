// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DMData.proto

#include "DMData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace bilibili {
namespace broadcast {
namespace message {
namespace intl {
constexpr DmItem::DmItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : messagelist_()
  , combos_()
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , live_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_(nullptr)
  , replyto_(nullptr)
  , style_(nullptr)
  , sticker_(nullptr)
  , topuser_(nullptr)
  , popup_info_(nullptr)
  , block_info_(nullptr)
  , roomid_(int64_t{0})
  , delay_(int64_t{0})
  , ctime_(int64_t{0})
  , cmd_(0)
{}
struct DmItemDefaultTypeInternal {
  constexpr DmItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DmItemDefaultTypeInternal() {}
  union {
    DmItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DmItemDefaultTypeInternal _DmItem_default_instance_;
constexpr MessageItem::MessageItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iconname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iconurl_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bgcolor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , bold_(false)
  , width_(0)
  , height_(0)
  , treasure_id_(int64_t{0})
  , subtype_(0)
{}
struct MessageItemDefaultTypeInternal {
  constexpr MessageItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageItemDefaultTypeInternal() {}
  union {
    MessageItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageItemDefaultTypeInternal _MessageItem_default_instance_;
constexpr Combo::Combo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , combo_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_(nullptr)
  , treasure_(nullptr)
  , style_(nullptr){}
struct ComboDefaultTypeInternal {
  constexpr ComboDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComboDefaultTypeInternal() {}
  union {
    Combo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComboDefaultTypeInternal _Combo_default_instance_;
constexpr Treasure::Treasure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , animation_(nullptr)
  , id_(int64_t{0})
  , number_(int64_t{0})
  , stars_(int64_t{0})
  , animation_type_(int64_t{0}){}
struct TreasureDefaultTypeInternal {
  constexpr TreasureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TreasureDefaultTypeInternal() {}
  union {
    Treasure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TreasureDefaultTypeInternal _Treasure_default_instance_;
constexpr Animation::Animation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resource_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , animation_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(int64_t{0})
  , height_(int64_t{0}){}
struct AnimationDefaultTypeInternal {
  constexpr AnimationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnimationDefaultTypeInternal() {}
  union {
    Animation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnimationDefaultTypeInternal _Animation_default_instance_;
constexpr ComboStyle::ComboStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bg_color_start_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bg_color_end_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gift_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bg_color_center_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gift_num_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_(int64_t{0})
  , period_(int64_t{0})
  , gift_num_size_(0){}
struct ComboStyleDefaultTypeInternal {
  constexpr ComboStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComboStyleDefaultTypeInternal() {}
  union {
    ComboStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComboStyleDefaultTypeInternal _ComboStyle_default_instance_;
constexpr Author::Author(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mid_(int64_t{0})
  , rank_(0){}
struct AuthorDefaultTypeInternal {
  constexpr AuthorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthorDefaultTypeInternal() {}
  union {
    Author _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthorDefaultTypeInternal _Author_default_instance_;
constexpr DmEventReply::DmEventReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct DmEventReplyDefaultTypeInternal {
  constexpr DmEventReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DmEventReplyDefaultTypeInternal() {}
  union {
    DmEventReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DmEventReplyDefaultTypeInternal _DmEventReply_default_instance_;
constexpr Style::Style(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : namecolor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contentcolor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bgcolor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bold_(false){}
struct StyleDefaultTypeInternal {
  constexpr StyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StyleDefaultTypeInternal() {}
  union {
    Style _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StyleDefaultTypeInternal _Style_default_instance_;
constexpr Sticker::Sticker(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , number_(int64_t{0}){}
struct StickerDefaultTypeInternal {
  constexpr StickerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StickerDefaultTypeInternal() {}
  union {
    Sticker _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StickerDefaultTypeInternal _Sticker_default_instance_;
constexpr TopUser::TopUser(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : users_()
  , paidusernum_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TopUserDefaultTypeInternal {
  constexpr TopUserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TopUserDefaultTypeInternal() {}
  union {
    TopUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TopUserDefaultTypeInternal _TopUser_default_instance_;
constexpr User::User(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , face_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mid_(int64_t{0})
  , score_(int64_t{0}){}
struct UserDefaultTypeInternal {
  constexpr UserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserDefaultTypeInternal _User_default_instance_;
constexpr PopupInfo::PopupInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : popup_info_list_()
  , duration_(int64_t{0}){}
struct PopupInfoDefaultTypeInternal {
  constexpr PopupInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PopupInfoDefaultTypeInternal() {}
  union {
    PopupInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PopupInfoDefaultTypeInternal _PopupInfo_default_instance_;
constexpr PopupInfoItem::PopupInfoItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , icon_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bg_color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , positon_(0)

  , width_(int64_t{0})
  , height_(int64_t{0})
  , bold_(false){}
struct PopupInfoItemDefaultTypeInternal {
  constexpr PopupInfoItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PopupInfoItemDefaultTypeInternal() {}
  union {
    PopupInfoItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PopupInfoItemDefaultTypeInternal _PopupInfoItem_default_instance_;
constexpr BlockInfo::BlockInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notice_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , end_time_(int64_t{0}){}
struct BlockInfoDefaultTypeInternal {
  constexpr BlockInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockInfoDefaultTypeInternal() {}
  union {
    BlockInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockInfoDefaultTypeInternal _BlockInfo_default_instance_;
}  // namespace intl
}  // namespace message
}  // namespace broadcast
}  // namespace bilibili
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DMData_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_DMData_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DMData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DMData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, cmd_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, message_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, author_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, roomid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, delay_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, ctime_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, replyto_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, style_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, sticker_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, topuser_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, messagelist_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, combos_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, msg_id_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, live_key_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, popup_info_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmItem, block_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, type_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, content_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, color_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, bold_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, iconname_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, iconurl_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, width_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, height_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, bgcolor_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, subtype_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::MessageItem, treasure_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Combo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Combo, author_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Combo, action_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Combo, treasure_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Combo, style_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Combo, combo_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Treasure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Treasure, id_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Treasure, title_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Treasure, icon_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Treasure, number_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Treasure, stars_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Treasure, animation_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Treasure, animation_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Animation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Animation, resource_name_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Animation, file_name_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Animation, animation_url_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Animation, width_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Animation, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, bg_color_start_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, bg_color_end_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, gift_color_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, name_color_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, gift_num_size_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, duration_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, period_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, bg_color_center_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::ComboStyle, gift_num_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Author, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Author, mid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Author, name_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Author, rank_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Author, avatar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmEventReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::DmEventReply, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Style, namecolor_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Style, contentcolor_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Style, bgcolor_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Style, bold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Sticker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Sticker, id_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Sticker, title_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Sticker, icon_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::Sticker, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::TopUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::TopUser, paidusernum_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::TopUser, users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::User, mid_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::User, name_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::User, face_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::User, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfo, popup_info_list_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfo, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, type_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, positon_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, content_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, color_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, bold_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, icon_name_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, icon_url_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, width_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, height_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::PopupInfoItem, bg_color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::BlockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::BlockInfo, notice_),
  PROTOBUF_FIELD_OFFSET(::bilibili::broadcast::message::intl::BlockInfo, end_time_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bilibili::broadcast::message::intl::DmItem)},
  { 21, -1, sizeof(::bilibili::broadcast::message::intl::MessageItem)},
  { 37, -1, sizeof(::bilibili::broadcast::message::intl::Combo)},
  { 47, -1, sizeof(::bilibili::broadcast::message::intl::Treasure)},
  { 59, -1, sizeof(::bilibili::broadcast::message::intl::Animation)},
  { 69, -1, sizeof(::bilibili::broadcast::message::intl::ComboStyle)},
  { 83, -1, sizeof(::bilibili::broadcast::message::intl::Author)},
  { 92, -1, sizeof(::bilibili::broadcast::message::intl::DmEventReply)},
  { 98, -1, sizeof(::bilibili::broadcast::message::intl::Style)},
  { 107, -1, sizeof(::bilibili::broadcast::message::intl::Sticker)},
  { 116, -1, sizeof(::bilibili::broadcast::message::intl::TopUser)},
  { 123, -1, sizeof(::bilibili::broadcast::message::intl::User)},
  { 132, -1, sizeof(::bilibili::broadcast::message::intl::PopupInfo)},
  { 139, -1, sizeof(::bilibili::broadcast::message::intl::PopupInfoItem)},
  { 154, -1, sizeof(::bilibili::broadcast::message::intl::BlockInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_DmItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_MessageItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_Combo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_Treasure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_Animation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_ComboStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_Author_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_DmEventReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_Style_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_Sticker_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_TopUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_PopupInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_PopupInfoItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bilibili::broadcast::message::intl::_BlockInfo_default_instance_),
};

const char descriptor_table_protodef_DMData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014DMData.proto\022\037bilibili.broadcast.messa"
  "ge.intl\032\033google/protobuf/empty.proto\"\302\005\n"
  "\006DmItem\0224\n\003Cmd\030\001 \001(\0162\'.bilibili.broadcas"
  "t.message.intl.DmType\022\017\n\007Message\030\002 \001(\t\0227"
  "\n\006Author\030\003 \001(\0132\'.bilibili.broadcast.mess"
  "age.intl.Author\022\016\n\006RoomID\030\004 \001(\003\022\r\n\005Delay"
  "\030\005 \001(\003\022\r\n\005CTime\030\006 \001(\003\0228\n\007ReplyTo\030\007 \001(\0132\'"
  ".bilibili.broadcast.message.intl.Author\022"
  "5\n\005Style\030\010 \001(\0132&.bilibili.broadcast.mess"
  "age.intl.Style\0229\n\007Sticker\030\t \001(\0132(.bilibi"
  "li.broadcast.message.intl.Sticker\0229\n\007Top"
  "User\030\n \001(\0132(.bilibili.broadcast.message."
  "intl.TopUser\022A\n\013MessageList\030\013 \003(\0132,.bili"
  "bili.broadcast.message.intl.MessageItem\022"
  ">\n\006Combos\030\014 \003(\0132&.bilibili.broadcast.mes"
  "sage.intl.ComboR\006combos\022\016\n\006msg_id\030\r \001(\t\022"
  "\020\n\010live_key\030\016 \001(\t\022>\n\npopup_info\030\017 \001(\0132*."
  "bilibili.broadcast.message.intl.PopupInf"
  "o\022>\n\nblock_info\030\020 \001(\0132*.bilibili.broadca"
  "st.message.intl.BlockInfo\"\251\002\n\013MessageIte"
  "m\022>\n\004Type\030\001 \001(\01620.bilibili.broadcast.mes"
  "sage.intl.MessageItemType\022\017\n\007Content\030\002 \001"
  "(\t\022\r\n\005Color\030\003 \001(\t\022\014\n\004Bold\030\004 \001(\010\022\020\n\010IconN"
  "ame\030\005 \001(\t\022\017\n\007IconUrl\030\006 \001(\t\022\r\n\005Width\030\007 \001("
  "\005\022\016\n\006Height\030\010 \001(\005\022\017\n\007BgColor\030\t \001(\t\022D\n\007Su"
  "bType\030\n \001(\01623.bilibili.broadcast.message"
  ".intl.MessageItemSubType\022\023\n\013treasure_id\030"
  "\013 \001(\003\"\206\002\n\005Combo\022\?\n\006author\030\001 \001(\0132\'.bilibi"
  "li.broadcast.message.intl.AuthorR\006author"
  "\022\026\n\006action\030\002 \001(\tR\006action\022E\n\010treasure\030\003 \001"
  "(\0132).bilibili.broadcast.message.intl.Tre"
  "asureR\010treasure\022A\n\005style\030\004 \001(\0132+.bilibil"
  "i.broadcast.message.intl.ComboStyleR\005sty"
  "le\022\032\n\010combo_id\030\005 \001(\tR\010combo_id\"\344\001\n\010Treas"
  "ure\022\016\n\002id\030\001 \001(\003R\002id\022\024\n\005title\030\002 \001(\tR\005titl"
  "e\022\022\n\004icon\030\003 \001(\tR\004icon\022\026\n\006number\030\004 \001(\003R\006n"
  "umber\022\024\n\005stars\030\005 \001(\003R\005stars\022H\n\tanimation"
  "\030\006 \001(\0132*.bilibili.broadcast.message.intl"
  ".AnimationR\tanimation\022&\n\016animation_type\030"
  "\007 \001(\003R\016animation_type\"\243\001\n\tAnimation\022$\n\rr"
  "esource_name\030\001 \001(\tR\rresource_name\022\034\n\tfil"
  "e_name\030\002 \001(\tR\tfile_name\022$\n\ranimation_url"
  "\030\003 \001(\tR\ranimation_url\022\024\n\005width\030\004 \001(\003R\005wi"
  "dth\022\026\n\006height\030\005 \001(\003R\006height\"\304\002\n\nComboSty"
  "le\022&\n\016bg_color_start\030\001 \001(\tR\016bg_color_sta"
  "rt\022\"\n\014bg_color_end\030\002 \001(\tR\014bg_color_end\022\036"
  "\n\ngift_color\030\003 \001(\tR\ngift_color\022\036\n\nname_c"
  "olor\030\004 \001(\tR\nname_color\022$\n\rgift_num_size\030"
  "\005 \001(\005R\rgift_num_size\022\032\n\010duration\030\006 \001(\003R\010"
  "duration\022\026\n\006period\030\007 \001(\003R\006period\022(\n\017bg_c"
  "olor_center\030\010 \001(\tR\017bg_color_center\022&\n\016gi"
  "ft_num_color\030\t \001(\tR\016gift_num_color\"Z\n\006Au"
  "thor\022\020\n\003mid\030\001 \001(\003R\003mid\022\022\n\004name\030\002 \001(\tR\004na"
  "me\022\022\n\004rank\030\003 \001(\005R\004rank\022\026\n\006avatar\030\004 \001(\tR\006"
  "avatar\"F\n\014DmEventReply\0226\n\005Items\030\001 \003(\0132\'."
  "bilibili.broadcast.message.intl.DmItem\"O"
  "\n\005Style\022\021\n\tNameColor\030\001 \001(\t\022\024\n\014ContentCol"
  "or\030\002 \001(\t\022\017\n\007BgColor\030\003 \001(\t\022\014\n\004Bold\030\004 \001(\010\""
  "B\n\007Sticker\022\n\n\002ID\030\001 \001(\003\022\r\n\005Title\030\002 \001(\t\022\014\n"
  "\004Icon\030\003 \001(\t\022\016\n\006Number\030\004 \001(\003\"T\n\007TopUser\022\023"
  "\n\013PaidUserNum\030\001 \001(\t\0224\n\005Users\030\002 \003(\0132%.bil"
  "ibili.broadcast.message.intl.User\">\n\004Use"
  "r\022\013\n\003Mid\030\001 \001(\003\022\014\n\004Name\030\002 \001(\t\022\014\n\004Face\030\003 \001"
  "(\t\022\r\n\005score\030\004 \001(\003\"f\n\tPopupInfo\022G\n\017popup_"
  "info_list\030\001 \003(\0132..bilibili.broadcast.mes"
  "sage.intl.PopupInfoItem\022\020\n\010duration\030\002 \001("
  "\003\"\226\002\n\rPopupInfoItem\022<\n\004type\030\001 \001(\0162..bili"
  "bili.broadcast.message.intl.PopupItemTyp"
  "e\022C\n\007positon\030\002 \001(\01622.bilibili.broadcast."
  "message.intl.PopupItemPosition\022\017\n\007conten"
  "t\030\003 \001(\t\022\r\n\005color\030\004 \001(\t\022\014\n\004bold\030\005 \001(\010\022\021\n\t"
  "icon_name\030\006 \001(\t\022\020\n\010icon_url\030\007 \001(\t\022\r\n\005wid"
  "th\030\010 \001(\003\022\016\n\006height\030\t \001(\003\022\020\n\010bg_color\030\n \001"
  "(\t\"-\n\tBlockInfo\022\016\n\006notice\030\001 \001(\t\022\020\n\010end_t"
  "ime\030\002 \001(\003*\334\001\n\006DmType\022\017\n\013DefaultType\020\000\022\r\n"
  "\tEnterRoom\020\001\022\014\n\010LiveOpen\020\002\022\r\n\tLiveClose\020"
  "\003\022\t\n\005Reply\020\004\022\023\n\017TreasureSticker\020\005\022\017\n\013Roo"
  "mTopUser\020\006\022\r\n\tActionMsg\020\007\022\014\n\010ComboMsg\020\010\022"
  "\021\n\rLiveKeyChange\020\t\022\013\n\007MuteMsg\020\n\022\013\n\007WarnM"
  "sg\020\013\022\014\n\010PopupMsg\020\014\022\014\n\010BlockMsg\020\r*2\n\017Mess"
  "ageItemType\022\013\n\007Default\020\000\022\010\n\004Text\020\001\022\010\n\004Ic"
  "on\020\002*W\n\022MessageItemSubType\022\022\n\016DefaultSub"
  "Type\020\000\022\010\n\004Name\020\001\022\010\n\004Gift\020\002\022\013\n\007GiftNum\020\003\022"
  "\014\n\010GiftIcon\020\004*W\n\rPopupItemType\022\030\n\024PopupI"
  "temTypeDefault\020\000\022\025\n\021PopupItemTypeText\020\001\022"
  "\025\n\021PopupItemTypeIcon\020\002*k\n\021PopupItemPosit"
  "ion\022\034\n\030PopupItemPositionDefault\020\000\022\032\n\026Pop"
  "upItemPositionTitle\020\001\022\034\n\030PopupItemPositi"
  "onContent\020\0022Z\n\004Live\022R\n\007DmEvent\022\026.google."
  "protobuf.Empty\032-.bilibili.broadcast.mess"
  "age.intl.DmEventReply0\001B\213\001\n)com.bapis.bi"
  "libili.broadcast.message.intlP\001ZAgit.bil"
  "ibili.co/bapis/bapis-go/bilibili/broadca"
  "st/message/intl;v1\242\002\030BAPIBroadcastMessag"
  "eIntlb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DMData_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DMData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DMData_2eproto = {
  false, false, 3773, descriptor_table_protodef_DMData_2eproto, "DMData.proto", 
  &descriptor_table_DMData_2eproto_once, descriptor_table_DMData_2eproto_deps, 1, 15,
  schemas, file_default_instances, TableStruct_DMData_2eproto::offsets,
  file_level_metadata_DMData_2eproto, file_level_enum_descriptors_DMData_2eproto, file_level_service_descriptors_DMData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_DMData_2eproto_getter() {
  return &descriptor_table_DMData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_DMData_2eproto(&descriptor_table_DMData_2eproto);
namespace bilibili {
namespace broadcast {
namespace message {
namespace intl {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DmType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DMData_2eproto);
  return file_level_enum_descriptors_DMData_2eproto[0];
}
bool DmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DMData_2eproto);
  return file_level_enum_descriptors_DMData_2eproto[1];
}
bool MessageItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageItemSubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DMData_2eproto);
  return file_level_enum_descriptors_DMData_2eproto[2];
}
bool MessageItemSubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PopupItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DMData_2eproto);
  return file_level_enum_descriptors_DMData_2eproto[3];
}
bool PopupItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PopupItemPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_DMData_2eproto);
  return file_level_enum_descriptors_DMData_2eproto[4];
}
bool PopupItemPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DmItem::_Internal {
 public:
  static const ::bilibili::broadcast::message::intl::Author& author(const DmItem* msg);
  static const ::bilibili::broadcast::message::intl::Author& replyto(const DmItem* msg);
  static const ::bilibili::broadcast::message::intl::Style& style(const DmItem* msg);
  static const ::bilibili::broadcast::message::intl::Sticker& sticker(const DmItem* msg);
  static const ::bilibili::broadcast::message::intl::TopUser& topuser(const DmItem* msg);
  static const ::bilibili::broadcast::message::intl::PopupInfo& popup_info(const DmItem* msg);
  static const ::bilibili::broadcast::message::intl::BlockInfo& block_info(const DmItem* msg);
};

const ::bilibili::broadcast::message::intl::Author&
DmItem::_Internal::author(const DmItem* msg) {
  return *msg->author_;
}
const ::bilibili::broadcast::message::intl::Author&
DmItem::_Internal::replyto(const DmItem* msg) {
  return *msg->replyto_;
}
const ::bilibili::broadcast::message::intl::Style&
DmItem::_Internal::style(const DmItem* msg) {
  return *msg->style_;
}
const ::bilibili::broadcast::message::intl::Sticker&
DmItem::_Internal::sticker(const DmItem* msg) {
  return *msg->sticker_;
}
const ::bilibili::broadcast::message::intl::TopUser&
DmItem::_Internal::topuser(const DmItem* msg) {
  return *msg->topuser_;
}
const ::bilibili::broadcast::message::intl::PopupInfo&
DmItem::_Internal::popup_info(const DmItem* msg) {
  return *msg->popup_info_;
}
const ::bilibili::broadcast::message::intl::BlockInfo&
DmItem::_Internal::block_info(const DmItem* msg) {
  return *msg->block_info_;
}
DmItem::DmItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  messagelist_(arena),
  combos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.DmItem)
}
DmItem::DmItem(const DmItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      messagelist_(from.messagelist_),
      combos_(from.combos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_id().empty()) {
    msg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_id(), 
      GetArenaForAllocation());
  }
  live_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_live_key().empty()) {
    live_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_live_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    author_ = new ::bilibili::broadcast::message::intl::Author(*from.author_);
  } else {
    author_ = nullptr;
  }
  if (from._internal_has_replyto()) {
    replyto_ = new ::bilibili::broadcast::message::intl::Author(*from.replyto_);
  } else {
    replyto_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::bilibili::broadcast::message::intl::Style(*from.style_);
  } else {
    style_ = nullptr;
  }
  if (from._internal_has_sticker()) {
    sticker_ = new ::bilibili::broadcast::message::intl::Sticker(*from.sticker_);
  } else {
    sticker_ = nullptr;
  }
  if (from._internal_has_topuser()) {
    topuser_ = new ::bilibili::broadcast::message::intl::TopUser(*from.topuser_);
  } else {
    topuser_ = nullptr;
  }
  if (from._internal_has_popup_info()) {
    popup_info_ = new ::bilibili::broadcast::message::intl::PopupInfo(*from.popup_info_);
  } else {
    popup_info_ = nullptr;
  }
  if (from._internal_has_block_info()) {
    block_info_ = new ::bilibili::broadcast::message::intl::BlockInfo(*from.block_info_);
  } else {
    block_info_ = nullptr;
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(cmd_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.DmItem)
}

inline void DmItem::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
live_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&author_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cmd_) -
    reinterpret_cast<char*>(&author_)) + sizeof(cmd_));
}

DmItem::~DmItem() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.DmItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DmItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  live_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete author_;
  if (this != internal_default_instance()) delete replyto_;
  if (this != internal_default_instance()) delete style_;
  if (this != internal_default_instance()) delete sticker_;
  if (this != internal_default_instance()) delete topuser_;
  if (this != internal_default_instance()) delete popup_info_;
  if (this != internal_default_instance()) delete block_info_;
}

void DmItem::ArenaDtor(void* object) {
  DmItem* _this = reinterpret_cast< DmItem* >(object);
  (void)_this;
}
void DmItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DmItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DmItem::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.DmItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messagelist_.Clear();
  combos_.Clear();
  message_.ClearToEmpty();
  msg_id_.ClearToEmpty();
  live_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && author_ != nullptr) {
    delete author_;
  }
  author_ = nullptr;
  if (GetArenaForAllocation() == nullptr && replyto_ != nullptr) {
    delete replyto_;
  }
  replyto_ = nullptr;
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sticker_ != nullptr) {
    delete sticker_;
  }
  sticker_ = nullptr;
  if (GetArenaForAllocation() == nullptr && topuser_ != nullptr) {
    delete topuser_;
  }
  topuser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && popup_info_ != nullptr) {
    delete popup_info_;
  }
  popup_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && block_info_ != nullptr) {
    delete block_info_;
  }
  block_info_ = nullptr;
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bilibili.broadcast.message.intl.DmType Cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd(static_cast<::bilibili::broadcast::message::intl::DmType>(val));
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.DmItem.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.Author Author = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 RoomID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 CTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.Author ReplyTo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_replyto(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.Style Style = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.Sticker Sticker = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sticker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.TopUser TopUser = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_topuser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bilibili.broadcast.message.intl.MessageItem MessageList = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messagelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bilibili.broadcast.message.intl.Combo Combos = 12 [json_name = "combos"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_combos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // string msg_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_msg_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.DmItem.msg_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string live_key = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_live_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.DmItem.live_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.PopupInfo popup_info = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_popup_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.BlockInfo block_info = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DmItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.DmItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bilibili.broadcast.message.intl.DmType Cmd = 1;
  if (this->_internal_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // string Message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.DmItem.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .bilibili.broadcast.message.intl.Author Author = 3;
  if (this->_internal_has_author()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::author(this), target, stream);
  }

  // int64 RoomID = 4;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_roomid(), target);
  }

  // int64 Delay = 5;
  if (this->_internal_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_delay(), target);
  }

  // int64 CTime = 6;
  if (this->_internal_ctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_ctime(), target);
  }

  // .bilibili.broadcast.message.intl.Author ReplyTo = 7;
  if (this->_internal_has_replyto()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::replyto(this), target, stream);
  }

  // .bilibili.broadcast.message.intl.Style Style = 8;
  if (this->_internal_has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::style(this), target, stream);
  }

  // .bilibili.broadcast.message.intl.Sticker Sticker = 9;
  if (this->_internal_has_sticker()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sticker(this), target, stream);
  }

  // .bilibili.broadcast.message.intl.TopUser TopUser = 10;
  if (this->_internal_has_topuser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::topuser(this), target, stream);
  }

  // repeated .bilibili.broadcast.message.intl.MessageItem MessageList = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messagelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_messagelist(i), target, stream);
  }

  // repeated .bilibili.broadcast.message.intl.Combo Combos = 12 [json_name = "combos"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_combos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_combos(i), target, stream);
  }

  // string msg_id = 13;
  if (!this->_internal_msg_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_id().data(), static_cast<int>(this->_internal_msg_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.DmItem.msg_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_msg_id(), target);
  }

  // string live_key = 14;
  if (!this->_internal_live_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_live_key().data(), static_cast<int>(this->_internal_live_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.DmItem.live_key");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_live_key(), target);
  }

  // .bilibili.broadcast.message.intl.PopupInfo popup_info = 15;
  if (this->_internal_has_popup_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::popup_info(this), target, stream);
  }

  // .bilibili.broadcast.message.intl.BlockInfo block_info = 16;
  if (this->_internal_has_block_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::block_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.DmItem)
  return target;
}

size_t DmItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.DmItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.broadcast.message.intl.MessageItem MessageList = 11;
  total_size += 1UL * this->_internal_messagelist_size();
  for (const auto& msg : this->messagelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bilibili.broadcast.message.intl.Combo Combos = 12 [json_name = "combos"];
  total_size += 1UL * this->_internal_combos_size();
  for (const auto& msg : this->combos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string msg_id = 13;
  if (!this->_internal_msg_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_id());
  }

  // string live_key = 14;
  if (!this->_internal_live_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_live_key());
  }

  // .bilibili.broadcast.message.intl.Author Author = 3;
  if (this->_internal_has_author()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *author_);
  }

  // .bilibili.broadcast.message.intl.Author ReplyTo = 7;
  if (this->_internal_has_replyto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replyto_);
  }

  // .bilibili.broadcast.message.intl.Style Style = 8;
  if (this->_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  // .bilibili.broadcast.message.intl.Sticker Sticker = 9;
  if (this->_internal_has_sticker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sticker_);
  }

  // .bilibili.broadcast.message.intl.TopUser TopUser = 10;
  if (this->_internal_has_topuser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topuser_);
  }

  // .bilibili.broadcast.message.intl.PopupInfo popup_info = 15;
  if (this->_internal_has_popup_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *popup_info_);
  }

  // .bilibili.broadcast.message.intl.BlockInfo block_info = 16;
  if (this->_internal_has_block_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_info_);
  }

  // int64 RoomID = 4;
  if (this->_internal_roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_roomid());
  }

  // int64 Delay = 5;
  if (this->_internal_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_delay());
  }

  // int64 CTime = 6;
  if (this->_internal_ctime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ctime());
  }

  // .bilibili.broadcast.message.intl.DmType Cmd = 1;
  if (this->_internal_cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DmItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmItem::GetClassData() const { return &_class_data_; }

void DmItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DmItem *>(to)->MergeFrom(
      static_cast<const DmItem &>(from));
}


void DmItem::MergeFrom(const DmItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.DmItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messagelist_.MergeFrom(from.messagelist_);
  combos_.MergeFrom(from.combos_);
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from._internal_msg_id().empty()) {
    _internal_set_msg_id(from._internal_msg_id());
  }
  if (!from._internal_live_key().empty()) {
    _internal_set_live_key(from._internal_live_key());
  }
  if (from._internal_has_author()) {
    _internal_mutable_author()->::bilibili::broadcast::message::intl::Author::MergeFrom(from._internal_author());
  }
  if (from._internal_has_replyto()) {
    _internal_mutable_replyto()->::bilibili::broadcast::message::intl::Author::MergeFrom(from._internal_replyto());
  }
  if (from._internal_has_style()) {
    _internal_mutable_style()->::bilibili::broadcast::message::intl::Style::MergeFrom(from._internal_style());
  }
  if (from._internal_has_sticker()) {
    _internal_mutable_sticker()->::bilibili::broadcast::message::intl::Sticker::MergeFrom(from._internal_sticker());
  }
  if (from._internal_has_topuser()) {
    _internal_mutable_topuser()->::bilibili::broadcast::message::intl::TopUser::MergeFrom(from._internal_topuser());
  }
  if (from._internal_has_popup_info()) {
    _internal_mutable_popup_info()->::bilibili::broadcast::message::intl::PopupInfo::MergeFrom(from._internal_popup_info());
  }
  if (from._internal_has_block_info()) {
    _internal_mutable_block_info()->::bilibili::broadcast::message::intl::BlockInfo::MergeFrom(from._internal_block_info());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_delay() != 0) {
    _internal_set_delay(from._internal_delay());
  }
  if (from._internal_ctime() != 0) {
    _internal_set_ctime(from._internal_ctime());
  }
  if (from._internal_cmd() != 0) {
    _internal_set_cmd(from._internal_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmItem::CopyFrom(const DmItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.DmItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmItem::IsInitialized() const {
  return true;
}

void DmItem::InternalSwap(DmItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  messagelist_.InternalSwap(&other->messagelist_);
  combos_.InternalSwap(&other->combos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_id_, GetArenaForAllocation(),
      &other->msg_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &live_key_, GetArenaForAllocation(),
      &other->live_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmItem, cmd_)
      + sizeof(DmItem::cmd_)
      - PROTOBUF_FIELD_OFFSET(DmItem, author_)>(
          reinterpret_cast<char*>(&author_),
          reinterpret_cast<char*>(&other->author_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[0]);
}

// ===================================================================

class MessageItem::_Internal {
 public:
};

MessageItem::MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.MessageItem)
}
MessageItem::MessageItem(const MessageItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  iconname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iconname().empty()) {
    iconname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iconname(), 
      GetArenaForAllocation());
  }
  iconurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iconurl().empty()) {
    iconurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iconurl(), 
      GetArenaForAllocation());
  }
  bgcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bgcolor().empty()) {
    bgcolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgcolor(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&type_)) + sizeof(subtype_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.MessageItem)
}

inline void MessageItem::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
iconname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
iconurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bgcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&type_)) + sizeof(subtype_));
}

MessageItem::~MessageItem() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.MessageItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iconname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iconurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageItem::ArenaDtor(void* object) {
  MessageItem* _this = reinterpret_cast< MessageItem* >(object);
  (void)_this;
}
void MessageItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.MessageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  color_.ClearToEmpty();
  iconname_.ClearToEmpty();
  iconurl_.ClearToEmpty();
  bgcolor_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtype_) -
      reinterpret_cast<char*>(&type_)) + sizeof(subtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bilibili.broadcast.message.intl.MessageItemType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::bilibili::broadcast::message::intl::MessageItemType>(val));
        } else goto handle_unusual;
        continue;
      // string Content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.MessageItem.Content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.MessageItem.Color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Bold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string IconName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_iconname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.MessageItem.IconName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string IconUrl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_iconurl();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.MessageItem.IconUrl"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string BgColor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_bgcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.MessageItem.BgColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.MessageItemSubType SubType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_subtype(static_cast<::bilibili::broadcast::message::intl::MessageItemSubType>(val));
        } else goto handle_unusual;
        continue;
      // int64 treasure_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          treasure_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.MessageItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bilibili.broadcast.message.intl.MessageItemType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.MessageItem.Content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // string Color = 3;
  if (!this->_internal_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.MessageItem.Color");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_color(), target);
  }

  // bool Bold = 4;
  if (this->_internal_bold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bold(), target);
  }

  // string IconName = 5;
  if (!this->_internal_iconname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iconname().data(), static_cast<int>(this->_internal_iconname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.MessageItem.IconName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_iconname(), target);
  }

  // string IconUrl = 6;
  if (!this->_internal_iconurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iconurl().data(), static_cast<int>(this->_internal_iconurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.MessageItem.IconUrl");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_iconurl(), target);
  }

  // int32 Width = 7;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_width(), target);
  }

  // int32 Height = 8;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_height(), target);
  }

  // string BgColor = 9;
  if (!this->_internal_bgcolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgcolor().data(), static_cast<int>(this->_internal_bgcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.MessageItem.BgColor");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_bgcolor(), target);
  }

  // .bilibili.broadcast.message.intl.MessageItemSubType SubType = 10;
  if (this->_internal_subtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_subtype(), target);
  }

  // int64 treasure_id = 11;
  if (this->_internal_treasure_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_treasure_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.MessageItem)
  return target;
}

size_t MessageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.MessageItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string Color = 3;
  if (!this->_internal_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // string IconName = 5;
  if (!this->_internal_iconname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iconname());
  }

  // string IconUrl = 6;
  if (!this->_internal_iconurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iconurl());
  }

  // string BgColor = 9;
  if (!this->_internal_bgcolor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgcolor());
  }

  // .bilibili.broadcast.message.intl.MessageItemType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool Bold = 4;
  if (this->_internal_bold() != 0) {
    total_size += 1 + 1;
  }

  // int32 Width = 7;
  if (this->_internal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 Height = 8;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int64 treasure_id = 11;
  if (this->_internal_treasure_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_treasure_id());
  }

  // .bilibili.broadcast.message.intl.MessageItemSubType SubType = 10;
  if (this->_internal_subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageItem::GetClassData() const { return &_class_data_; }

void MessageItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MessageItem *>(to)->MergeFrom(
      static_cast<const MessageItem &>(from));
}


void MessageItem::MergeFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.MessageItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_color().empty()) {
    _internal_set_color(from._internal_color());
  }
  if (!from._internal_iconname().empty()) {
    _internal_set_iconname(from._internal_iconname());
  }
  if (!from._internal_iconurl().empty()) {
    _internal_set_iconurl(from._internal_iconurl());
  }
  if (!from._internal_bgcolor().empty()) {
    _internal_set_bgcolor(from._internal_bgcolor());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_bold() != 0) {
    _internal_set_bold(from._internal_bold());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_treasure_id() != 0) {
    _internal_set_treasure_id(from._internal_treasure_id());
  }
  if (from._internal_subtype() != 0) {
    _internal_set_subtype(from._internal_subtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageItem::CopyFrom(const MessageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.MessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageItem::IsInitialized() const {
  return true;
}

void MessageItem::InternalSwap(MessageItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, GetArenaForAllocation(),
      &other->content_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, GetArenaForAllocation(),
      &other->color_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iconname_, GetArenaForAllocation(),
      &other->iconname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &iconurl_, GetArenaForAllocation(),
      &other->iconurl_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgcolor_, GetArenaForAllocation(),
      &other->bgcolor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageItem, subtype_)
      + sizeof(MessageItem::subtype_)
      - PROTOBUF_FIELD_OFFSET(MessageItem, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[1]);
}

// ===================================================================

class Combo::_Internal {
 public:
  static const ::bilibili::broadcast::message::intl::Author& author(const Combo* msg);
  static const ::bilibili::broadcast::message::intl::Treasure& treasure(const Combo* msg);
  static const ::bilibili::broadcast::message::intl::ComboStyle& style(const Combo* msg);
};

const ::bilibili::broadcast::message::intl::Author&
Combo::_Internal::author(const Combo* msg) {
  return *msg->author_;
}
const ::bilibili::broadcast::message::intl::Treasure&
Combo::_Internal::treasure(const Combo* msg) {
  return *msg->treasure_;
}
const ::bilibili::broadcast::message::intl::ComboStyle&
Combo::_Internal::style(const Combo* msg) {
  return *msg->style_;
}
Combo::Combo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.Combo)
}
Combo::Combo(const Combo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  combo_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_combo_id().empty()) {
    combo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_combo_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_author()) {
    author_ = new ::bilibili::broadcast::message::intl::Author(*from.author_);
  } else {
    author_ = nullptr;
  }
  if (from._internal_has_treasure()) {
    treasure_ = new ::bilibili::broadcast::message::intl::Treasure(*from.treasure_);
  } else {
    treasure_ = nullptr;
  }
  if (from._internal_has_style()) {
    style_ = new ::bilibili::broadcast::message::intl::ComboStyle(*from.style_);
  } else {
    style_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.Combo)
}

inline void Combo::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
combo_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&author_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&author_)) + sizeof(style_));
}

Combo::~Combo() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.Combo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Combo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  combo_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete author_;
  if (this != internal_default_instance()) delete treasure_;
  if (this != internal_default_instance()) delete style_;
}

void Combo::ArenaDtor(void* object) {
  Combo* _this = reinterpret_cast< Combo* >(object);
  (void)_this;
}
void Combo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Combo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Combo::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.Combo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  combo_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && author_ != nullptr) {
    delete author_;
  }
  author_ = nullptr;
  if (GetArenaForAllocation() == nullptr && treasure_ != nullptr) {
    delete treasure_;
  }
  treasure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Combo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bilibili.broadcast.message.intl.Author author = 1 [json_name = "author"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_author(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 2 [json_name = "action"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Combo.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.Treasure treasure = 3 [json_name = "treasure"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_treasure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.ComboStyle style = 4 [json_name = "style"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string combo_id = 5 [json_name = "combo_id"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_combo_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Combo.combo_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Combo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.Combo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bilibili.broadcast.message.intl.Author author = 1 [json_name = "author"];
  if (this->_internal_has_author()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::author(this), target, stream);
  }

  // string action = 2 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Combo.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // .bilibili.broadcast.message.intl.Treasure treasure = 3 [json_name = "treasure"];
  if (this->_internal_has_treasure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::treasure(this), target, stream);
  }

  // .bilibili.broadcast.message.intl.ComboStyle style = 4 [json_name = "style"];
  if (this->_internal_has_style()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::style(this), target, stream);
  }

  // string combo_id = 5 [json_name = "combo_id"];
  if (!this->_internal_combo_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combo_id().data(), static_cast<int>(this->_internal_combo_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Combo.combo_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_combo_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.Combo)
  return target;
}

size_t Combo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.Combo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 2 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string combo_id = 5 [json_name = "combo_id"];
  if (!this->_internal_combo_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combo_id());
  }

  // .bilibili.broadcast.message.intl.Author author = 1 [json_name = "author"];
  if (this->_internal_has_author()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *author_);
  }

  // .bilibili.broadcast.message.intl.Treasure treasure = 3 [json_name = "treasure"];
  if (this->_internal_has_treasure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *treasure_);
  }

  // .bilibili.broadcast.message.intl.ComboStyle style = 4 [json_name = "style"];
  if (this->_internal_has_style()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *style_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Combo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Combo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Combo::GetClassData() const { return &_class_data_; }

void Combo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Combo *>(to)->MergeFrom(
      static_cast<const Combo &>(from));
}


void Combo::MergeFrom(const Combo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.Combo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (!from._internal_combo_id().empty()) {
    _internal_set_combo_id(from._internal_combo_id());
  }
  if (from._internal_has_author()) {
    _internal_mutable_author()->::bilibili::broadcast::message::intl::Author::MergeFrom(from._internal_author());
  }
  if (from._internal_has_treasure()) {
    _internal_mutable_treasure()->::bilibili::broadcast::message::intl::Treasure::MergeFrom(from._internal_treasure());
  }
  if (from._internal_has_style()) {
    _internal_mutable_style()->::bilibili::broadcast::message::intl::ComboStyle::MergeFrom(from._internal_style());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Combo::CopyFrom(const Combo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.Combo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Combo::IsInitialized() const {
  return true;
}

void Combo::InternalSwap(Combo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, GetArenaForAllocation(),
      &other->action_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &combo_id_, GetArenaForAllocation(),
      &other->combo_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Combo, style_)
      + sizeof(Combo::style_)
      - PROTOBUF_FIELD_OFFSET(Combo, author_)>(
          reinterpret_cast<char*>(&author_),
          reinterpret_cast<char*>(&other->author_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Combo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[2]);
}

// ===================================================================

class Treasure::_Internal {
 public:
  static const ::bilibili::broadcast::message::intl::Animation& animation(const Treasure* msg);
};

const ::bilibili::broadcast::message::intl::Animation&
Treasure::_Internal::animation(const Treasure* msg) {
  return *msg->animation_;
}
Treasure::Treasure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.Treasure)
}
Treasure::Treasure(const Treasure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_animation()) {
    animation_ = new ::bilibili::broadcast::message::intl::Animation(*from.animation_);
  } else {
    animation_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&animation_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(animation_type_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.Treasure)
}

inline void Treasure::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&animation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&animation_type_) -
    reinterpret_cast<char*>(&animation_)) + sizeof(animation_type_));
}

Treasure::~Treasure() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.Treasure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Treasure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete animation_;
}

void Treasure::ArenaDtor(void* object) {
  Treasure* _this = reinterpret_cast< Treasure* >(object);
  (void)_this;
}
void Treasure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Treasure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Treasure::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.Treasure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  icon_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && animation_ != nullptr) {
    delete animation_;
  }
  animation_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&animation_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(animation_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Treasure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2 [json_name = "title"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Treasure.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 3 [json_name = "icon"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Treasure.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 4 [json_name = "number"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 stars = 5 [json_name = "stars"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          stars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.Animation animation = 6 [json_name = "animation"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 animation_type = 7 [json_name = "animation_type"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          animation_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Treasure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.Treasure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string title = 2 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Treasure.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string icon = 3 [json_name = "icon"];
  if (!this->_internal_icon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Treasure.icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // int64 number = 4 [json_name = "number"];
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_number(), target);
  }

  // int64 stars = 5 [json_name = "stars"];
  if (this->_internal_stars() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_stars(), target);
  }

  // .bilibili.broadcast.message.intl.Animation animation = 6 [json_name = "animation"];
  if (this->_internal_has_animation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::animation(this), target, stream);
  }

  // int64 animation_type = 7 [json_name = "animation_type"];
  if (this->_internal_animation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_animation_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.Treasure)
  return target;
}

size_t Treasure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.Treasure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string icon = 3 [json_name = "icon"];
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // .bilibili.broadcast.message.intl.Animation animation = 6 [json_name = "animation"];
  if (this->_internal_has_animation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *animation_);
  }

  // int64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 number = 4 [json_name = "number"];
  if (this->_internal_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  // int64 stars = 5 [json_name = "stars"];
  if (this->_internal_stars() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_stars());
  }

  // int64 animation_type = 7 [json_name = "animation_type"];
  if (this->_internal_animation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_animation_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Treasure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Treasure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Treasure::GetClassData() const { return &_class_data_; }

void Treasure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Treasure *>(to)->MergeFrom(
      static_cast<const Treasure &>(from));
}


void Treasure::MergeFrom(const Treasure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.Treasure)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_icon().empty()) {
    _internal_set_icon(from._internal_icon());
  }
  if (from._internal_has_animation()) {
    _internal_mutable_animation()->::bilibili::broadcast::message::intl::Animation::MergeFrom(from._internal_animation());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  if (from._internal_stars() != 0) {
    _internal_set_stars(from._internal_stars());
  }
  if (from._internal_animation_type() != 0) {
    _internal_set_animation_type(from._internal_animation_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Treasure::CopyFrom(const Treasure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.Treasure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Treasure::IsInitialized() const {
  return true;
}

void Treasure::InternalSwap(Treasure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, GetArenaForAllocation(),
      &other->title_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, GetArenaForAllocation(),
      &other->icon_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Treasure, animation_type_)
      + sizeof(Treasure::animation_type_)
      - PROTOBUF_FIELD_OFFSET(Treasure, animation_)>(
          reinterpret_cast<char*>(&animation_),
          reinterpret_cast<char*>(&other->animation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Treasure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[3]);
}

// ===================================================================

class Animation::_Internal {
 public:
};

Animation::Animation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.Animation)
}
Animation::Animation(const Animation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resource_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource_name().empty()) {
    resource_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource_name(), 
      GetArenaForAllocation());
  }
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  animation_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_animation_url().empty()) {
    animation_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_animation_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.Animation)
}

inline void Animation::SharedCtor() {
resource_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
animation_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Animation::~Animation() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.Animation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Animation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  resource_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  animation_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Animation::ArenaDtor(void* object) {
  Animation* _this = reinterpret_cast< Animation* >(object);
  (void)_this;
}
void Animation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Animation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Animation::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.Animation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_name_.ClearToEmpty();
  file_name_.ClearToEmpty();
  animation_url_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Animation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string resource_name = 1 [json_name = "resource_name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_resource_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Animation.resource_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 2 [json_name = "file_name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Animation.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string animation_url = 3 [json_name = "animation_url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_animation_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Animation.animation_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 width = 4 [json_name = "width"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height = 5 [json_name = "height"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Animation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.Animation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string resource_name = 1 [json_name = "resource_name"];
  if (!this->_internal_resource_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource_name().data(), static_cast<int>(this->_internal_resource_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Animation.resource_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_resource_name(), target);
  }

  // string file_name = 2 [json_name = "file_name"];
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Animation.file_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_name(), target);
  }

  // string animation_url = 3 [json_name = "animation_url"];
  if (!this->_internal_animation_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animation_url().data(), static_cast<int>(this->_internal_animation_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Animation.animation_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_animation_url(), target);
  }

  // int64 width = 4 [json_name = "width"];
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_width(), target);
  }

  // int64 height = 5 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.Animation)
  return target;
}

size_t Animation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.Animation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string resource_name = 1 [json_name = "resource_name"];
  if (!this->_internal_resource_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource_name());
  }

  // string file_name = 2 [json_name = "file_name"];
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string animation_url = 3 [json_name = "animation_url"];
  if (!this->_internal_animation_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animation_url());
  }

  // int64 width = 4 [json_name = "width"];
  if (this->_internal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_width());
  }

  // int64 height = 5 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Animation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Animation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Animation::GetClassData() const { return &_class_data_; }

void Animation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Animation *>(to)->MergeFrom(
      static_cast<const Animation &>(from));
}


void Animation::MergeFrom(const Animation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.Animation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resource_name().empty()) {
    _internal_set_resource_name(from._internal_resource_name());
  }
  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_animation_url().empty()) {
    _internal_set_animation_url(from._internal_animation_url());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Animation::CopyFrom(const Animation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.Animation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Animation::IsInitialized() const {
  return true;
}

void Animation::InternalSwap(Animation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resource_name_, GetArenaForAllocation(),
      &other->resource_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, GetArenaForAllocation(),
      &other->file_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &animation_url_, GetArenaForAllocation(),
      &other->animation_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Animation, height_)
      + sizeof(Animation::height_)
      - PROTOBUF_FIELD_OFFSET(Animation, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Animation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[4]);
}

// ===================================================================

class ComboStyle::_Internal {
 public:
};

ComboStyle::ComboStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.ComboStyle)
}
ComboStyle::ComboStyle(const ComboStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bg_color_start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bg_color_start().empty()) {
    bg_color_start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bg_color_start(), 
      GetArenaForAllocation());
  }
  bg_color_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bg_color_end().empty()) {
    bg_color_end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bg_color_end(), 
      GetArenaForAllocation());
  }
  gift_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gift_color().empty()) {
    gift_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gift_color(), 
      GetArenaForAllocation());
  }
  name_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_color().empty()) {
    name_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_color(), 
      GetArenaForAllocation());
  }
  bg_color_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bg_color_center().empty()) {
    bg_color_center_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bg_color_center(), 
      GetArenaForAllocation());
  }
  gift_num_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gift_num_color().empty()) {
    gift_num_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gift_num_color(), 
      GetArenaForAllocation());
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&gift_num_size_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(gift_num_size_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.ComboStyle)
}

inline void ComboStyle::SharedCtor() {
bg_color_start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bg_color_end_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gift_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bg_color_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
gift_num_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gift_num_size_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(gift_num_size_));
}

ComboStyle::~ComboStyle() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.ComboStyle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ComboStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bg_color_start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bg_color_end_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gift_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bg_color_center_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gift_num_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComboStyle::ArenaDtor(void* object) {
  ComboStyle* _this = reinterpret_cast< ComboStyle* >(object);
  (void)_this;
}
void ComboStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComboStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComboStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.ComboStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bg_color_start_.ClearToEmpty();
  bg_color_end_.ClearToEmpty();
  gift_color_.ClearToEmpty();
  name_color_.ClearToEmpty();
  bg_color_center_.ClearToEmpty();
  gift_num_color_.ClearToEmpty();
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gift_num_size_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(gift_num_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComboStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bg_color_start = 1 [json_name = "bg_color_start"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bg_color_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.ComboStyle.bg_color_start"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bg_color_end = 2 [json_name = "bg_color_end"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_bg_color_end();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.ComboStyle.bg_color_end"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gift_color = 3 [json_name = "gift_color"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_gift_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.ComboStyle.gift_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name_color = 4 [json_name = "name_color"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.ComboStyle.name_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gift_num_size = 5 [json_name = "gift_num_size"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gift_num_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 duration = 6 [json_name = "duration"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 period = 7 [json_name = "period"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bg_color_center = 8 [json_name = "bg_color_center"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_bg_color_center();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.ComboStyle.bg_color_center"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gift_num_color = 9 [json_name = "gift_num_color"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_gift_num_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.ComboStyle.gift_num_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComboStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.ComboStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bg_color_start = 1 [json_name = "bg_color_start"];
  if (!this->_internal_bg_color_start().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bg_color_start().data(), static_cast<int>(this->_internal_bg_color_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.ComboStyle.bg_color_start");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bg_color_start(), target);
  }

  // string bg_color_end = 2 [json_name = "bg_color_end"];
  if (!this->_internal_bg_color_end().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bg_color_end().data(), static_cast<int>(this->_internal_bg_color_end().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.ComboStyle.bg_color_end");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bg_color_end(), target);
  }

  // string gift_color = 3 [json_name = "gift_color"];
  if (!this->_internal_gift_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gift_color().data(), static_cast<int>(this->_internal_gift_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.ComboStyle.gift_color");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_gift_color(), target);
  }

  // string name_color = 4 [json_name = "name_color"];
  if (!this->_internal_name_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_color().data(), static_cast<int>(this->_internal_name_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.ComboStyle.name_color");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name_color(), target);
  }

  // int32 gift_num_size = 5 [json_name = "gift_num_size"];
  if (this->_internal_gift_num_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_gift_num_size(), target);
  }

  // int64 duration = 6 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_duration(), target);
  }

  // int64 period = 7 [json_name = "period"];
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_period(), target);
  }

  // string bg_color_center = 8 [json_name = "bg_color_center"];
  if (!this->_internal_bg_color_center().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bg_color_center().data(), static_cast<int>(this->_internal_bg_color_center().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.ComboStyle.bg_color_center");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_bg_color_center(), target);
  }

  // string gift_num_color = 9 [json_name = "gift_num_color"];
  if (!this->_internal_gift_num_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gift_num_color().data(), static_cast<int>(this->_internal_gift_num_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.ComboStyle.gift_num_color");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_gift_num_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.ComboStyle)
  return target;
}

size_t ComboStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.ComboStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bg_color_start = 1 [json_name = "bg_color_start"];
  if (!this->_internal_bg_color_start().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bg_color_start());
  }

  // string bg_color_end = 2 [json_name = "bg_color_end"];
  if (!this->_internal_bg_color_end().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bg_color_end());
  }

  // string gift_color = 3 [json_name = "gift_color"];
  if (!this->_internal_gift_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gift_color());
  }

  // string name_color = 4 [json_name = "name_color"];
  if (!this->_internal_name_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_color());
  }

  // string bg_color_center = 8 [json_name = "bg_color_center"];
  if (!this->_internal_bg_color_center().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bg_color_center());
  }

  // string gift_num_color = 9 [json_name = "gift_num_color"];
  if (!this->_internal_gift_num_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gift_num_color());
  }

  // int64 duration = 6 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  // int64 period = 7 [json_name = "period"];
  if (this->_internal_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_period());
  }

  // int32 gift_num_size = 5 [json_name = "gift_num_size"];
  if (this->_internal_gift_num_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gift_num_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComboStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComboStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComboStyle::GetClassData() const { return &_class_data_; }

void ComboStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ComboStyle *>(to)->MergeFrom(
      static_cast<const ComboStyle &>(from));
}


void ComboStyle::MergeFrom(const ComboStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.ComboStyle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bg_color_start().empty()) {
    _internal_set_bg_color_start(from._internal_bg_color_start());
  }
  if (!from._internal_bg_color_end().empty()) {
    _internal_set_bg_color_end(from._internal_bg_color_end());
  }
  if (!from._internal_gift_color().empty()) {
    _internal_set_gift_color(from._internal_gift_color());
  }
  if (!from._internal_name_color().empty()) {
    _internal_set_name_color(from._internal_name_color());
  }
  if (!from._internal_bg_color_center().empty()) {
    _internal_set_bg_color_center(from._internal_bg_color_center());
  }
  if (!from._internal_gift_num_color().empty()) {
    _internal_set_gift_num_color(from._internal_gift_num_color());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from._internal_period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from._internal_gift_num_size() != 0) {
    _internal_set_gift_num_size(from._internal_gift_num_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComboStyle::CopyFrom(const ComboStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.ComboStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComboStyle::IsInitialized() const {
  return true;
}

void ComboStyle::InternalSwap(ComboStyle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bg_color_start_, GetArenaForAllocation(),
      &other->bg_color_start_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bg_color_end_, GetArenaForAllocation(),
      &other->bg_color_end_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gift_color_, GetArenaForAllocation(),
      &other->gift_color_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_color_, GetArenaForAllocation(),
      &other->name_color_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bg_color_center_, GetArenaForAllocation(),
      &other->bg_color_center_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gift_num_color_, GetArenaForAllocation(),
      &other->gift_num_color_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComboStyle, gift_num_size_)
      + sizeof(ComboStyle::gift_num_size_)
      - PROTOBUF_FIELD_OFFSET(ComboStyle, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComboStyle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[5]);
}

// ===================================================================

class Author::_Internal {
 public:
};

Author::Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.Author)
}
Author::Author(const Author& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.Author)
}

inline void Author::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(rank_));
}

Author::~Author() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.Author)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Author::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Author::ArenaDtor(void* object) {
  Author* _this = reinterpret_cast< Author* >(object);
  (void)_this;
}
void Author::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Author::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Author::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.Author)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  avatar_.ClearToEmpty();
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Author::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 mid = 1 [json_name = "mid"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Author.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rank = 3 [json_name = "rank"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatar = 4 [json_name = "avatar"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Author.avatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Author::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.Author)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 mid = 1 [json_name = "mid"];
  if (this->_internal_mid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Author.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 rank = 3 [json_name = "rank"];
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rank(), target);
  }

  // string avatar = 4 [json_name = "avatar"];
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Author.avatar");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avatar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.Author)
  return target;
}

size_t Author::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.Author)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string avatar = 4 [json_name = "avatar"];
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // int64 mid = 1 [json_name = "mid"];
  if (this->_internal_mid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  // int32 rank = 3 [json_name = "rank"];
  if (this->_internal_rank() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Author::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Author::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Author::GetClassData() const { return &_class_data_; }

void Author::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Author *>(to)->MergeFrom(
      static_cast<const Author &>(from));
}


void Author::MergeFrom(const Author& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.Author)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (from._internal_mid() != 0) {
    _internal_set_mid(from._internal_mid());
  }
  if (from._internal_rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Author::CopyFrom(const Author& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.Author)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Author::IsInitialized() const {
  return true;
}

void Author::InternalSwap(Author* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, GetArenaForAllocation(),
      &other->avatar_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Author, rank_)
      + sizeof(Author::rank_)
      - PROTOBUF_FIELD_OFFSET(Author, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Author::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[6]);
}

// ===================================================================

class DmEventReply::_Internal {
 public:
};

DmEventReply::DmEventReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.DmEventReply)
}
DmEventReply::DmEventReply(const DmEventReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.DmEventReply)
}

inline void DmEventReply::SharedCtor() {
}

DmEventReply::~DmEventReply() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.DmEventReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DmEventReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DmEventReply::ArenaDtor(void* object) {
  DmEventReply* _this = reinterpret_cast< DmEventReply* >(object);
  (void)_this;
}
void DmEventReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DmEventReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DmEventReply::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.DmEventReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmEventReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bilibili.broadcast.message.intl.DmItem Items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DmEventReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.DmEventReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bilibili.broadcast.message.intl.DmItem Items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.DmEventReply)
  return target;
}

size_t DmEventReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.DmEventReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.broadcast.message.intl.DmItem Items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DmEventReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DmEventReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DmEventReply::GetClassData() const { return &_class_data_; }

void DmEventReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DmEventReply *>(to)->MergeFrom(
      static_cast<const DmEventReply &>(from));
}


void DmEventReply::MergeFrom(const DmEventReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.DmEventReply)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DmEventReply::CopyFrom(const DmEventReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.DmEventReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmEventReply::IsInitialized() const {
  return true;
}

void DmEventReply::InternalSwap(DmEventReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DmEventReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[7]);
}

// ===================================================================

class Style::_Internal {
 public:
};

Style::Style(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.Style)
}
Style::Style(const Style& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namecolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namecolor().empty()) {
    namecolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namecolor(), 
      GetArenaForAllocation());
  }
  contentcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contentcolor().empty()) {
    contentcolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contentcolor(), 
      GetArenaForAllocation());
  }
  bgcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bgcolor().empty()) {
    bgcolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bgcolor(), 
      GetArenaForAllocation());
  }
  bold_ = from.bold_;
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.Style)
}

inline void Style::SharedCtor() {
namecolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
contentcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bgcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bold_ = false;
}

Style::~Style() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.Style)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Style::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  namecolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contentcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bgcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Style::ArenaDtor(void* object) {
  Style* _this = reinterpret_cast< Style* >(object);
  (void)_this;
}
void Style::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Style::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Style::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namecolor_.ClearToEmpty();
  contentcolor_.ClearToEmpty();
  bgcolor_.ClearToEmpty();
  bold_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Style::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string NameColor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_namecolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Style.NameColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContentColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contentcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Style.ContentColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string BgColor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bgcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Style.BgColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Bold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Style::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.Style)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string NameColor = 1;
  if (!this->_internal_namecolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namecolor().data(), static_cast<int>(this->_internal_namecolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Style.NameColor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namecolor(), target);
  }

  // string ContentColor = 2;
  if (!this->_internal_contentcolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contentcolor().data(), static_cast<int>(this->_internal_contentcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Style.ContentColor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contentcolor(), target);
  }

  // string BgColor = 3;
  if (!this->_internal_bgcolor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bgcolor().data(), static_cast<int>(this->_internal_bgcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Style.BgColor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bgcolor(), target);
  }

  // bool Bold = 4;
  if (this->_internal_bold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.Style)
  return target;
}

size_t Style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.Style)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NameColor = 1;
  if (!this->_internal_namecolor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namecolor());
  }

  // string ContentColor = 2;
  if (!this->_internal_contentcolor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contentcolor());
  }

  // string BgColor = 3;
  if (!this->_internal_bgcolor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bgcolor());
  }

  // bool Bold = 4;
  if (this->_internal_bold() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Style::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Style::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Style::GetClassData() const { return &_class_data_; }

void Style::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Style *>(to)->MergeFrom(
      static_cast<const Style &>(from));
}


void Style::MergeFrom(const Style& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.Style)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_namecolor().empty()) {
    _internal_set_namecolor(from._internal_namecolor());
  }
  if (!from._internal_contentcolor().empty()) {
    _internal_set_contentcolor(from._internal_contentcolor());
  }
  if (!from._internal_bgcolor().empty()) {
    _internal_set_bgcolor(from._internal_bgcolor());
  }
  if (from._internal_bold() != 0) {
    _internal_set_bold(from._internal_bold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Style::CopyFrom(const Style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.Style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Style::IsInitialized() const {
  return true;
}

void Style::InternalSwap(Style* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namecolor_, GetArenaForAllocation(),
      &other->namecolor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contentcolor_, GetArenaForAllocation(),
      &other->contentcolor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bgcolor_, GetArenaForAllocation(),
      &other->bgcolor_, other->GetArenaForAllocation()
  );
  swap(bold_, other->bold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Style::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[8]);
}

// ===================================================================

class Sticker::_Internal {
 public:
};

Sticker::Sticker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.Sticker)
}
Sticker::Sticker(const Sticker& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&id_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.Sticker)
}

inline void Sticker::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&id_)) + sizeof(number_));
}

Sticker::~Sticker() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.Sticker)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sticker::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sticker::ArenaDtor(void* object) {
  Sticker* _this = reinterpret_cast< Sticker* >(object);
  (void)_this;
}
void Sticker::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sticker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sticker::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.Sticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  icon_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&id_)) + sizeof(number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sticker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Sticker.Title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.Sticker.Icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 Number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sticker::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.Sticker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Sticker.Title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string Icon = 3;
  if (!this->_internal_icon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.Sticker.Icon");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // int64 Number = 4;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.Sticker)
  return target;
}

size_t Sticker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.Sticker)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string Icon = 3;
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // int64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // int64 Number = 4;
  if (this->_internal_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sticker::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sticker::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sticker::GetClassData() const { return &_class_data_; }

void Sticker::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Sticker *>(to)->MergeFrom(
      static_cast<const Sticker &>(from));
}


void Sticker::MergeFrom(const Sticker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.Sticker)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_icon().empty()) {
    _internal_set_icon(from._internal_icon());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_number() != 0) {
    _internal_set_number(from._internal_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sticker::CopyFrom(const Sticker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.Sticker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sticker::IsInitialized() const {
  return true;
}

void Sticker::InternalSwap(Sticker* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, GetArenaForAllocation(),
      &other->title_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_, GetArenaForAllocation(),
      &other->icon_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sticker, number_)
      + sizeof(Sticker::number_)
      - PROTOBUF_FIELD_OFFSET(Sticker, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sticker::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[9]);
}

// ===================================================================

class TopUser::_Internal {
 public:
};

TopUser::TopUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.TopUser)
}
TopUser::TopUser(const TopUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paidusernum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paidusernum().empty()) {
    paidusernum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paidusernum(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.TopUser)
}

inline void TopUser::SharedCtor() {
paidusernum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TopUser::~TopUser() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.TopUser)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TopUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  paidusernum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TopUser::ArenaDtor(void* object) {
  TopUser* _this = reinterpret_cast< TopUser* >(object);
  (void)_this;
}
void TopUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopUser::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.TopUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  paidusernum_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PaidUserNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paidusernum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.TopUser.PaidUserNum"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bilibili.broadcast.message.intl.User Users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.TopUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string PaidUserNum = 1;
  if (!this->_internal_paidusernum().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paidusernum().data(), static_cast<int>(this->_internal_paidusernum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.TopUser.PaidUserNum");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_paidusernum(), target);
  }

  // repeated .bilibili.broadcast.message.intl.User Users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_users(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.TopUser)
  return target;
}

size_t TopUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.TopUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.broadcast.message.intl.User Users = 2;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string PaidUserNum = 1;
  if (!this->_internal_paidusernum().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paidusernum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TopUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopUser::GetClassData() const { return &_class_data_; }

void TopUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TopUser *>(to)->MergeFrom(
      static_cast<const TopUser &>(from));
}


void TopUser::MergeFrom(const TopUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.TopUser)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (!from._internal_paidusernum().empty()) {
    _internal_set_paidusernum(from._internal_paidusernum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopUser::CopyFrom(const TopUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.TopUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopUser::IsInitialized() const {
  return true;
}

void TopUser::InternalSwap(TopUser* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &paidusernum_, GetArenaForAllocation(),
      &other->paidusernum_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TopUser::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[10]);
}

// ===================================================================

class User::_Internal {
 public:
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  face_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_face().empty()) {
    face_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_face(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mid_, &from.mid_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.User)
}

inline void User::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
face_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&mid_)) + sizeof(score_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.User)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  face_.ClearToEmpty();
  ::memset(&mid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&mid_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 Mid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.User.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Face = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_face();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.User.Face"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Mid = 1;
  if (this->_internal_mid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_mid(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.User.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string Face = 3;
  if (!this->_internal_face().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_face().data(), static_cast<int>(this->_internal_face().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.User.Face");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_face(), target);
  }

  // int64 score = 4;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Face = 3;
  if (!this->_internal_face().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_face());
  }

  // int64 Mid = 1;
  if (this->_internal_mid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mid());
  }

  // int64 score = 4;
  if (this->_internal_score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_score());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }

void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<User *>(to)->MergeFrom(
      static_cast<const User &>(from));
}


void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.User)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_face().empty()) {
    _internal_set_face(from._internal_face());
  }
  if (from._internal_mid() != 0) {
    _internal_set_mid(from._internal_mid());
  }
  if (from._internal_score() != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &face_, GetArenaForAllocation(),
      &other->face_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, score_)
      + sizeof(User::score_)
      - PROTOBUF_FIELD_OFFSET(User, mid_)>(
          reinterpret_cast<char*>(&mid_),
          reinterpret_cast<char*>(&other->mid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[11]);
}

// ===================================================================

class PopupInfo::_Internal {
 public:
};

PopupInfo::PopupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  popup_info_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.PopupInfo)
}
PopupInfo::PopupInfo(const PopupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      popup_info_list_(from.popup_info_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.PopupInfo)
}

inline void PopupInfo::SharedCtor() {
duration_ = int64_t{0};
}

PopupInfo::~PopupInfo() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.PopupInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PopupInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PopupInfo::ArenaDtor(void* object) {
  PopupInfo* _this = reinterpret_cast< PopupInfo* >(object);
  (void)_this;
}
void PopupInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PopupInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PopupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.PopupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  popup_info_list_.Clear();
  duration_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PopupInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .bilibili.broadcast.message.intl.PopupInfoItem popup_info_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_popup_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PopupInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.PopupInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bilibili.broadcast.message.intl.PopupInfoItem popup_info_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_popup_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_popup_info_list(i), target, stream);
  }

  // int64 duration = 2;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.PopupInfo)
  return target;
}

size_t PopupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.PopupInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bilibili.broadcast.message.intl.PopupInfoItem popup_info_list = 1;
  total_size += 1UL * this->_internal_popup_info_list_size();
  for (const auto& msg : this->popup_info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 duration = 2;
  if (this->_internal_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PopupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PopupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PopupInfo::GetClassData() const { return &_class_data_; }

void PopupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PopupInfo *>(to)->MergeFrom(
      static_cast<const PopupInfo &>(from));
}


void PopupInfo::MergeFrom(const PopupInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.PopupInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  popup_info_list_.MergeFrom(from.popup_info_list_);
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PopupInfo::CopyFrom(const PopupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.PopupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopupInfo::IsInitialized() const {
  return true;
}

void PopupInfo::InternalSwap(PopupInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  popup_info_list_.InternalSwap(&other->popup_info_list_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PopupInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[12]);
}

// ===================================================================

class PopupInfoItem::_Internal {
 public:
};

PopupInfoItem::PopupInfoItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.PopupInfoItem)
}
PopupInfoItem::PopupInfoItem(const PopupInfoItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  icon_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon_name().empty()) {
    icon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_name(), 
      GetArenaForAllocation());
  }
  icon_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon_url().empty()) {
    icon_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_icon_url(), 
      GetArenaForAllocation());
  }
  bg_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bg_color().empty()) {
    bg_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bg_color(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bold_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bold_));
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.PopupInfoItem)
}

inline void PopupInfoItem::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
icon_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
icon_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bg_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bold_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bold_));
}

PopupInfoItem::~PopupInfoItem() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.PopupInfoItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PopupInfoItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bg_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PopupInfoItem::ArenaDtor(void* object) {
  PopupInfoItem* _this = reinterpret_cast< PopupInfoItem* >(object);
  (void)_this;
}
void PopupInfoItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PopupInfoItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PopupInfoItem::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.PopupInfoItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  color_.ClearToEmpty();
  icon_name_.ClearToEmpty();
  icon_url_.ClearToEmpty();
  bg_color_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bold_) -
      reinterpret_cast<char*>(&type_)) + sizeof(bold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PopupInfoItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .bilibili.broadcast.message.intl.PopupItemType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::bilibili::broadcast::message::intl::PopupItemType>(val));
        } else goto handle_unusual;
        continue;
      // .bilibili.broadcast.message.intl.PopupItemPosition positon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_positon(static_cast<::bilibili::broadcast::message::intl::PopupItemPosition>(val));
        } else goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.PopupInfoItem.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.PopupInfoItem.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_icon_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.PopupInfoItem.icon_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon_url = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_icon_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.PopupInfoItem.icon_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bg_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_bg_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.PopupInfoItem.bg_color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PopupInfoItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.PopupInfoItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bilibili.broadcast.message.intl.PopupItemType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .bilibili.broadcast.message.intl.PopupItemPosition positon = 2;
  if (this->_internal_positon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_positon(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.PopupInfoItem.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // string color = 4;
  if (!this->_internal_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.PopupInfoItem.color");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_color(), target);
  }

  // bool bold = 5;
  if (this->_internal_bold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_bold(), target);
  }

  // string icon_name = 6;
  if (!this->_internal_icon_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon_name().data(), static_cast<int>(this->_internal_icon_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.PopupInfoItem.icon_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_icon_name(), target);
  }

  // string icon_url = 7;
  if (!this->_internal_icon_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon_url().data(), static_cast<int>(this->_internal_icon_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.PopupInfoItem.icon_url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_icon_url(), target);
  }

  // int64 width = 8;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_width(), target);
  }

  // int64 height = 9;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_height(), target);
  }

  // string bg_color = 10;
  if (!this->_internal_bg_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bg_color().data(), static_cast<int>(this->_internal_bg_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.PopupInfoItem.bg_color");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_bg_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.PopupInfoItem)
  return target;
}

size_t PopupInfoItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.PopupInfoItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string color = 4;
  if (!this->_internal_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // string icon_name = 6;
  if (!this->_internal_icon_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon_name());
  }

  // string icon_url = 7;
  if (!this->_internal_icon_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon_url());
  }

  // string bg_color = 10;
  if (!this->_internal_bg_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bg_color());
  }

  // .bilibili.broadcast.message.intl.PopupItemType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .bilibili.broadcast.message.intl.PopupItemPosition positon = 2;
  if (this->_internal_positon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_positon());
  }

  // int64 width = 8;
  if (this->_internal_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_width());
  }

  // int64 height = 9;
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_height());
  }

  // bool bold = 5;
  if (this->_internal_bold() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PopupInfoItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PopupInfoItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PopupInfoItem::GetClassData() const { return &_class_data_; }

void PopupInfoItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PopupInfoItem *>(to)->MergeFrom(
      static_cast<const PopupInfoItem &>(from));
}


void PopupInfoItem::MergeFrom(const PopupInfoItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.PopupInfoItem)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  if (!from._internal_color().empty()) {
    _internal_set_color(from._internal_color());
  }
  if (!from._internal_icon_name().empty()) {
    _internal_set_icon_name(from._internal_icon_name());
  }
  if (!from._internal_icon_url().empty()) {
    _internal_set_icon_url(from._internal_icon_url());
  }
  if (!from._internal_bg_color().empty()) {
    _internal_set_bg_color(from._internal_bg_color());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_positon() != 0) {
    _internal_set_positon(from._internal_positon());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_bold() != 0) {
    _internal_set_bold(from._internal_bold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PopupInfoItem::CopyFrom(const PopupInfoItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.PopupInfoItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopupInfoItem::IsInitialized() const {
  return true;
}

void PopupInfoItem::InternalSwap(PopupInfoItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, GetArenaForAllocation(),
      &other->content_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, GetArenaForAllocation(),
      &other->color_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_name_, GetArenaForAllocation(),
      &other->icon_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &icon_url_, GetArenaForAllocation(),
      &other->icon_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bg_color_, GetArenaForAllocation(),
      &other->bg_color_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PopupInfoItem, bold_)
      + sizeof(PopupInfoItem::bold_)
      - PROTOBUF_FIELD_OFFSET(PopupInfoItem, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PopupInfoItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[13]);
}

// ===================================================================

class BlockInfo::_Internal {
 public:
};

BlockInfo::BlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bilibili.broadcast.message.intl.BlockInfo)
}
BlockInfo::BlockInfo(const BlockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notice().empty()) {
    notice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notice(), 
      GetArenaForAllocation());
  }
  end_time_ = from.end_time_;
  // @@protoc_insertion_point(copy_constructor:bilibili.broadcast.message.intl.BlockInfo)
}

inline void BlockInfo::SharedCtor() {
notice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
end_time_ = int64_t{0};
}

BlockInfo::~BlockInfo() {
  // @@protoc_insertion_point(destructor:bilibili.broadcast.message.intl.BlockInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  notice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockInfo::ArenaDtor(void* object) {
  BlockInfo* _this = reinterpret_cast< BlockInfo* >(object);
  (void)_this;
}
void BlockInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bilibili.broadcast.message.intl.BlockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notice_.ClearToEmpty();
  end_time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string notice = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_notice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bilibili.broadcast.message.intl.BlockInfo.notice"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bilibili.broadcast.message.intl.BlockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string notice = 1;
  if (!this->_internal_notice().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice().data(), static_cast<int>(this->_internal_notice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bilibili.broadcast.message.intl.BlockInfo.notice");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_notice(), target);
  }

  // int64 end_time = 2;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bilibili.broadcast.message.intl.BlockInfo)
  return target;
}

size_t BlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bilibili.broadcast.message.intl.BlockInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string notice = 1;
  if (!this->_internal_notice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice());
  }

  // int64 end_time = 2;
  if (this->_internal_end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockInfo::GetClassData() const { return &_class_data_; }

void BlockInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockInfo *>(to)->MergeFrom(
      static_cast<const BlockInfo &>(from));
}


void BlockInfo::MergeFrom(const BlockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bilibili.broadcast.message.intl.BlockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_notice().empty()) {
    _internal_set_notice(from._internal_notice());
  }
  if (from._internal_end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockInfo::CopyFrom(const BlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bilibili.broadcast.message.intl.BlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo::IsInitialized() const {
  return true;
}

void BlockInfo::InternalSwap(BlockInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notice_, GetArenaForAllocation(),
      &other->notice_, other->GetArenaForAllocation()
  );
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_DMData_2eproto_getter, &descriptor_table_DMData_2eproto_once,
      file_level_metadata_DMData_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace intl
}  // namespace message
}  // namespace broadcast
}  // namespace bilibili
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::DmItem* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::DmItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::DmItem >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::MessageItem* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::MessageItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::MessageItem >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::Combo* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::Combo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::Combo >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::Treasure* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::Treasure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::Treasure >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::Animation* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::Animation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::Animation >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::ComboStyle* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::ComboStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::ComboStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::Author* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::Author >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::Author >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::DmEventReply* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::DmEventReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::DmEventReply >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::Style* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::Style >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::Style >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::Sticker* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::Sticker >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::Sticker >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::TopUser* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::TopUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::TopUser >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::User* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::User >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::PopupInfo* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::PopupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::PopupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::PopupInfoItem* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::PopupInfoItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::PopupInfoItem >(arena);
}
template<> PROTOBUF_NOINLINE ::bilibili::broadcast::message::intl::BlockInfo* Arena::CreateMaybeMessage< ::bilibili::broadcast::message::intl::BlockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bilibili::broadcast::message::intl::BlockInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
