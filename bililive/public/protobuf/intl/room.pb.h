// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_room_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_room_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "status.pb.h"
#include <google/protobuf/any.pb.h>
#include "gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_room_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_room_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_room_2eproto;
namespace bilibili {
namespace broadcast {
namespace v1 {
class RoomErrorEvent;
struct RoomErrorEventDefaultTypeInternal;
extern RoomErrorEventDefaultTypeInternal _RoomErrorEvent_default_instance_;
class RoomJoinEvent;
struct RoomJoinEventDefaultTypeInternal;
extern RoomJoinEventDefaultTypeInternal _RoomJoinEvent_default_instance_;
class RoomLeaveEvent;
struct RoomLeaveEventDefaultTypeInternal;
extern RoomLeaveEventDefaultTypeInternal _RoomLeaveEvent_default_instance_;
class RoomMessageEvent;
struct RoomMessageEventDefaultTypeInternal;
extern RoomMessageEventDefaultTypeInternal _RoomMessageEvent_default_instance_;
class RoomOnlineEvent;
struct RoomOnlineEventDefaultTypeInternal;
extern RoomOnlineEventDefaultTypeInternal _RoomOnlineEvent_default_instance_;
class RoomReq;
struct RoomReqDefaultTypeInternal;
extern RoomReqDefaultTypeInternal _RoomReq_default_instance_;
class RoomResp;
struct RoomRespDefaultTypeInternal;
extern RoomRespDefaultTypeInternal _RoomResp_default_instance_;
}  // namespace v1
}  // namespace broadcast
}  // namespace bilibili
PROTOBUF_NAMESPACE_OPEN
template<> ::bilibili::broadcast::v1::RoomErrorEvent* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::RoomErrorEvent>(Arena*);
template<> ::bilibili::broadcast::v1::RoomJoinEvent* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::RoomJoinEvent>(Arena*);
template<> ::bilibili::broadcast::v1::RoomLeaveEvent* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::RoomLeaveEvent>(Arena*);
template<> ::bilibili::broadcast::v1::RoomMessageEvent* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::RoomMessageEvent>(Arena*);
template<> ::bilibili::broadcast::v1::RoomOnlineEvent* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::RoomOnlineEvent>(Arena*);
template<> ::bilibili::broadcast::v1::RoomReq* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::RoomReq>(Arena*);
template<> ::bilibili::broadcast::v1::RoomResp* Arena::CreateMaybeMessage<::bilibili::broadcast::v1::RoomResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bilibili {
namespace broadcast {
namespace v1 {

// ===================================================================

class RoomJoinEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.RoomJoinEvent) */ {
 public:
  inline RoomJoinEvent() : RoomJoinEvent(nullptr) {}
  ~RoomJoinEvent() override;
  explicit constexpr RoomJoinEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomJoinEvent(const RoomJoinEvent& from);
  RoomJoinEvent(RoomJoinEvent&& from) noexcept
    : RoomJoinEvent() {
    *this = ::std::move(from);
  }

  inline RoomJoinEvent& operator=(const RoomJoinEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomJoinEvent& operator=(RoomJoinEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomJoinEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomJoinEvent* internal_default_instance() {
    return reinterpret_cast<const RoomJoinEvent*>(
               &_RoomJoinEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomJoinEvent& a, RoomJoinEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomJoinEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomJoinEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomJoinEvent* New() const final {
    return new RoomJoinEvent();
  }

  RoomJoinEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomJoinEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomJoinEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomJoinEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomJoinEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.RoomJoinEvent";
  }
  protected:
  explicit RoomJoinEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.RoomJoinEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_2eproto;
};
// -------------------------------------------------------------------

class RoomLeaveEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.RoomLeaveEvent) */ {
 public:
  inline RoomLeaveEvent() : RoomLeaveEvent(nullptr) {}
  ~RoomLeaveEvent() override;
  explicit constexpr RoomLeaveEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomLeaveEvent(const RoomLeaveEvent& from);
  RoomLeaveEvent(RoomLeaveEvent&& from) noexcept
    : RoomLeaveEvent() {
    *this = ::std::move(from);
  }

  inline RoomLeaveEvent& operator=(const RoomLeaveEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomLeaveEvent& operator=(RoomLeaveEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomLeaveEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomLeaveEvent* internal_default_instance() {
    return reinterpret_cast<const RoomLeaveEvent*>(
               &_RoomLeaveEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomLeaveEvent& a, RoomLeaveEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomLeaveEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomLeaveEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomLeaveEvent* New() const final {
    return new RoomLeaveEvent();
  }

  RoomLeaveEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomLeaveEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomLeaveEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomLeaveEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomLeaveEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.RoomLeaveEvent";
  }
  protected:
  explicit RoomLeaveEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.RoomLeaveEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_2eproto;
};
// -------------------------------------------------------------------

class RoomOnlineEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.RoomOnlineEvent) */ {
 public:
  inline RoomOnlineEvent() : RoomOnlineEvent(nullptr) {}
  ~RoomOnlineEvent() override;
  explicit constexpr RoomOnlineEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomOnlineEvent(const RoomOnlineEvent& from);
  RoomOnlineEvent(RoomOnlineEvent&& from) noexcept
    : RoomOnlineEvent() {
    *this = ::std::move(from);
  }

  inline RoomOnlineEvent& operator=(const RoomOnlineEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomOnlineEvent& operator=(RoomOnlineEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomOnlineEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomOnlineEvent* internal_default_instance() {
    return reinterpret_cast<const RoomOnlineEvent*>(
               &_RoomOnlineEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoomOnlineEvent& a, RoomOnlineEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomOnlineEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomOnlineEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomOnlineEvent* New() const final {
    return new RoomOnlineEvent();
  }

  RoomOnlineEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomOnlineEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomOnlineEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomOnlineEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomOnlineEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.RoomOnlineEvent";
  }
  protected:
  explicit RoomOnlineEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineFieldNumber = 1,
    kAllOnlineFieldNumber = 2,
  };
  // int32 online = 1;
  void clear_online();
  ::PROTOBUF_NAMESPACE_ID::int32 online() const;
  void set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_online() const;
  void _internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 all_online = 2;
  void clear_all_online();
  ::PROTOBUF_NAMESPACE_ID::int32 all_online() const;
  void set_all_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_all_online() const;
  void _internal_set_all_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.RoomOnlineEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 online_;
  ::PROTOBUF_NAMESPACE_ID::int32 all_online_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_2eproto;
};
// -------------------------------------------------------------------

class RoomMessageEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.RoomMessageEvent) */ {
 public:
  inline RoomMessageEvent() : RoomMessageEvent(nullptr) {}
  ~RoomMessageEvent() override;
  explicit constexpr RoomMessageEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomMessageEvent(const RoomMessageEvent& from);
  RoomMessageEvent(RoomMessageEvent&& from) noexcept
    : RoomMessageEvent() {
    *this = ::std::move(from);
  }

  inline RoomMessageEvent& operator=(const RoomMessageEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomMessageEvent& operator=(RoomMessageEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomMessageEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomMessageEvent* internal_default_instance() {
    return reinterpret_cast<const RoomMessageEvent*>(
               &_RoomMessageEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoomMessageEvent& a, RoomMessageEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomMessageEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomMessageEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomMessageEvent* New() const final {
    return new RoomMessageEvent();
  }

  RoomMessageEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomMessageEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomMessageEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomMessageEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomMessageEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.RoomMessageEvent";
  }
  protected:
  explicit RoomMessageEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPathFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // string target_path = 1;
  void clear_target_path();
  const std::string& target_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_target_path();
  void set_allocated_target_path(std::string* target_path);
  private:
  const std::string& _internal_target_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_path(const std::string& value);
  std::string* _internal_mutable_target_path();
  public:

  // .google.protobuf.Any body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const PROTOBUF_NAMESPACE_ID::Any& body() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_body();
  PROTOBUF_NAMESPACE_ID::Any* mutable_body();
  void set_allocated_body(PROTOBUF_NAMESPACE_ID::Any* body);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_body() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      PROTOBUF_NAMESPACE_ID::Any* body);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.RoomMessageEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_path_;
  PROTOBUF_NAMESPACE_ID::Any* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_2eproto;
};
// -------------------------------------------------------------------

class RoomErrorEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.RoomErrorEvent) */ {
 public:
  inline RoomErrorEvent() : RoomErrorEvent(nullptr) {}
  ~RoomErrorEvent() override;
  explicit constexpr RoomErrorEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomErrorEvent(const RoomErrorEvent& from);
  RoomErrorEvent(RoomErrorEvent&& from) noexcept
    : RoomErrorEvent() {
    *this = ::std::move(from);
  }

  inline RoomErrorEvent& operator=(const RoomErrorEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomErrorEvent& operator=(RoomErrorEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomErrorEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomErrorEvent* internal_default_instance() {
    return reinterpret_cast<const RoomErrorEvent*>(
               &_RoomErrorEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoomErrorEvent& a, RoomErrorEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomErrorEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomErrorEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomErrorEvent* New() const final {
    return new RoomErrorEvent();
  }

  RoomErrorEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomErrorEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomErrorEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomErrorEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomErrorEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.RoomErrorEvent";
  }
  protected:
  explicit RoomErrorEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .bilibili.rpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::bilibili::rpc::Status& status() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::rpc::Status* release_status();
  ::bilibili::rpc::Status* mutable_status();
  void set_allocated_status(::bilibili::rpc::Status* status);
  private:
  const ::bilibili::rpc::Status& _internal_status() const;
  ::bilibili::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::bilibili::rpc::Status* status);
  ::bilibili::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.RoomErrorEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bilibili::rpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_room_2eproto;
};
// -------------------------------------------------------------------

class RoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.RoomReq) */ {
 public:
  inline RoomReq() : RoomReq(nullptr) {}
  ~RoomReq() override;
  explicit constexpr RoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomReq(const RoomReq& from);
  RoomReq(RoomReq&& from) noexcept
    : RoomReq() {
    *this = ::std::move(from);
  }

  inline RoomReq& operator=(const RoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomReq& operator=(RoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomReq& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kJoin = 2,
    kLeave = 3,
    kOnline = 4,
    kMsg = 5,
    EVENT_NOT_SET = 0,
  };

  static inline const RoomReq* internal_default_instance() {
    return reinterpret_cast<const RoomReq*>(
               &_RoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoomReq& a, RoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomReq* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomReq* New() const final {
    return new RoomReq();
  }

  RoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.RoomReq";
  }
  protected:
  explicit RoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kJoinFieldNumber = 2,
    kLeaveFieldNumber = 3,
    kOnlineFieldNumber = 4,
    kMsgFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .bilibili.broadcast.v1.RoomJoinEvent join = 2;
  bool has_join() const;
  private:
  bool _internal_has_join() const;
  public:
  void clear_join();
  const ::bilibili::broadcast::v1::RoomJoinEvent& join() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::RoomJoinEvent* release_join();
  ::bilibili::broadcast::v1::RoomJoinEvent* mutable_join();
  void set_allocated_join(::bilibili::broadcast::v1::RoomJoinEvent* join);
  private:
  const ::bilibili::broadcast::v1::RoomJoinEvent& _internal_join() const;
  ::bilibili::broadcast::v1::RoomJoinEvent* _internal_mutable_join();
  public:
  void unsafe_arena_set_allocated_join(
      ::bilibili::broadcast::v1::RoomJoinEvent* join);
  ::bilibili::broadcast::v1::RoomJoinEvent* unsafe_arena_release_join();

  // .bilibili.broadcast.v1.RoomLeaveEvent leave = 3;
  bool has_leave() const;
  private:
  bool _internal_has_leave() const;
  public:
  void clear_leave();
  const ::bilibili::broadcast::v1::RoomLeaveEvent& leave() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::RoomLeaveEvent* release_leave();
  ::bilibili::broadcast::v1::RoomLeaveEvent* mutable_leave();
  void set_allocated_leave(::bilibili::broadcast::v1::RoomLeaveEvent* leave);
  private:
  const ::bilibili::broadcast::v1::RoomLeaveEvent& _internal_leave() const;
  ::bilibili::broadcast::v1::RoomLeaveEvent* _internal_mutable_leave();
  public:
  void unsafe_arena_set_allocated_leave(
      ::bilibili::broadcast::v1::RoomLeaveEvent* leave);
  ::bilibili::broadcast::v1::RoomLeaveEvent* unsafe_arena_release_leave();

  // .bilibili.broadcast.v1.RoomOnlineEvent online = 4;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  const ::bilibili::broadcast::v1::RoomOnlineEvent& online() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::RoomOnlineEvent* release_online();
  ::bilibili::broadcast::v1::RoomOnlineEvent* mutable_online();
  void set_allocated_online(::bilibili::broadcast::v1::RoomOnlineEvent* online);
  private:
  const ::bilibili::broadcast::v1::RoomOnlineEvent& _internal_online() const;
  ::bilibili::broadcast::v1::RoomOnlineEvent* _internal_mutable_online();
  public:
  void unsafe_arena_set_allocated_online(
      ::bilibili::broadcast::v1::RoomOnlineEvent* online);
  ::bilibili::broadcast::v1::RoomOnlineEvent* unsafe_arena_release_online();

  // .bilibili.broadcast.v1.RoomMessageEvent msg = 5;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::bilibili::broadcast::v1::RoomMessageEvent& msg() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::RoomMessageEvent* release_msg();
  ::bilibili::broadcast::v1::RoomMessageEvent* mutable_msg();
  void set_allocated_msg(::bilibili::broadcast::v1::RoomMessageEvent* msg);
  private:
  const ::bilibili::broadcast::v1::RoomMessageEvent& _internal_msg() const;
  ::bilibili::broadcast::v1::RoomMessageEvent* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::bilibili::broadcast::v1::RoomMessageEvent* msg);
  ::bilibili::broadcast::v1::RoomMessageEvent* unsafe_arena_release_msg();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.RoomReq)
 private:
  class _Internal;
  void set_has_join();
  void set_has_leave();
  void set_has_online();
  void set_has_msg();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::bilibili::broadcast::v1::RoomJoinEvent* join_;
    ::bilibili::broadcast::v1::RoomLeaveEvent* leave_;
    ::bilibili::broadcast::v1::RoomOnlineEvent* online_;
    ::bilibili::broadcast::v1::RoomMessageEvent* msg_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_room_2eproto;
};
// -------------------------------------------------------------------

class RoomResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.v1.RoomResp) */ {
 public:
  inline RoomResp() : RoomResp(nullptr) {}
  ~RoomResp() override;
  explicit constexpr RoomResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomResp(const RoomResp& from);
  RoomResp(RoomResp&& from) noexcept
    : RoomResp() {
    *this = ::std::move(from);
  }

  inline RoomResp& operator=(const RoomResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomResp& operator=(RoomResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomResp& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kJoin = 2,
    kLeave = 3,
    kOnline = 4,
    kMsg = 5,
    kErr = 6,
    EVENT_NOT_SET = 0,
  };

  static inline const RoomResp* internal_default_instance() {
    return reinterpret_cast<const RoomResp*>(
               &_RoomResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoomResp& a, RoomResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomResp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomResp* New() const final {
    return new RoomResp();
  }

  RoomResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomResp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.v1.RoomResp";
  }
  protected:
  explicit RoomResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kJoinFieldNumber = 2,
    kLeaveFieldNumber = 3,
    kOnlineFieldNumber = 4,
    kMsgFieldNumber = 5,
    kErrFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .bilibili.broadcast.v1.RoomJoinEvent join = 2;
  bool has_join() const;
  private:
  bool _internal_has_join() const;
  public:
  void clear_join();
  const ::bilibili::broadcast::v1::RoomJoinEvent& join() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::RoomJoinEvent* release_join();
  ::bilibili::broadcast::v1::RoomJoinEvent* mutable_join();
  void set_allocated_join(::bilibili::broadcast::v1::RoomJoinEvent* join);
  private:
  const ::bilibili::broadcast::v1::RoomJoinEvent& _internal_join() const;
  ::bilibili::broadcast::v1::RoomJoinEvent* _internal_mutable_join();
  public:
  void unsafe_arena_set_allocated_join(
      ::bilibili::broadcast::v1::RoomJoinEvent* join);
  ::bilibili::broadcast::v1::RoomJoinEvent* unsafe_arena_release_join();

  // .bilibili.broadcast.v1.RoomLeaveEvent leave = 3;
  bool has_leave() const;
  private:
  bool _internal_has_leave() const;
  public:
  void clear_leave();
  const ::bilibili::broadcast::v1::RoomLeaveEvent& leave() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::RoomLeaveEvent* release_leave();
  ::bilibili::broadcast::v1::RoomLeaveEvent* mutable_leave();
  void set_allocated_leave(::bilibili::broadcast::v1::RoomLeaveEvent* leave);
  private:
  const ::bilibili::broadcast::v1::RoomLeaveEvent& _internal_leave() const;
  ::bilibili::broadcast::v1::RoomLeaveEvent* _internal_mutable_leave();
  public:
  void unsafe_arena_set_allocated_leave(
      ::bilibili::broadcast::v1::RoomLeaveEvent* leave);
  ::bilibili::broadcast::v1::RoomLeaveEvent* unsafe_arena_release_leave();

  // .bilibili.broadcast.v1.RoomOnlineEvent online = 4;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  const ::bilibili::broadcast::v1::RoomOnlineEvent& online() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::RoomOnlineEvent* release_online();
  ::bilibili::broadcast::v1::RoomOnlineEvent* mutable_online();
  void set_allocated_online(::bilibili::broadcast::v1::RoomOnlineEvent* online);
  private:
  const ::bilibili::broadcast::v1::RoomOnlineEvent& _internal_online() const;
  ::bilibili::broadcast::v1::RoomOnlineEvent* _internal_mutable_online();
  public:
  void unsafe_arena_set_allocated_online(
      ::bilibili::broadcast::v1::RoomOnlineEvent* online);
  ::bilibili::broadcast::v1::RoomOnlineEvent* unsafe_arena_release_online();

  // .bilibili.broadcast.v1.RoomMessageEvent msg = 5;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::bilibili::broadcast::v1::RoomMessageEvent& msg() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::RoomMessageEvent* release_msg();
  ::bilibili::broadcast::v1::RoomMessageEvent* mutable_msg();
  void set_allocated_msg(::bilibili::broadcast::v1::RoomMessageEvent* msg);
  private:
  const ::bilibili::broadcast::v1::RoomMessageEvent& _internal_msg() const;
  ::bilibili::broadcast::v1::RoomMessageEvent* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::bilibili::broadcast::v1::RoomMessageEvent* msg);
  ::bilibili::broadcast::v1::RoomMessageEvent* unsafe_arena_release_msg();

  // .bilibili.broadcast.v1.RoomErrorEvent err = 6;
  bool has_err() const;
  private:
  bool _internal_has_err() const;
  public:
  void clear_err();
  const ::bilibili::broadcast::v1::RoomErrorEvent& err() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::v1::RoomErrorEvent* release_err();
  ::bilibili::broadcast::v1::RoomErrorEvent* mutable_err();
  void set_allocated_err(::bilibili::broadcast::v1::RoomErrorEvent* err);
  private:
  const ::bilibili::broadcast::v1::RoomErrorEvent& _internal_err() const;
  ::bilibili::broadcast::v1::RoomErrorEvent* _internal_mutable_err();
  public:
  void unsafe_arena_set_allocated_err(
      ::bilibili::broadcast::v1::RoomErrorEvent* err);
  ::bilibili::broadcast::v1::RoomErrorEvent* unsafe_arena_release_err();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:bilibili.broadcast.v1.RoomResp)
 private:
  class _Internal;
  void set_has_join();
  void set_has_leave();
  void set_has_online();
  void set_has_msg();
  void set_has_err();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::bilibili::broadcast::v1::RoomJoinEvent* join_;
    ::bilibili::broadcast::v1::RoomLeaveEvent* leave_;
    ::bilibili::broadcast::v1::RoomOnlineEvent* online_;
    ::bilibili::broadcast::v1::RoomMessageEvent* msg_;
    ::bilibili::broadcast::v1::RoomErrorEvent* err_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_room_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomJoinEvent

// -------------------------------------------------------------------

// RoomLeaveEvent

// -------------------------------------------------------------------

// RoomOnlineEvent

// int32 online = 1;
inline void RoomOnlineEvent::clear_online() {
  online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomOnlineEvent::_internal_online() const {
  return online_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomOnlineEvent::online() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomOnlineEvent.online)
  return _internal_online();
}
inline void RoomOnlineEvent::_internal_set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  online_ = value;
}
inline void RoomOnlineEvent::set_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.RoomOnlineEvent.online)
}

// int32 all_online = 2;
inline void RoomOnlineEvent::clear_all_online() {
  all_online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomOnlineEvent::_internal_all_online() const {
  return all_online_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomOnlineEvent::all_online() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomOnlineEvent.all_online)
  return _internal_all_online();
}
inline void RoomOnlineEvent::_internal_set_all_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  all_online_ = value;
}
inline void RoomOnlineEvent::set_all_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_all_online(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.RoomOnlineEvent.all_online)
}

// -------------------------------------------------------------------

// RoomMessageEvent

// string target_path = 1;
inline void RoomMessageEvent::clear_target_path() {
  target_path_.ClearToEmpty();
}
inline const std::string& RoomMessageEvent::target_path() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomMessageEvent.target_path)
  return _internal_target_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomMessageEvent::set_target_path(ArgT0&& arg0, ArgT... args) {
 
 target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.RoomMessageEvent.target_path)
}
inline std::string* RoomMessageEvent::mutable_target_path() {
  std::string* _s = _internal_mutable_target_path();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomMessageEvent.target_path)
  return _s;
}
inline const std::string& RoomMessageEvent::_internal_target_path() const {
  return target_path_.Get();
}
inline void RoomMessageEvent::_internal_set_target_path(const std::string& value) {
  
  target_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoomMessageEvent::_internal_mutable_target_path() {
  
  return target_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoomMessageEvent::release_target_path() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomMessageEvent.target_path)
  return target_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoomMessageEvent::set_allocated_target_path(std::string* target_path) {
  if (target_path != nullptr) {
    
  } else {
    
  }
  target_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.RoomMessageEvent.target_path)
}

// .google.protobuf.Any body = 2;
inline bool RoomMessageEvent::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool RoomMessageEvent::has_body() const {
  return _internal_has_body();
}
inline const PROTOBUF_NAMESPACE_ID::Any& RoomMessageEvent::_internal_body() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = body_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& RoomMessageEvent::body() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomMessageEvent.body)
  return _internal_body();
}
inline void RoomMessageEvent::unsafe_arena_set_allocated_body(
    PROTOBUF_NAMESPACE_ID::Any* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomMessageEvent.body)
}
inline PROTOBUF_NAMESPACE_ID::Any* RoomMessageEvent::release_body() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = body_;
  body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* RoomMessageEvent::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomMessageEvent.body)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = body_;
  body_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* RoomMessageEvent::_internal_mutable_body() {
  
  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    body_ = p;
  }
  return body_;
}
inline PROTOBUF_NAMESPACE_ID::Any* RoomMessageEvent::mutable_body() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomMessageEvent.body)
  return _msg;
}
inline void RoomMessageEvent::set_allocated_body(PROTOBUF_NAMESPACE_ID::Any* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body));
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.RoomMessageEvent.body)
}

// -------------------------------------------------------------------

// RoomErrorEvent

// .bilibili.rpc.Status status = 1;
inline bool RoomErrorEvent::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RoomErrorEvent::has_status() const {
  return _internal_has_status();
}
inline const ::bilibili::rpc::Status& RoomErrorEvent::_internal_status() const {
  const ::bilibili::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::rpc::Status&>(
      ::bilibili::rpc::_Status_default_instance_);
}
inline const ::bilibili::rpc::Status& RoomErrorEvent::status() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomErrorEvent.status)
  return _internal_status();
}
inline void RoomErrorEvent::unsafe_arena_set_allocated_status(
    ::bilibili::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomErrorEvent.status)
}
inline ::bilibili::rpc::Status* RoomErrorEvent::release_status() {
  
  ::bilibili::rpc::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::rpc::Status* RoomErrorEvent::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomErrorEvent.status)
  
  ::bilibili::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::bilibili::rpc::Status* RoomErrorEvent::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::rpc::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::bilibili::rpc::Status* RoomErrorEvent::mutable_status() {
  ::bilibili::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomErrorEvent.status)
  return _msg;
}
inline void RoomErrorEvent::set_allocated_status(::bilibili::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.RoomErrorEvent.status)
}

// -------------------------------------------------------------------

// RoomReq

// string id = 1;
inline void RoomReq::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RoomReq::id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomReq.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomReq::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.RoomReq.id)
}
inline std::string* RoomReq::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomReq.id)
  return _s;
}
inline const std::string& RoomReq::_internal_id() const {
  return id_.Get();
}
inline void RoomReq::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoomReq::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoomReq::release_id() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomReq.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoomReq::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.RoomReq.id)
}

// .bilibili.broadcast.v1.RoomJoinEvent join = 2;
inline bool RoomReq::_internal_has_join() const {
  return event_case() == kJoin;
}
inline bool RoomReq::has_join() const {
  return _internal_has_join();
}
inline void RoomReq::set_has_join() {
  _oneof_case_[0] = kJoin;
}
inline void RoomReq::clear_join() {
  if (_internal_has_join()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.join_;
    }
    clear_has_event();
  }
}
inline ::bilibili::broadcast::v1::RoomJoinEvent* RoomReq::release_join() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomReq.join)
  if (_internal_has_join()) {
    clear_has_event();
      ::bilibili::broadcast::v1::RoomJoinEvent* temp = event_.join_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bilibili::broadcast::v1::RoomJoinEvent& RoomReq::_internal_join() const {
  return _internal_has_join()
      ? *event_.join_
      : reinterpret_cast< ::bilibili::broadcast::v1::RoomJoinEvent&>(::bilibili::broadcast::v1::_RoomJoinEvent_default_instance_);
}
inline const ::bilibili::broadcast::v1::RoomJoinEvent& RoomReq::join() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomReq.join)
  return _internal_join();
}
inline ::bilibili::broadcast::v1::RoomJoinEvent* RoomReq::unsafe_arena_release_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bilibili.broadcast.v1.RoomReq.join)
  if (_internal_has_join()) {
    clear_has_event();
    ::bilibili::broadcast::v1::RoomJoinEvent* temp = event_.join_;
    event_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomReq::unsafe_arena_set_allocated_join(::bilibili::broadcast::v1::RoomJoinEvent* join) {
  clear_event();
  if (join) {
    set_has_join();
    event_.join_ = join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomReq.join)
}
inline ::bilibili::broadcast::v1::RoomJoinEvent* RoomReq::_internal_mutable_join() {
  if (!_internal_has_join()) {
    clear_event();
    set_has_join();
    event_.join_ = CreateMaybeMessage< ::bilibili::broadcast::v1::RoomJoinEvent >(GetArenaForAllocation());
  }
  return event_.join_;
}
inline ::bilibili::broadcast::v1::RoomJoinEvent* RoomReq::mutable_join() {
  ::bilibili::broadcast::v1::RoomJoinEvent* _msg = _internal_mutable_join();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomReq.join)
  return _msg;
}

// .bilibili.broadcast.v1.RoomLeaveEvent leave = 3;
inline bool RoomReq::_internal_has_leave() const {
  return event_case() == kLeave;
}
inline bool RoomReq::has_leave() const {
  return _internal_has_leave();
}
inline void RoomReq::set_has_leave() {
  _oneof_case_[0] = kLeave;
}
inline void RoomReq::clear_leave() {
  if (_internal_has_leave()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.leave_;
    }
    clear_has_event();
  }
}
inline ::bilibili::broadcast::v1::RoomLeaveEvent* RoomReq::release_leave() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomReq.leave)
  if (_internal_has_leave()) {
    clear_has_event();
      ::bilibili::broadcast::v1::RoomLeaveEvent* temp = event_.leave_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bilibili::broadcast::v1::RoomLeaveEvent& RoomReq::_internal_leave() const {
  return _internal_has_leave()
      ? *event_.leave_
      : reinterpret_cast< ::bilibili::broadcast::v1::RoomLeaveEvent&>(::bilibili::broadcast::v1::_RoomLeaveEvent_default_instance_);
}
inline const ::bilibili::broadcast::v1::RoomLeaveEvent& RoomReq::leave() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomReq.leave)
  return _internal_leave();
}
inline ::bilibili::broadcast::v1::RoomLeaveEvent* RoomReq::unsafe_arena_release_leave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bilibili.broadcast.v1.RoomReq.leave)
  if (_internal_has_leave()) {
    clear_has_event();
    ::bilibili::broadcast::v1::RoomLeaveEvent* temp = event_.leave_;
    event_.leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomReq::unsafe_arena_set_allocated_leave(::bilibili::broadcast::v1::RoomLeaveEvent* leave) {
  clear_event();
  if (leave) {
    set_has_leave();
    event_.leave_ = leave;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomReq.leave)
}
inline ::bilibili::broadcast::v1::RoomLeaveEvent* RoomReq::_internal_mutable_leave() {
  if (!_internal_has_leave()) {
    clear_event();
    set_has_leave();
    event_.leave_ = CreateMaybeMessage< ::bilibili::broadcast::v1::RoomLeaveEvent >(GetArenaForAllocation());
  }
  return event_.leave_;
}
inline ::bilibili::broadcast::v1::RoomLeaveEvent* RoomReq::mutable_leave() {
  ::bilibili::broadcast::v1::RoomLeaveEvent* _msg = _internal_mutable_leave();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomReq.leave)
  return _msg;
}

// .bilibili.broadcast.v1.RoomOnlineEvent online = 4;
inline bool RoomReq::_internal_has_online() const {
  return event_case() == kOnline;
}
inline bool RoomReq::has_online() const {
  return _internal_has_online();
}
inline void RoomReq::set_has_online() {
  _oneof_case_[0] = kOnline;
}
inline void RoomReq::clear_online() {
  if (_internal_has_online()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.online_;
    }
    clear_has_event();
  }
}
inline ::bilibili::broadcast::v1::RoomOnlineEvent* RoomReq::release_online() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomReq.online)
  if (_internal_has_online()) {
    clear_has_event();
      ::bilibili::broadcast::v1::RoomOnlineEvent* temp = event_.online_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.online_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bilibili::broadcast::v1::RoomOnlineEvent& RoomReq::_internal_online() const {
  return _internal_has_online()
      ? *event_.online_
      : reinterpret_cast< ::bilibili::broadcast::v1::RoomOnlineEvent&>(::bilibili::broadcast::v1::_RoomOnlineEvent_default_instance_);
}
inline const ::bilibili::broadcast::v1::RoomOnlineEvent& RoomReq::online() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomReq.online)
  return _internal_online();
}
inline ::bilibili::broadcast::v1::RoomOnlineEvent* RoomReq::unsafe_arena_release_online() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bilibili.broadcast.v1.RoomReq.online)
  if (_internal_has_online()) {
    clear_has_event();
    ::bilibili::broadcast::v1::RoomOnlineEvent* temp = event_.online_;
    event_.online_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomReq::unsafe_arena_set_allocated_online(::bilibili::broadcast::v1::RoomOnlineEvent* online) {
  clear_event();
  if (online) {
    set_has_online();
    event_.online_ = online;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomReq.online)
}
inline ::bilibili::broadcast::v1::RoomOnlineEvent* RoomReq::_internal_mutable_online() {
  if (!_internal_has_online()) {
    clear_event();
    set_has_online();
    event_.online_ = CreateMaybeMessage< ::bilibili::broadcast::v1::RoomOnlineEvent >(GetArenaForAllocation());
  }
  return event_.online_;
}
inline ::bilibili::broadcast::v1::RoomOnlineEvent* RoomReq::mutable_online() {
  ::bilibili::broadcast::v1::RoomOnlineEvent* _msg = _internal_mutable_online();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomReq.online)
  return _msg;
}

// .bilibili.broadcast.v1.RoomMessageEvent msg = 5;
inline bool RoomReq::_internal_has_msg() const {
  return event_case() == kMsg;
}
inline bool RoomReq::has_msg() const {
  return _internal_has_msg();
}
inline void RoomReq::set_has_msg() {
  _oneof_case_[0] = kMsg;
}
inline void RoomReq::clear_msg() {
  if (_internal_has_msg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.msg_;
    }
    clear_has_event();
  }
}
inline ::bilibili::broadcast::v1::RoomMessageEvent* RoomReq::release_msg() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomReq.msg)
  if (_internal_has_msg()) {
    clear_has_event();
      ::bilibili::broadcast::v1::RoomMessageEvent* temp = event_.msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bilibili::broadcast::v1::RoomMessageEvent& RoomReq::_internal_msg() const {
  return _internal_has_msg()
      ? *event_.msg_
      : reinterpret_cast< ::bilibili::broadcast::v1::RoomMessageEvent&>(::bilibili::broadcast::v1::_RoomMessageEvent_default_instance_);
}
inline const ::bilibili::broadcast::v1::RoomMessageEvent& RoomReq::msg() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomReq.msg)
  return _internal_msg();
}
inline ::bilibili::broadcast::v1::RoomMessageEvent* RoomReq::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bilibili.broadcast.v1.RoomReq.msg)
  if (_internal_has_msg()) {
    clear_has_event();
    ::bilibili::broadcast::v1::RoomMessageEvent* temp = event_.msg_;
    event_.msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomReq::unsafe_arena_set_allocated_msg(::bilibili::broadcast::v1::RoomMessageEvent* msg) {
  clear_event();
  if (msg) {
    set_has_msg();
    event_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomReq.msg)
}
inline ::bilibili::broadcast::v1::RoomMessageEvent* RoomReq::_internal_mutable_msg() {
  if (!_internal_has_msg()) {
    clear_event();
    set_has_msg();
    event_.msg_ = CreateMaybeMessage< ::bilibili::broadcast::v1::RoomMessageEvent >(GetArenaForAllocation());
  }
  return event_.msg_;
}
inline ::bilibili::broadcast::v1::RoomMessageEvent* RoomReq::mutable_msg() {
  ::bilibili::broadcast::v1::RoomMessageEvent* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomReq.msg)
  return _msg;
}

inline bool RoomReq::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void RoomReq::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline RoomReq::EventCase RoomReq::event_case() const {
  return RoomReq::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoomResp

// string id = 1;
inline void RoomResp::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RoomResp::id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomResp.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomResp::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.v1.RoomResp.id)
}
inline std::string* RoomResp::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomResp.id)
  return _s;
}
inline const std::string& RoomResp::_internal_id() const {
  return id_.Get();
}
inline void RoomResp::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RoomResp::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RoomResp::release_id() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomResp.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RoomResp::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.v1.RoomResp.id)
}

// .bilibili.broadcast.v1.RoomJoinEvent join = 2;
inline bool RoomResp::_internal_has_join() const {
  return event_case() == kJoin;
}
inline bool RoomResp::has_join() const {
  return _internal_has_join();
}
inline void RoomResp::set_has_join() {
  _oneof_case_[0] = kJoin;
}
inline void RoomResp::clear_join() {
  if (_internal_has_join()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.join_;
    }
    clear_has_event();
  }
}
inline ::bilibili::broadcast::v1::RoomJoinEvent* RoomResp::release_join() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomResp.join)
  if (_internal_has_join()) {
    clear_has_event();
      ::bilibili::broadcast::v1::RoomJoinEvent* temp = event_.join_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bilibili::broadcast::v1::RoomJoinEvent& RoomResp::_internal_join() const {
  return _internal_has_join()
      ? *event_.join_
      : reinterpret_cast< ::bilibili::broadcast::v1::RoomJoinEvent&>(::bilibili::broadcast::v1::_RoomJoinEvent_default_instance_);
}
inline const ::bilibili::broadcast::v1::RoomJoinEvent& RoomResp::join() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomResp.join)
  return _internal_join();
}
inline ::bilibili::broadcast::v1::RoomJoinEvent* RoomResp::unsafe_arena_release_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bilibili.broadcast.v1.RoomResp.join)
  if (_internal_has_join()) {
    clear_has_event();
    ::bilibili::broadcast::v1::RoomJoinEvent* temp = event_.join_;
    event_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomResp::unsafe_arena_set_allocated_join(::bilibili::broadcast::v1::RoomJoinEvent* join) {
  clear_event();
  if (join) {
    set_has_join();
    event_.join_ = join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomResp.join)
}
inline ::bilibili::broadcast::v1::RoomJoinEvent* RoomResp::_internal_mutable_join() {
  if (!_internal_has_join()) {
    clear_event();
    set_has_join();
    event_.join_ = CreateMaybeMessage< ::bilibili::broadcast::v1::RoomJoinEvent >(GetArenaForAllocation());
  }
  return event_.join_;
}
inline ::bilibili::broadcast::v1::RoomJoinEvent* RoomResp::mutable_join() {
  ::bilibili::broadcast::v1::RoomJoinEvent* _msg = _internal_mutable_join();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomResp.join)
  return _msg;
}

// .bilibili.broadcast.v1.RoomLeaveEvent leave = 3;
inline bool RoomResp::_internal_has_leave() const {
  return event_case() == kLeave;
}
inline bool RoomResp::has_leave() const {
  return _internal_has_leave();
}
inline void RoomResp::set_has_leave() {
  _oneof_case_[0] = kLeave;
}
inline void RoomResp::clear_leave() {
  if (_internal_has_leave()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.leave_;
    }
    clear_has_event();
  }
}
inline ::bilibili::broadcast::v1::RoomLeaveEvent* RoomResp::release_leave() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomResp.leave)
  if (_internal_has_leave()) {
    clear_has_event();
      ::bilibili::broadcast::v1::RoomLeaveEvent* temp = event_.leave_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bilibili::broadcast::v1::RoomLeaveEvent& RoomResp::_internal_leave() const {
  return _internal_has_leave()
      ? *event_.leave_
      : reinterpret_cast< ::bilibili::broadcast::v1::RoomLeaveEvent&>(::bilibili::broadcast::v1::_RoomLeaveEvent_default_instance_);
}
inline const ::bilibili::broadcast::v1::RoomLeaveEvent& RoomResp::leave() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomResp.leave)
  return _internal_leave();
}
inline ::bilibili::broadcast::v1::RoomLeaveEvent* RoomResp::unsafe_arena_release_leave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bilibili.broadcast.v1.RoomResp.leave)
  if (_internal_has_leave()) {
    clear_has_event();
    ::bilibili::broadcast::v1::RoomLeaveEvent* temp = event_.leave_;
    event_.leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomResp::unsafe_arena_set_allocated_leave(::bilibili::broadcast::v1::RoomLeaveEvent* leave) {
  clear_event();
  if (leave) {
    set_has_leave();
    event_.leave_ = leave;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomResp.leave)
}
inline ::bilibili::broadcast::v1::RoomLeaveEvent* RoomResp::_internal_mutable_leave() {
  if (!_internal_has_leave()) {
    clear_event();
    set_has_leave();
    event_.leave_ = CreateMaybeMessage< ::bilibili::broadcast::v1::RoomLeaveEvent >(GetArenaForAllocation());
  }
  return event_.leave_;
}
inline ::bilibili::broadcast::v1::RoomLeaveEvent* RoomResp::mutable_leave() {
  ::bilibili::broadcast::v1::RoomLeaveEvent* _msg = _internal_mutable_leave();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomResp.leave)
  return _msg;
}

// .bilibili.broadcast.v1.RoomOnlineEvent online = 4;
inline bool RoomResp::_internal_has_online() const {
  return event_case() == kOnline;
}
inline bool RoomResp::has_online() const {
  return _internal_has_online();
}
inline void RoomResp::set_has_online() {
  _oneof_case_[0] = kOnline;
}
inline void RoomResp::clear_online() {
  if (_internal_has_online()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.online_;
    }
    clear_has_event();
  }
}
inline ::bilibili::broadcast::v1::RoomOnlineEvent* RoomResp::release_online() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomResp.online)
  if (_internal_has_online()) {
    clear_has_event();
      ::bilibili::broadcast::v1::RoomOnlineEvent* temp = event_.online_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.online_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bilibili::broadcast::v1::RoomOnlineEvent& RoomResp::_internal_online() const {
  return _internal_has_online()
      ? *event_.online_
      : reinterpret_cast< ::bilibili::broadcast::v1::RoomOnlineEvent&>(::bilibili::broadcast::v1::_RoomOnlineEvent_default_instance_);
}
inline const ::bilibili::broadcast::v1::RoomOnlineEvent& RoomResp::online() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomResp.online)
  return _internal_online();
}
inline ::bilibili::broadcast::v1::RoomOnlineEvent* RoomResp::unsafe_arena_release_online() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bilibili.broadcast.v1.RoomResp.online)
  if (_internal_has_online()) {
    clear_has_event();
    ::bilibili::broadcast::v1::RoomOnlineEvent* temp = event_.online_;
    event_.online_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomResp::unsafe_arena_set_allocated_online(::bilibili::broadcast::v1::RoomOnlineEvent* online) {
  clear_event();
  if (online) {
    set_has_online();
    event_.online_ = online;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomResp.online)
}
inline ::bilibili::broadcast::v1::RoomOnlineEvent* RoomResp::_internal_mutable_online() {
  if (!_internal_has_online()) {
    clear_event();
    set_has_online();
    event_.online_ = CreateMaybeMessage< ::bilibili::broadcast::v1::RoomOnlineEvent >(GetArenaForAllocation());
  }
  return event_.online_;
}
inline ::bilibili::broadcast::v1::RoomOnlineEvent* RoomResp::mutable_online() {
  ::bilibili::broadcast::v1::RoomOnlineEvent* _msg = _internal_mutable_online();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomResp.online)
  return _msg;
}

// .bilibili.broadcast.v1.RoomMessageEvent msg = 5;
inline bool RoomResp::_internal_has_msg() const {
  return event_case() == kMsg;
}
inline bool RoomResp::has_msg() const {
  return _internal_has_msg();
}
inline void RoomResp::set_has_msg() {
  _oneof_case_[0] = kMsg;
}
inline void RoomResp::clear_msg() {
  if (_internal_has_msg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.msg_;
    }
    clear_has_event();
  }
}
inline ::bilibili::broadcast::v1::RoomMessageEvent* RoomResp::release_msg() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomResp.msg)
  if (_internal_has_msg()) {
    clear_has_event();
      ::bilibili::broadcast::v1::RoomMessageEvent* temp = event_.msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bilibili::broadcast::v1::RoomMessageEvent& RoomResp::_internal_msg() const {
  return _internal_has_msg()
      ? *event_.msg_
      : reinterpret_cast< ::bilibili::broadcast::v1::RoomMessageEvent&>(::bilibili::broadcast::v1::_RoomMessageEvent_default_instance_);
}
inline const ::bilibili::broadcast::v1::RoomMessageEvent& RoomResp::msg() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomResp.msg)
  return _internal_msg();
}
inline ::bilibili::broadcast::v1::RoomMessageEvent* RoomResp::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bilibili.broadcast.v1.RoomResp.msg)
  if (_internal_has_msg()) {
    clear_has_event();
    ::bilibili::broadcast::v1::RoomMessageEvent* temp = event_.msg_;
    event_.msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomResp::unsafe_arena_set_allocated_msg(::bilibili::broadcast::v1::RoomMessageEvent* msg) {
  clear_event();
  if (msg) {
    set_has_msg();
    event_.msg_ = msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomResp.msg)
}
inline ::bilibili::broadcast::v1::RoomMessageEvent* RoomResp::_internal_mutable_msg() {
  if (!_internal_has_msg()) {
    clear_event();
    set_has_msg();
    event_.msg_ = CreateMaybeMessage< ::bilibili::broadcast::v1::RoomMessageEvent >(GetArenaForAllocation());
  }
  return event_.msg_;
}
inline ::bilibili::broadcast::v1::RoomMessageEvent* RoomResp::mutable_msg() {
  ::bilibili::broadcast::v1::RoomMessageEvent* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomResp.msg)
  return _msg;
}

// .bilibili.broadcast.v1.RoomErrorEvent err = 6;
inline bool RoomResp::_internal_has_err() const {
  return event_case() == kErr;
}
inline bool RoomResp::has_err() const {
  return _internal_has_err();
}
inline void RoomResp::set_has_err() {
  _oneof_case_[0] = kErr;
}
inline void RoomResp::clear_err() {
  if (_internal_has_err()) {
    if (GetArenaForAllocation() == nullptr) {
      delete event_.err_;
    }
    clear_has_event();
  }
}
inline ::bilibili::broadcast::v1::RoomErrorEvent* RoomResp::release_err() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.v1.RoomResp.err)
  if (_internal_has_err()) {
    clear_has_event();
      ::bilibili::broadcast::v1::RoomErrorEvent* temp = event_.err_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.err_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bilibili::broadcast::v1::RoomErrorEvent& RoomResp::_internal_err() const {
  return _internal_has_err()
      ? *event_.err_
      : reinterpret_cast< ::bilibili::broadcast::v1::RoomErrorEvent&>(::bilibili::broadcast::v1::_RoomErrorEvent_default_instance_);
}
inline const ::bilibili::broadcast::v1::RoomErrorEvent& RoomResp::err() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.v1.RoomResp.err)
  return _internal_err();
}
inline ::bilibili::broadcast::v1::RoomErrorEvent* RoomResp::unsafe_arena_release_err() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bilibili.broadcast.v1.RoomResp.err)
  if (_internal_has_err()) {
    clear_has_event();
    ::bilibili::broadcast::v1::RoomErrorEvent* temp = event_.err_;
    event_.err_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RoomResp::unsafe_arena_set_allocated_err(::bilibili::broadcast::v1::RoomErrorEvent* err) {
  clear_event();
  if (err) {
    set_has_err();
    event_.err_ = err;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.v1.RoomResp.err)
}
inline ::bilibili::broadcast::v1::RoomErrorEvent* RoomResp::_internal_mutable_err() {
  if (!_internal_has_err()) {
    clear_event();
    set_has_err();
    event_.err_ = CreateMaybeMessage< ::bilibili::broadcast::v1::RoomErrorEvent >(GetArenaForAllocation());
  }
  return event_.err_;
}
inline ::bilibili::broadcast::v1::RoomErrorEvent* RoomResp::mutable_err() {
  ::bilibili::broadcast::v1::RoomErrorEvent* _msg = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.v1.RoomResp.err)
  return _msg;
}

inline bool RoomResp::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void RoomResp::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline RoomResp::EventCase RoomResp::event_case() const {
  return RoomResp::EventCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace broadcast
}  // namespace bilibili

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_room_2eproto
