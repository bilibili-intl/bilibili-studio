// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DMData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DMData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DMData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DMData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DMData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DMData_2eproto;
namespace bilibili {
namespace broadcast {
namespace message {
namespace intl {
class Animation;
struct AnimationDefaultTypeInternal;
extern AnimationDefaultTypeInternal _Animation_default_instance_;
class Author;
struct AuthorDefaultTypeInternal;
extern AuthorDefaultTypeInternal _Author_default_instance_;
class BlockInfo;
struct BlockInfoDefaultTypeInternal;
extern BlockInfoDefaultTypeInternal _BlockInfo_default_instance_;
class Combo;
struct ComboDefaultTypeInternal;
extern ComboDefaultTypeInternal _Combo_default_instance_;
class ComboStyle;
struct ComboStyleDefaultTypeInternal;
extern ComboStyleDefaultTypeInternal _ComboStyle_default_instance_;
class DmEventReply;
struct DmEventReplyDefaultTypeInternal;
extern DmEventReplyDefaultTypeInternal _DmEventReply_default_instance_;
class DmItem;
struct DmItemDefaultTypeInternal;
extern DmItemDefaultTypeInternal _DmItem_default_instance_;
class MessageItem;
struct MessageItemDefaultTypeInternal;
extern MessageItemDefaultTypeInternal _MessageItem_default_instance_;
class PopupInfo;
struct PopupInfoDefaultTypeInternal;
extern PopupInfoDefaultTypeInternal _PopupInfo_default_instance_;
class PopupInfoItem;
struct PopupInfoItemDefaultTypeInternal;
extern PopupInfoItemDefaultTypeInternal _PopupInfoItem_default_instance_;
class Sticker;
struct StickerDefaultTypeInternal;
extern StickerDefaultTypeInternal _Sticker_default_instance_;
class Style;
struct StyleDefaultTypeInternal;
extern StyleDefaultTypeInternal _Style_default_instance_;
class TopUser;
struct TopUserDefaultTypeInternal;
extern TopUserDefaultTypeInternal _TopUser_default_instance_;
class Treasure;
struct TreasureDefaultTypeInternal;
extern TreasureDefaultTypeInternal _Treasure_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace intl
}  // namespace message
}  // namespace broadcast
}  // namespace bilibili
PROTOBUF_NAMESPACE_OPEN
template<> ::bilibili::broadcast::message::intl::Animation* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::Animation>(Arena*);
template<> ::bilibili::broadcast::message::intl::Author* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::Author>(Arena*);
template<> ::bilibili::broadcast::message::intl::BlockInfo* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::BlockInfo>(Arena*);
template<> ::bilibili::broadcast::message::intl::Combo* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::Combo>(Arena*);
template<> ::bilibili::broadcast::message::intl::ComboStyle* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::ComboStyle>(Arena*);
template<> ::bilibili::broadcast::message::intl::DmEventReply* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::DmEventReply>(Arena*);
template<> ::bilibili::broadcast::message::intl::DmItem* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::DmItem>(Arena*);
template<> ::bilibili::broadcast::message::intl::MessageItem* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::MessageItem>(Arena*);
template<> ::bilibili::broadcast::message::intl::PopupInfo* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::PopupInfo>(Arena*);
template<> ::bilibili::broadcast::message::intl::PopupInfoItem* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::PopupInfoItem>(Arena*);
template<> ::bilibili::broadcast::message::intl::Sticker* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::Sticker>(Arena*);
template<> ::bilibili::broadcast::message::intl::Style* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::Style>(Arena*);
template<> ::bilibili::broadcast::message::intl::TopUser* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::TopUser>(Arena*);
template<> ::bilibili::broadcast::message::intl::Treasure* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::Treasure>(Arena*);
template<> ::bilibili::broadcast::message::intl::User* Arena::CreateMaybeMessage<::bilibili::broadcast::message::intl::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bilibili {
namespace broadcast {
namespace message {
namespace intl {

enum DmType : int {
  DefaultType = 0,
  EnterRoom = 1,
  LiveOpen = 2,
  LiveClose = 3,
  Reply = 4,
  TreasureSticker = 5,
  RoomTopUser = 6,
  ActionMsg = 7,
  ComboMsg = 8,
  LiveKeyChange = 9,
  MuteMsg = 10,
  WarnMsg = 11,
  PopupMsg = 12,
  BlockMsg = 13,
  DmType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DmType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DmType_IsValid(int value);
constexpr DmType DmType_MIN = DefaultType;
constexpr DmType DmType_MAX = BlockMsg;
constexpr int DmType_ARRAYSIZE = DmType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DmType_descriptor();
template<typename T>
inline const std::string& DmType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DmType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DmType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DmType_descriptor(), enum_t_value);
}
inline bool DmType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DmType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DmType>(
    DmType_descriptor(), name, value);
}
enum MessageItemType : int {
  Default = 0,
  Text = 1,
  Icon = 2,
  MessageItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageItemType_IsValid(int value);
constexpr MessageItemType MessageItemType_MIN = Default;
constexpr MessageItemType MessageItemType_MAX = Icon;
constexpr int MessageItemType_ARRAYSIZE = MessageItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageItemType_descriptor();
template<typename T>
inline const std::string& MessageItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageItemType_descriptor(), enum_t_value);
}
inline bool MessageItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageItemType>(
    MessageItemType_descriptor(), name, value);
}
enum MessageItemSubType : int {
  DefaultSubType = 0,
  Name = 1,
  Gift = 2,
  GiftNum = 3,
  GiftIcon = 4,
  MessageItemSubType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageItemSubType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageItemSubType_IsValid(int value);
constexpr MessageItemSubType MessageItemSubType_MIN = DefaultSubType;
constexpr MessageItemSubType MessageItemSubType_MAX = GiftIcon;
constexpr int MessageItemSubType_ARRAYSIZE = MessageItemSubType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageItemSubType_descriptor();
template<typename T>
inline const std::string& MessageItemSubType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageItemSubType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageItemSubType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageItemSubType_descriptor(), enum_t_value);
}
inline bool MessageItemSubType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageItemSubType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageItemSubType>(
    MessageItemSubType_descriptor(), name, value);
}
enum PopupItemType : int {
  PopupItemTypeDefault = 0,
  PopupItemTypeText = 1,
  PopupItemTypeIcon = 2,
  PopupItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PopupItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PopupItemType_IsValid(int value);
constexpr PopupItemType PopupItemType_MIN = PopupItemTypeDefault;
constexpr PopupItemType PopupItemType_MAX = PopupItemTypeIcon;
constexpr int PopupItemType_ARRAYSIZE = PopupItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PopupItemType_descriptor();
template<typename T>
inline const std::string& PopupItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PopupItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PopupItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PopupItemType_descriptor(), enum_t_value);
}
inline bool PopupItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PopupItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PopupItemType>(
    PopupItemType_descriptor(), name, value);
}
enum PopupItemPosition : int {
  PopupItemPositionDefault = 0,
  PopupItemPositionTitle = 1,
  PopupItemPositionContent = 2,
  PopupItemPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PopupItemPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PopupItemPosition_IsValid(int value);
constexpr PopupItemPosition PopupItemPosition_MIN = PopupItemPositionDefault;
constexpr PopupItemPosition PopupItemPosition_MAX = PopupItemPositionContent;
constexpr int PopupItemPosition_ARRAYSIZE = PopupItemPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PopupItemPosition_descriptor();
template<typename T>
inline const std::string& PopupItemPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PopupItemPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PopupItemPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PopupItemPosition_descriptor(), enum_t_value);
}
inline bool PopupItemPosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PopupItemPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PopupItemPosition>(
    PopupItemPosition_descriptor(), name, value);
}
// ===================================================================

class DmItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.DmItem) */ {
 public:
  inline DmItem() : DmItem(nullptr) {}
  ~DmItem() override;
  explicit constexpr DmItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmItem(const DmItem& from);
  DmItem(DmItem&& from) noexcept
    : DmItem() {
    *this = ::std::move(from);
  }

  inline DmItem& operator=(const DmItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmItem& operator=(DmItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmItem* internal_default_instance() {
    return reinterpret_cast<const DmItem*>(
               &_DmItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DmItem& a, DmItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DmItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DmItem* New() const final {
    return new DmItem();
  }

  DmItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DmItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DmItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.DmItem";
  }
  protected:
  explicit DmItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageListFieldNumber = 11,
    kCombosFieldNumber = 12,
    kMessageFieldNumber = 2,
    kMsgIdFieldNumber = 13,
    kLiveKeyFieldNumber = 14,
    kAuthorFieldNumber = 3,
    kReplyToFieldNumber = 7,
    kStyleFieldNumber = 8,
    kStickerFieldNumber = 9,
    kTopUserFieldNumber = 10,
    kPopupInfoFieldNumber = 15,
    kBlockInfoFieldNumber = 16,
    kRoomIDFieldNumber = 4,
    kDelayFieldNumber = 5,
    kCTimeFieldNumber = 6,
    kCmdFieldNumber = 1,
  };
  // repeated .bilibili.broadcast.message.intl.MessageItem MessageList = 11;
  int messagelist_size() const;
  private:
  int _internal_messagelist_size() const;
  public:
  void clear_messagelist();
  ::bilibili::broadcast::message::intl::MessageItem* mutable_messagelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::MessageItem >*
      mutable_messagelist();
  private:
  const ::bilibili::broadcast::message::intl::MessageItem& _internal_messagelist(int index) const;
  ::bilibili::broadcast::message::intl::MessageItem* _internal_add_messagelist();
  public:
  const ::bilibili::broadcast::message::intl::MessageItem& messagelist(int index) const;
  ::bilibili::broadcast::message::intl::MessageItem* add_messagelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::MessageItem >&
      messagelist() const;

  // repeated .bilibili.broadcast.message.intl.Combo Combos = 12 [json_name = "combos"];
  int combos_size() const;
  private:
  int _internal_combos_size() const;
  public:
  void clear_combos();
  ::bilibili::broadcast::message::intl::Combo* mutable_combos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::Combo >*
      mutable_combos();
  private:
  const ::bilibili::broadcast::message::intl::Combo& _internal_combos(int index) const;
  ::bilibili::broadcast::message::intl::Combo* _internal_add_combos();
  public:
  const ::bilibili::broadcast::message::intl::Combo& combos(int index) const;
  ::bilibili::broadcast::message::intl::Combo* add_combos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::Combo >&
      combos() const;

  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string msg_id = 13;
  void clear_msg_id();
  const std::string& msg_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg_id();
  void set_allocated_msg_id(std::string* msg_id);
  private:
  const std::string& _internal_msg_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_id(const std::string& value);
  std::string* _internal_mutable_msg_id();
  public:

  // string live_key = 14;
  void clear_live_key();
  const std::string& live_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_live_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_live_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_live_key();
  void set_allocated_live_key(std::string* live_key);
  private:
  const std::string& _internal_live_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_live_key(const std::string& value);
  std::string* _internal_mutable_live_key();
  public:

  // .bilibili.broadcast.message.intl.Author Author = 3;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::bilibili::broadcast::message::intl::Author& author() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::Author* release_author();
  ::bilibili::broadcast::message::intl::Author* mutable_author();
  void set_allocated_author(::bilibili::broadcast::message::intl::Author* author);
  private:
  const ::bilibili::broadcast::message::intl::Author& _internal_author() const;
  ::bilibili::broadcast::message::intl::Author* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::bilibili::broadcast::message::intl::Author* author);
  ::bilibili::broadcast::message::intl::Author* unsafe_arena_release_author();

  // .bilibili.broadcast.message.intl.Author ReplyTo = 7;
  bool has_replyto() const;
  private:
  bool _internal_has_replyto() const;
  public:
  void clear_replyto();
  const ::bilibili::broadcast::message::intl::Author& replyto() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::Author* release_replyto();
  ::bilibili::broadcast::message::intl::Author* mutable_replyto();
  void set_allocated_replyto(::bilibili::broadcast::message::intl::Author* replyto);
  private:
  const ::bilibili::broadcast::message::intl::Author& _internal_replyto() const;
  ::bilibili::broadcast::message::intl::Author* _internal_mutable_replyto();
  public:
  void unsafe_arena_set_allocated_replyto(
      ::bilibili::broadcast::message::intl::Author* replyto);
  ::bilibili::broadcast::message::intl::Author* unsafe_arena_release_replyto();

  // .bilibili.broadcast.message.intl.Style Style = 8;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::bilibili::broadcast::message::intl::Style& style() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::Style* release_style();
  ::bilibili::broadcast::message::intl::Style* mutable_style();
  void set_allocated_style(::bilibili::broadcast::message::intl::Style* style);
  private:
  const ::bilibili::broadcast::message::intl::Style& _internal_style() const;
  ::bilibili::broadcast::message::intl::Style* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::bilibili::broadcast::message::intl::Style* style);
  ::bilibili::broadcast::message::intl::Style* unsafe_arena_release_style();

  // .bilibili.broadcast.message.intl.Sticker Sticker = 9;
  bool has_sticker() const;
  private:
  bool _internal_has_sticker() const;
  public:
  void clear_sticker();
  const ::bilibili::broadcast::message::intl::Sticker& sticker() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::Sticker* release_sticker();
  ::bilibili::broadcast::message::intl::Sticker* mutable_sticker();
  void set_allocated_sticker(::bilibili::broadcast::message::intl::Sticker* sticker);
  private:
  const ::bilibili::broadcast::message::intl::Sticker& _internal_sticker() const;
  ::bilibili::broadcast::message::intl::Sticker* _internal_mutable_sticker();
  public:
  void unsafe_arena_set_allocated_sticker(
      ::bilibili::broadcast::message::intl::Sticker* sticker);
  ::bilibili::broadcast::message::intl::Sticker* unsafe_arena_release_sticker();

  // .bilibili.broadcast.message.intl.TopUser TopUser = 10;
  bool has_topuser() const;
  private:
  bool _internal_has_topuser() const;
  public:
  void clear_topuser();
  const ::bilibili::broadcast::message::intl::TopUser& topuser() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::TopUser* release_topuser();
  ::bilibili::broadcast::message::intl::TopUser* mutable_topuser();
  void set_allocated_topuser(::bilibili::broadcast::message::intl::TopUser* topuser);
  private:
  const ::bilibili::broadcast::message::intl::TopUser& _internal_topuser() const;
  ::bilibili::broadcast::message::intl::TopUser* _internal_mutable_topuser();
  public:
  void unsafe_arena_set_allocated_topuser(
      ::bilibili::broadcast::message::intl::TopUser* topuser);
  ::bilibili::broadcast::message::intl::TopUser* unsafe_arena_release_topuser();

  // .bilibili.broadcast.message.intl.PopupInfo popup_info = 15;
  bool has_popup_info() const;
  private:
  bool _internal_has_popup_info() const;
  public:
  void clear_popup_info();
  const ::bilibili::broadcast::message::intl::PopupInfo& popup_info() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::PopupInfo* release_popup_info();
  ::bilibili::broadcast::message::intl::PopupInfo* mutable_popup_info();
  void set_allocated_popup_info(::bilibili::broadcast::message::intl::PopupInfo* popup_info);
  private:
  const ::bilibili::broadcast::message::intl::PopupInfo& _internal_popup_info() const;
  ::bilibili::broadcast::message::intl::PopupInfo* _internal_mutable_popup_info();
  public:
  void unsafe_arena_set_allocated_popup_info(
      ::bilibili::broadcast::message::intl::PopupInfo* popup_info);
  ::bilibili::broadcast::message::intl::PopupInfo* unsafe_arena_release_popup_info();

  // .bilibili.broadcast.message.intl.BlockInfo block_info = 16;
  bool has_block_info() const;
  private:
  bool _internal_has_block_info() const;
  public:
  void clear_block_info();
  const ::bilibili::broadcast::message::intl::BlockInfo& block_info() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::BlockInfo* release_block_info();
  ::bilibili::broadcast::message::intl::BlockInfo* mutable_block_info();
  void set_allocated_block_info(::bilibili::broadcast::message::intl::BlockInfo* block_info);
  private:
  const ::bilibili::broadcast::message::intl::BlockInfo& _internal_block_info() const;
  ::bilibili::broadcast::message::intl::BlockInfo* _internal_mutable_block_info();
  public:
  void unsafe_arena_set_allocated_block_info(
      ::bilibili::broadcast::message::intl::BlockInfo* block_info);
  ::bilibili::broadcast::message::intl::BlockInfo* unsafe_arena_release_block_info();

  // int64 RoomID = 4;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 Delay = 5;
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::int64 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 CTime = 6;
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::int64 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .bilibili.broadcast.message.intl.DmType Cmd = 1;
  void clear_cmd();
  ::bilibili::broadcast::message::intl::DmType cmd() const;
  void set_cmd(::bilibili::broadcast::message::intl::DmType value);
  private:
  ::bilibili::broadcast::message::intl::DmType _internal_cmd() const;
  void _internal_set_cmd(::bilibili::broadcast::message::intl::DmType value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.DmItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::MessageItem > messagelist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::Combo > combos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr live_key_;
  ::bilibili::broadcast::message::intl::Author* author_;
  ::bilibili::broadcast::message::intl::Author* replyto_;
  ::bilibili::broadcast::message::intl::Style* style_;
  ::bilibili::broadcast::message::intl::Sticker* sticker_;
  ::bilibili::broadcast::message::intl::TopUser* topuser_;
  ::bilibili::broadcast::message::intl::PopupInfo* popup_info_;
  ::bilibili::broadcast::message::intl::BlockInfo* block_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int64 delay_;
  ::PROTOBUF_NAMESPACE_ID::int64 ctime_;
  int cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class MessageItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.MessageItem) */ {
 public:
  inline MessageItem() : MessageItem(nullptr) {}
  ~MessageItem() override;
  explicit constexpr MessageItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageItem(const MessageItem& from);
  MessageItem(MessageItem&& from) noexcept
    : MessageItem() {
    *this = ::std::move(from);
  }

  inline MessageItem& operator=(const MessageItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageItem& operator=(MessageItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageItem* internal_default_instance() {
    return reinterpret_cast<const MessageItem*>(
               &_MessageItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageItem& a, MessageItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageItem* New() const final {
    return new MessageItem();
  }

  MessageItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.MessageItem";
  }
  protected:
  explicit MessageItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kColorFieldNumber = 3,
    kIconNameFieldNumber = 5,
    kIconUrlFieldNumber = 6,
    kBgColorFieldNumber = 9,
    kTypeFieldNumber = 1,
    kBoldFieldNumber = 4,
    kWidthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kTreasureIdFieldNumber = 11,
    kSubTypeFieldNumber = 10,
  };
  // string Content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string Color = 3;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // string IconName = 5;
  void clear_iconname();
  const std::string& iconname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iconname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iconname();
  PROTOBUF_MUST_USE_RESULT std::string* release_iconname();
  void set_allocated_iconname(std::string* iconname);
  private:
  const std::string& _internal_iconname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iconname(const std::string& value);
  std::string* _internal_mutable_iconname();
  public:

  // string IconUrl = 6;
  void clear_iconurl();
  const std::string& iconurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iconurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iconurl();
  PROTOBUF_MUST_USE_RESULT std::string* release_iconurl();
  void set_allocated_iconurl(std::string* iconurl);
  private:
  const std::string& _internal_iconurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iconurl(const std::string& value);
  std::string* _internal_mutable_iconurl();
  public:

  // string BgColor = 9;
  void clear_bgcolor();
  const std::string& bgcolor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgcolor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgcolor();
  PROTOBUF_MUST_USE_RESULT std::string* release_bgcolor();
  void set_allocated_bgcolor(std::string* bgcolor);
  private:
  const std::string& _internal_bgcolor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgcolor(const std::string& value);
  std::string* _internal_mutable_bgcolor();
  public:

  // .bilibili.broadcast.message.intl.MessageItemType Type = 1;
  void clear_type();
  ::bilibili::broadcast::message::intl::MessageItemType type() const;
  void set_type(::bilibili::broadcast::message::intl::MessageItemType value);
  private:
  ::bilibili::broadcast::message::intl::MessageItemType _internal_type() const;
  void _internal_set_type(::bilibili::broadcast::message::intl::MessageItemType value);
  public:

  // bool Bold = 4;
  void clear_bold();
  bool bold() const;
  void set_bold(bool value);
  private:
  bool _internal_bold() const;
  void _internal_set_bold(bool value);
  public:

  // int32 Width = 7;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Height = 8;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 treasure_id = 11;
  void clear_treasure_id();
  ::PROTOBUF_NAMESPACE_ID::int64 treasure_id() const;
  void set_treasure_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_treasure_id() const;
  void _internal_set_treasure_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .bilibili.broadcast.message.intl.MessageItemSubType SubType = 10;
  void clear_subtype();
  ::bilibili::broadcast::message::intl::MessageItemSubType subtype() const;
  void set_subtype(::bilibili::broadcast::message::intl::MessageItemSubType value);
  private:
  ::bilibili::broadcast::message::intl::MessageItemSubType _internal_subtype() const;
  void _internal_set_subtype(::bilibili::broadcast::message::intl::MessageItemSubType value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.MessageItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iconname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iconurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgcolor_;
  int type_;
  bool bold_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int64 treasure_id_;
  int subtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class Combo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.Combo) */ {
 public:
  inline Combo() : Combo(nullptr) {}
  ~Combo() override;
  explicit constexpr Combo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Combo(const Combo& from);
  Combo(Combo&& from) noexcept
    : Combo() {
    *this = ::std::move(from);
  }

  inline Combo& operator=(const Combo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Combo& operator=(Combo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Combo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Combo* internal_default_instance() {
    return reinterpret_cast<const Combo*>(
               &_Combo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Combo& a, Combo& b) {
    a.Swap(&b);
  }
  inline void Swap(Combo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Combo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Combo* New() const final {
    return new Combo();
  }

  Combo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Combo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Combo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Combo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Combo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.Combo";
  }
  protected:
  explicit Combo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 2,
    kComboIdFieldNumber = 5,
    kAuthorFieldNumber = 1,
    kTreasureFieldNumber = 3,
    kStyleFieldNumber = 4,
  };
  // string action = 2 [json_name = "action"];
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_MUST_USE_RESULT std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string combo_id = 5 [json_name = "combo_id"];
  void clear_combo_id();
  const std::string& combo_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combo_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combo_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_combo_id();
  void set_allocated_combo_id(std::string* combo_id);
  private:
  const std::string& _internal_combo_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combo_id(const std::string& value);
  std::string* _internal_mutable_combo_id();
  public:

  // .bilibili.broadcast.message.intl.Author author = 1 [json_name = "author"];
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const ::bilibili::broadcast::message::intl::Author& author() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::Author* release_author();
  ::bilibili::broadcast::message::intl::Author* mutable_author();
  void set_allocated_author(::bilibili::broadcast::message::intl::Author* author);
  private:
  const ::bilibili::broadcast::message::intl::Author& _internal_author() const;
  ::bilibili::broadcast::message::intl::Author* _internal_mutable_author();
  public:
  void unsafe_arena_set_allocated_author(
      ::bilibili::broadcast::message::intl::Author* author);
  ::bilibili::broadcast::message::intl::Author* unsafe_arena_release_author();

  // .bilibili.broadcast.message.intl.Treasure treasure = 3 [json_name = "treasure"];
  bool has_treasure() const;
  private:
  bool _internal_has_treasure() const;
  public:
  void clear_treasure();
  const ::bilibili::broadcast::message::intl::Treasure& treasure() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::Treasure* release_treasure();
  ::bilibili::broadcast::message::intl::Treasure* mutable_treasure();
  void set_allocated_treasure(::bilibili::broadcast::message::intl::Treasure* treasure);
  private:
  const ::bilibili::broadcast::message::intl::Treasure& _internal_treasure() const;
  ::bilibili::broadcast::message::intl::Treasure* _internal_mutable_treasure();
  public:
  void unsafe_arena_set_allocated_treasure(
      ::bilibili::broadcast::message::intl::Treasure* treasure);
  ::bilibili::broadcast::message::intl::Treasure* unsafe_arena_release_treasure();

  // .bilibili.broadcast.message.intl.ComboStyle style = 4 [json_name = "style"];
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::bilibili::broadcast::message::intl::ComboStyle& style() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::ComboStyle* release_style();
  ::bilibili::broadcast::message::intl::ComboStyle* mutable_style();
  void set_allocated_style(::bilibili::broadcast::message::intl::ComboStyle* style);
  private:
  const ::bilibili::broadcast::message::intl::ComboStyle& _internal_style() const;
  ::bilibili::broadcast::message::intl::ComboStyle* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::bilibili::broadcast::message::intl::ComboStyle* style);
  ::bilibili::broadcast::message::intl::ComboStyle* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.Combo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combo_id_;
  ::bilibili::broadcast::message::intl::Author* author_;
  ::bilibili::broadcast::message::intl::Treasure* treasure_;
  ::bilibili::broadcast::message::intl::ComboStyle* style_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class Treasure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.Treasure) */ {
 public:
  inline Treasure() : Treasure(nullptr) {}
  ~Treasure() override;
  explicit constexpr Treasure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Treasure(const Treasure& from);
  Treasure(Treasure&& from) noexcept
    : Treasure() {
    *this = ::std::move(from);
  }

  inline Treasure& operator=(const Treasure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Treasure& operator=(Treasure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Treasure& default_instance() {
    return *internal_default_instance();
  }
  static inline const Treasure* internal_default_instance() {
    return reinterpret_cast<const Treasure*>(
               &_Treasure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Treasure& a, Treasure& b) {
    a.Swap(&b);
  }
  inline void Swap(Treasure* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Treasure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Treasure* New() const final {
    return new Treasure();
  }

  Treasure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Treasure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Treasure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Treasure& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Treasure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.Treasure";
  }
  protected:
  explicit Treasure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kIconFieldNumber = 3,
    kAnimationFieldNumber = 6,
    kIdFieldNumber = 1,
    kNumberFieldNumber = 4,
    kStarsFieldNumber = 5,
    kAnimationTypeFieldNumber = 7,
  };
  // string title = 2 [json_name = "title"];
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_MUST_USE_RESULT std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string icon = 3 [json_name = "icon"];
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_MUST_USE_RESULT std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // .bilibili.broadcast.message.intl.Animation animation = 6 [json_name = "animation"];
  bool has_animation() const;
  private:
  bool _internal_has_animation() const;
  public:
  void clear_animation();
  const ::bilibili::broadcast::message::intl::Animation& animation() const;
  PROTOBUF_MUST_USE_RESULT ::bilibili::broadcast::message::intl::Animation* release_animation();
  ::bilibili::broadcast::message::intl::Animation* mutable_animation();
  void set_allocated_animation(::bilibili::broadcast::message::intl::Animation* animation);
  private:
  const ::bilibili::broadcast::message::intl::Animation& _internal_animation() const;
  ::bilibili::broadcast::message::intl::Animation* _internal_mutable_animation();
  public:
  void unsafe_arena_set_allocated_animation(
      ::bilibili::broadcast::message::intl::Animation* animation);
  ::bilibili::broadcast::message::intl::Animation* unsafe_arena_release_animation();

  // int64 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 number = 4 [json_name = "number"];
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 stars = 5 [json_name = "stars"];
  void clear_stars();
  ::PROTOBUF_NAMESPACE_ID::int64 stars() const;
  void set_stars(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stars() const;
  void _internal_set_stars(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 animation_type = 7 [json_name = "animation_type"];
  void clear_animation_type();
  ::PROTOBUF_NAMESPACE_ID::int64 animation_type() const;
  void set_animation_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_animation_type() const;
  void _internal_set_animation_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.Treasure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::bilibili::broadcast::message::intl::Animation* animation_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  ::PROTOBUF_NAMESPACE_ID::int64 stars_;
  ::PROTOBUF_NAMESPACE_ID::int64 animation_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class Animation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.Animation) */ {
 public:
  inline Animation() : Animation(nullptr) {}
  ~Animation() override;
  explicit constexpr Animation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Animation(const Animation& from);
  Animation(Animation&& from) noexcept
    : Animation() {
    *this = ::std::move(from);
  }

  inline Animation& operator=(const Animation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Animation& operator=(Animation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Animation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Animation* internal_default_instance() {
    return reinterpret_cast<const Animation*>(
               &_Animation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Animation& a, Animation& b) {
    a.Swap(&b);
  }
  inline void Swap(Animation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Animation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Animation* New() const final {
    return new Animation();
  }

  Animation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Animation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Animation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Animation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Animation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.Animation";
  }
  protected:
  explicit Animation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceNameFieldNumber = 1,
    kFileNameFieldNumber = 2,
    kAnimationUrlFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
  };
  // string resource_name = 1 [json_name = "resource_name"];
  void clear_resource_name();
  const std::string& resource_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_resource_name();
  void set_allocated_resource_name(std::string* resource_name);
  private:
  const std::string& _internal_resource_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_name(const std::string& value);
  std::string* _internal_mutable_resource_name();
  public:

  // string file_name = 2 [json_name = "file_name"];
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string animation_url = 3 [json_name = "animation_url"];
  void clear_animation_url();
  const std::string& animation_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_animation_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_animation_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_animation_url();
  void set_allocated_animation_url(std::string* animation_url);
  private:
  const std::string& _internal_animation_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animation_url(const std::string& value);
  std::string* _internal_mutable_animation_url();
  public:

  // int64 width = 4 [json_name = "width"];
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int64 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 height = 5 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.Animation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr animation_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 width_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class ComboStyle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.ComboStyle) */ {
 public:
  inline ComboStyle() : ComboStyle(nullptr) {}
  ~ComboStyle() override;
  explicit constexpr ComboStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComboStyle(const ComboStyle& from);
  ComboStyle(ComboStyle&& from) noexcept
    : ComboStyle() {
    *this = ::std::move(from);
  }

  inline ComboStyle& operator=(const ComboStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComboStyle& operator=(ComboStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComboStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComboStyle* internal_default_instance() {
    return reinterpret_cast<const ComboStyle*>(
               &_ComboStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ComboStyle& a, ComboStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(ComboStyle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComboStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComboStyle* New() const final {
    return new ComboStyle();
  }

  ComboStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComboStyle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComboStyle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComboStyle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComboStyle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.ComboStyle";
  }
  protected:
  explicit ComboStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBgColorStartFieldNumber = 1,
    kBgColorEndFieldNumber = 2,
    kGiftColorFieldNumber = 3,
    kNameColorFieldNumber = 4,
    kBgColorCenterFieldNumber = 8,
    kGiftNumColorFieldNumber = 9,
    kDurationFieldNumber = 6,
    kPeriodFieldNumber = 7,
    kGiftNumSizeFieldNumber = 5,
  };
  // string bg_color_start = 1 [json_name = "bg_color_start"];
  void clear_bg_color_start();
  const std::string& bg_color_start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bg_color_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bg_color_start();
  PROTOBUF_MUST_USE_RESULT std::string* release_bg_color_start();
  void set_allocated_bg_color_start(std::string* bg_color_start);
  private:
  const std::string& _internal_bg_color_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bg_color_start(const std::string& value);
  std::string* _internal_mutable_bg_color_start();
  public:

  // string bg_color_end = 2 [json_name = "bg_color_end"];
  void clear_bg_color_end();
  const std::string& bg_color_end() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bg_color_end(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bg_color_end();
  PROTOBUF_MUST_USE_RESULT std::string* release_bg_color_end();
  void set_allocated_bg_color_end(std::string* bg_color_end);
  private:
  const std::string& _internal_bg_color_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bg_color_end(const std::string& value);
  std::string* _internal_mutable_bg_color_end();
  public:

  // string gift_color = 3 [json_name = "gift_color"];
  void clear_gift_color();
  const std::string& gift_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gift_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gift_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_gift_color();
  void set_allocated_gift_color(std::string* gift_color);
  private:
  const std::string& _internal_gift_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gift_color(const std::string& value);
  std::string* _internal_mutable_gift_color();
  public:

  // string name_color = 4 [json_name = "name_color"];
  void clear_name_color();
  const std::string& name_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_name_color();
  void set_allocated_name_color(std::string* name_color);
  private:
  const std::string& _internal_name_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_color(const std::string& value);
  std::string* _internal_mutable_name_color();
  public:

  // string bg_color_center = 8 [json_name = "bg_color_center"];
  void clear_bg_color_center();
  const std::string& bg_color_center() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bg_color_center(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bg_color_center();
  PROTOBUF_MUST_USE_RESULT std::string* release_bg_color_center();
  void set_allocated_bg_color_center(std::string* bg_color_center);
  private:
  const std::string& _internal_bg_color_center() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bg_color_center(const std::string& value);
  std::string* _internal_mutable_bg_color_center();
  public:

  // string gift_num_color = 9 [json_name = "gift_num_color"];
  void clear_gift_num_color();
  const std::string& gift_num_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gift_num_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gift_num_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_gift_num_color();
  void set_allocated_gift_num_color(std::string* gift_num_color);
  private:
  const std::string& _internal_gift_num_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gift_num_color(const std::string& value);
  std::string* _internal_mutable_gift_num_color();
  public:

  // int64 duration = 6 [json_name = "duration"];
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 period = 7 [json_name = "period"];
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::int64 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 gift_num_size = 5 [json_name = "gift_num_size"];
  void clear_gift_num_size();
  ::PROTOBUF_NAMESPACE_ID::int32 gift_num_size() const;
  void set_gift_num_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gift_num_size() const;
  void _internal_set_gift_num_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.ComboStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bg_color_start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bg_color_end_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gift_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bg_color_center_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gift_num_color_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  ::PROTOBUF_NAMESPACE_ID::int64 period_;
  ::PROTOBUF_NAMESPACE_ID::int32 gift_num_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class Author final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.Author) */ {
 public:
  inline Author() : Author(nullptr) {}
  ~Author() override;
  explicit constexpr Author(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Author(const Author& from);
  Author(Author&& from) noexcept
    : Author() {
    *this = ::std::move(from);
  }

  inline Author& operator=(const Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline Author& operator=(Author&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Author& default_instance() {
    return *internal_default_instance();
  }
  static inline const Author* internal_default_instance() {
    return reinterpret_cast<const Author*>(
               &_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Author& a, Author& b) {
    a.Swap(&b);
  }
  inline void Swap(Author* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Author* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Author* New() const final {
    return new Author();
  }

  Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Author>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Author& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Author& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Author* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.Author";
  }
  protected:
  explicit Author(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAvatarFieldNumber = 4,
    kMidFieldNumber = 1,
    kRankFieldNumber = 3,
  };
  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string avatar = 4 [json_name = "avatar"];
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_MUST_USE_RESULT std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // int64 mid = 1 [json_name = "mid"];
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rank = 3 [json_name = "rank"];
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.Author)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class DmEventReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.DmEventReply) */ {
 public:
  inline DmEventReply() : DmEventReply(nullptr) {}
  ~DmEventReply() override;
  explicit constexpr DmEventReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DmEventReply(const DmEventReply& from);
  DmEventReply(DmEventReply&& from) noexcept
    : DmEventReply() {
    *this = ::std::move(from);
  }

  inline DmEventReply& operator=(const DmEventReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DmEventReply& operator=(DmEventReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DmEventReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DmEventReply* internal_default_instance() {
    return reinterpret_cast<const DmEventReply*>(
               &_DmEventReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DmEventReply& a, DmEventReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DmEventReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DmEventReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DmEventReply* New() const final {
    return new DmEventReply();
  }

  DmEventReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DmEventReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DmEventReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DmEventReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DmEventReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.DmEventReply";
  }
  protected:
  explicit DmEventReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .bilibili.broadcast.message.intl.DmItem Items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::bilibili::broadcast::message::intl::DmItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::DmItem >*
      mutable_items();
  private:
  const ::bilibili::broadcast::message::intl::DmItem& _internal_items(int index) const;
  ::bilibili::broadcast::message::intl::DmItem* _internal_add_items();
  public:
  const ::bilibili::broadcast::message::intl::DmItem& items(int index) const;
  ::bilibili::broadcast::message::intl::DmItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::DmItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.DmEventReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::DmItem > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class Style final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.Style) */ {
 public:
  inline Style() : Style(nullptr) {}
  ~Style() override;
  explicit constexpr Style(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Style(const Style& from);
  Style(Style&& from) noexcept
    : Style() {
    *this = ::std::move(from);
  }

  inline Style& operator=(const Style& from) {
    CopyFrom(from);
    return *this;
  }
  inline Style& operator=(Style&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Style& default_instance() {
    return *internal_default_instance();
  }
  static inline const Style* internal_default_instance() {
    return reinterpret_cast<const Style*>(
               &_Style_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Style& a, Style& b) {
    a.Swap(&b);
  }
  inline void Swap(Style* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Style* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Style* New() const final {
    return new Style();
  }

  Style* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Style>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Style& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Style& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Style* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.Style";
  }
  protected:
  explicit Style(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameColorFieldNumber = 1,
    kContentColorFieldNumber = 2,
    kBgColorFieldNumber = 3,
    kBoldFieldNumber = 4,
  };
  // string NameColor = 1;
  void clear_namecolor();
  const std::string& namecolor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namecolor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namecolor();
  PROTOBUF_MUST_USE_RESULT std::string* release_namecolor();
  void set_allocated_namecolor(std::string* namecolor);
  private:
  const std::string& _internal_namecolor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namecolor(const std::string& value);
  std::string* _internal_mutable_namecolor();
  public:

  // string ContentColor = 2;
  void clear_contentcolor();
  const std::string& contentcolor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contentcolor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contentcolor();
  PROTOBUF_MUST_USE_RESULT std::string* release_contentcolor();
  void set_allocated_contentcolor(std::string* contentcolor);
  private:
  const std::string& _internal_contentcolor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contentcolor(const std::string& value);
  std::string* _internal_mutable_contentcolor();
  public:

  // string BgColor = 3;
  void clear_bgcolor();
  const std::string& bgcolor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bgcolor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bgcolor();
  PROTOBUF_MUST_USE_RESULT std::string* release_bgcolor();
  void set_allocated_bgcolor(std::string* bgcolor);
  private:
  const std::string& _internal_bgcolor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bgcolor(const std::string& value);
  std::string* _internal_mutable_bgcolor();
  public:

  // bool Bold = 4;
  void clear_bold();
  bool bold() const;
  void set_bold(bool value);
  private:
  bool _internal_bold() const;
  void _internal_set_bold(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.Style)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namecolor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contentcolor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bgcolor_;
  bool bold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class Sticker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.Sticker) */ {
 public:
  inline Sticker() : Sticker(nullptr) {}
  ~Sticker() override;
  explicit constexpr Sticker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sticker(const Sticker& from);
  Sticker(Sticker&& from) noexcept
    : Sticker() {
    *this = ::std::move(from);
  }

  inline Sticker& operator=(const Sticker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sticker& operator=(Sticker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sticker& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sticker* internal_default_instance() {
    return reinterpret_cast<const Sticker*>(
               &_Sticker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Sticker& a, Sticker& b) {
    a.Swap(&b);
  }
  inline void Swap(Sticker* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sticker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sticker* New() const final {
    return new Sticker();
  }

  Sticker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sticker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sticker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sticker& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sticker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.Sticker";
  }
  protected:
  explicit Sticker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kIconFieldNumber = 3,
    kIDFieldNumber = 1,
    kNumberFieldNumber = 4,
  };
  // string Title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_MUST_USE_RESULT std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string Icon = 3;
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_MUST_USE_RESULT std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 Number = 4;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.Sticker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class TopUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.TopUser) */ {
 public:
  inline TopUser() : TopUser(nullptr) {}
  ~TopUser() override;
  explicit constexpr TopUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopUser(const TopUser& from);
  TopUser(TopUser&& from) noexcept
    : TopUser() {
    *this = ::std::move(from);
  }

  inline TopUser& operator=(const TopUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopUser& operator=(TopUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopUser* internal_default_instance() {
    return reinterpret_cast<const TopUser*>(
               &_TopUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TopUser& a, TopUser& b) {
    a.Swap(&b);
  }
  inline void Swap(TopUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopUser* New() const final {
    return new TopUser();
  }

  TopUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopUser& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.TopUser";
  }
  protected:
  explicit TopUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kPaidUserNumFieldNumber = 1,
  };
  // repeated .bilibili.broadcast.message.intl.User Users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::bilibili::broadcast::message::intl::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::User >*
      mutable_users();
  private:
  const ::bilibili::broadcast::message::intl::User& _internal_users(int index) const;
  ::bilibili::broadcast::message::intl::User* _internal_add_users();
  public:
  const ::bilibili::broadcast::message::intl::User& users(int index) const;
  ::bilibili::broadcast::message::intl::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::User >&
      users() const;

  // string PaidUserNum = 1;
  void clear_paidusernum();
  const std::string& paidusernum() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paidusernum(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paidusernum();
  PROTOBUF_MUST_USE_RESULT std::string* release_paidusernum();
  void set_allocated_paidusernum(std::string* paidusernum);
  private:
  const std::string& _internal_paidusernum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paidusernum(const std::string& value);
  std::string* _internal_mutable_paidusernum();
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.TopUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::User > users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paidusernum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return new User();
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kFaceFieldNumber = 3,
    kMidFieldNumber = 1,
    kScoreFieldNumber = 4,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Face = 3;
  void clear_face();
  const std::string& face() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_face(ArgT0&& arg0, ArgT... args);
  std::string* mutable_face();
  PROTOBUF_MUST_USE_RESULT std::string* release_face();
  void set_allocated_face(std::string* face);
  private:
  const std::string& _internal_face() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_face(const std::string& value);
  std::string* _internal_mutable_face();
  public:

  // int64 Mid = 1;
  void clear_mid();
  ::PROTOBUF_NAMESPACE_ID::int64 mid() const;
  void set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_mid() const;
  void _internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 score = 4;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_;
  ::PROTOBUF_NAMESPACE_ID::int64 mid_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class PopupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.PopupInfo) */ {
 public:
  inline PopupInfo() : PopupInfo(nullptr) {}
  ~PopupInfo() override;
  explicit constexpr PopupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PopupInfo(const PopupInfo& from);
  PopupInfo(PopupInfo&& from) noexcept
    : PopupInfo() {
    *this = ::std::move(from);
  }

  inline PopupInfo& operator=(const PopupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PopupInfo& operator=(PopupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PopupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PopupInfo* internal_default_instance() {
    return reinterpret_cast<const PopupInfo*>(
               &_PopupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PopupInfo& a, PopupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PopupInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PopupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PopupInfo* New() const final {
    return new PopupInfo();
  }

  PopupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PopupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PopupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PopupInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PopupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.PopupInfo";
  }
  protected:
  explicit PopupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPopupInfoListFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // repeated .bilibili.broadcast.message.intl.PopupInfoItem popup_info_list = 1;
  int popup_info_list_size() const;
  private:
  int _internal_popup_info_list_size() const;
  public:
  void clear_popup_info_list();
  ::bilibili::broadcast::message::intl::PopupInfoItem* mutable_popup_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::PopupInfoItem >*
      mutable_popup_info_list();
  private:
  const ::bilibili::broadcast::message::intl::PopupInfoItem& _internal_popup_info_list(int index) const;
  ::bilibili::broadcast::message::intl::PopupInfoItem* _internal_add_popup_info_list();
  public:
  const ::bilibili::broadcast::message::intl::PopupInfoItem& popup_info_list(int index) const;
  ::bilibili::broadcast::message::intl::PopupInfoItem* add_popup_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::PopupInfoItem >&
      popup_info_list() const;

  // int64 duration = 2;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.PopupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::PopupInfoItem > popup_info_list_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class PopupInfoItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.PopupInfoItem) */ {
 public:
  inline PopupInfoItem() : PopupInfoItem(nullptr) {}
  ~PopupInfoItem() override;
  explicit constexpr PopupInfoItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PopupInfoItem(const PopupInfoItem& from);
  PopupInfoItem(PopupInfoItem&& from) noexcept
    : PopupInfoItem() {
    *this = ::std::move(from);
  }

  inline PopupInfoItem& operator=(const PopupInfoItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PopupInfoItem& operator=(PopupInfoItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PopupInfoItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PopupInfoItem* internal_default_instance() {
    return reinterpret_cast<const PopupInfoItem*>(
               &_PopupInfoItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PopupInfoItem& a, PopupInfoItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PopupInfoItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PopupInfoItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PopupInfoItem* New() const final {
    return new PopupInfoItem();
  }

  PopupInfoItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PopupInfoItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PopupInfoItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PopupInfoItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PopupInfoItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.PopupInfoItem";
  }
  protected:
  explicit PopupInfoItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kColorFieldNumber = 4,
    kIconNameFieldNumber = 6,
    kIconUrlFieldNumber = 7,
    kBgColorFieldNumber = 10,
    kTypeFieldNumber = 1,
    kPositonFieldNumber = 2,
    kWidthFieldNumber = 8,
    kHeightFieldNumber = 9,
    kBoldFieldNumber = 5,
  };
  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_MUST_USE_RESULT std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string color = 4;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // string icon_name = 6;
  void clear_icon_name();
  const std::string& icon_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_icon_name();
  void set_allocated_icon_name(std::string* icon_name);
  private:
  const std::string& _internal_icon_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_name(const std::string& value);
  std::string* _internal_mutable_icon_name();
  public:

  // string icon_url = 7;
  void clear_icon_url();
  const std::string& icon_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_icon_url();
  void set_allocated_icon_url(std::string* icon_url);
  private:
  const std::string& _internal_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_url(const std::string& value);
  std::string* _internal_mutable_icon_url();
  public:

  // string bg_color = 10;
  void clear_bg_color();
  const std::string& bg_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bg_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bg_color();
  PROTOBUF_MUST_USE_RESULT std::string* release_bg_color();
  void set_allocated_bg_color(std::string* bg_color);
  private:
  const std::string& _internal_bg_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bg_color(const std::string& value);
  std::string* _internal_mutable_bg_color();
  public:

  // .bilibili.broadcast.message.intl.PopupItemType type = 1;
  void clear_type();
  ::bilibili::broadcast::message::intl::PopupItemType type() const;
  void set_type(::bilibili::broadcast::message::intl::PopupItemType value);
  private:
  ::bilibili::broadcast::message::intl::PopupItemType _internal_type() const;
  void _internal_set_type(::bilibili::broadcast::message::intl::PopupItemType value);
  public:

  // .bilibili.broadcast.message.intl.PopupItemPosition positon = 2;
  void clear_positon();
  ::bilibili::broadcast::message::intl::PopupItemPosition positon() const;
  void set_positon(::bilibili::broadcast::message::intl::PopupItemPosition value);
  private:
  ::bilibili::broadcast::message::intl::PopupItemPosition _internal_positon() const;
  void _internal_set_positon(::bilibili::broadcast::message::intl::PopupItemPosition value);
  public:

  // int64 width = 8;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int64 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 height = 9;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bold = 5;
  void clear_bold();
  bool bold() const;
  void set_bold(bool value);
  private:
  bool _internal_bold() const;
  void _internal_set_bold(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.PopupInfoItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bg_color_;
  int type_;
  int positon_;
  ::PROTOBUF_NAMESPACE_ID::int64 width_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  bool bold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// -------------------------------------------------------------------

class BlockInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bilibili.broadcast.message.intl.BlockInfo) */ {
 public:
  inline BlockInfo() : BlockInfo(nullptr) {}
  ~BlockInfo() override;
  explicit constexpr BlockInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockInfo(const BlockInfo& from);
  BlockInfo(BlockInfo&& from) noexcept
    : BlockInfo() {
    *this = ::std::move(from);
  }

  inline BlockInfo& operator=(const BlockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockInfo& operator=(BlockInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockInfo* internal_default_instance() {
    return reinterpret_cast<const BlockInfo*>(
               &_BlockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BlockInfo& a, BlockInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockInfo* New() const final {
    return new BlockInfo();
  }

  BlockInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bilibili.broadcast.message.intl.BlockInfo";
  }
  protected:
  explicit BlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoticeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // string notice = 1;
  void clear_notice();
  const std::string& notice() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notice(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notice();
  PROTOBUF_MUST_USE_RESULT std::string* release_notice();
  void set_allocated_notice(std::string* notice);
  private:
  const std::string& _internal_notice() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notice(const std::string& value);
  std::string* _internal_mutable_notice();
  public:

  // int64 end_time = 2;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bilibili.broadcast.message.intl.BlockInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DMData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DmItem

// .bilibili.broadcast.message.intl.DmType Cmd = 1;
inline void DmItem::clear_cmd() {
  cmd_ = 0;
}
inline ::bilibili::broadcast::message::intl::DmType DmItem::_internal_cmd() const {
  return static_cast< ::bilibili::broadcast::message::intl::DmType >(cmd_);
}
inline ::bilibili::broadcast::message::intl::DmType DmItem::cmd() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.Cmd)
  return _internal_cmd();
}
inline void DmItem::_internal_set_cmd(::bilibili::broadcast::message::intl::DmType value) {
  
  cmd_ = value;
}
inline void DmItem::set_cmd(::bilibili::broadcast::message::intl::DmType value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.DmItem.Cmd)
}

// string Message = 2;
inline void DmItem::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DmItem::message() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.Message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmItem::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.DmItem.Message)
}
inline std::string* DmItem::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.Message)
  return _s;
}
inline const std::string& DmItem::_internal_message() const {
  return message_.Get();
}
inline void DmItem::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DmItem::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DmItem::release_message() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DmItem::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.Message)
}

// .bilibili.broadcast.message.intl.Author Author = 3;
inline bool DmItem::_internal_has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline bool DmItem::has_author() const {
  return _internal_has_author();
}
inline void DmItem::clear_author() {
  if (GetArenaForAllocation() == nullptr && author_ != nullptr) {
    delete author_;
  }
  author_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::Author& DmItem::_internal_author() const {
  const ::bilibili::broadcast::message::intl::Author* p = author_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::Author&>(
      ::bilibili::broadcast::message::intl::_Author_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::Author& DmItem::author() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.Author)
  return _internal_author();
}
inline void DmItem::unsafe_arena_set_allocated_author(
    ::bilibili::broadcast::message::intl::Author* author) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.DmItem.Author)
}
inline ::bilibili::broadcast::message::intl::Author* DmItem::release_author() {
  
  ::bilibili::broadcast::message::intl::Author* temp = author_;
  author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::Author* DmItem::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.Author)
  
  ::bilibili::broadcast::message::intl::Author* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::Author* DmItem::_internal_mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::Author>(GetArenaForAllocation());
    author_ = p;
  }
  return author_;
}
inline ::bilibili::broadcast::message::intl::Author* DmItem::mutable_author() {
  ::bilibili::broadcast::message::intl::Author* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.Author)
  return _msg;
}
inline void DmItem::set_allocated_author(::bilibili::broadcast::message::intl::Author* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::Author>::GetOwningArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.Author)
}

// int64 RoomID = 4;
inline void DmItem::clear_roomid() {
  roomid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmItem::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmItem::roomid() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.RoomID)
  return _internal_roomid();
}
inline void DmItem::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roomid_ = value;
}
inline void DmItem::set_roomid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.DmItem.RoomID)
}

// int64 Delay = 5;
inline void DmItem::clear_delay() {
  delay_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmItem::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmItem::delay() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.Delay)
  return _internal_delay();
}
inline void DmItem::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  delay_ = value;
}
inline void DmItem::set_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.DmItem.Delay)
}

// int64 CTime = 6;
inline void DmItem::clear_ctime() {
  ctime_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmItem::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DmItem::ctime() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.CTime)
  return _internal_ctime();
}
inline void DmItem::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ctime_ = value;
}
inline void DmItem::set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.DmItem.CTime)
}

// .bilibili.broadcast.message.intl.Author ReplyTo = 7;
inline bool DmItem::_internal_has_replyto() const {
  return this != internal_default_instance() && replyto_ != nullptr;
}
inline bool DmItem::has_replyto() const {
  return _internal_has_replyto();
}
inline void DmItem::clear_replyto() {
  if (GetArenaForAllocation() == nullptr && replyto_ != nullptr) {
    delete replyto_;
  }
  replyto_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::Author& DmItem::_internal_replyto() const {
  const ::bilibili::broadcast::message::intl::Author* p = replyto_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::Author&>(
      ::bilibili::broadcast::message::intl::_Author_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::Author& DmItem::replyto() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.ReplyTo)
  return _internal_replyto();
}
inline void DmItem::unsafe_arena_set_allocated_replyto(
    ::bilibili::broadcast::message::intl::Author* replyto) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replyto_);
  }
  replyto_ = replyto;
  if (replyto) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.DmItem.ReplyTo)
}
inline ::bilibili::broadcast::message::intl::Author* DmItem::release_replyto() {
  
  ::bilibili::broadcast::message::intl::Author* temp = replyto_;
  replyto_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::Author* DmItem::unsafe_arena_release_replyto() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.ReplyTo)
  
  ::bilibili::broadcast::message::intl::Author* temp = replyto_;
  replyto_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::Author* DmItem::_internal_mutable_replyto() {
  
  if (replyto_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::Author>(GetArenaForAllocation());
    replyto_ = p;
  }
  return replyto_;
}
inline ::bilibili::broadcast::message::intl::Author* DmItem::mutable_replyto() {
  ::bilibili::broadcast::message::intl::Author* _msg = _internal_mutable_replyto();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.ReplyTo)
  return _msg;
}
inline void DmItem::set_allocated_replyto(::bilibili::broadcast::message::intl::Author* replyto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete replyto_;
  }
  if (replyto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::Author>::GetOwningArena(replyto);
    if (message_arena != submessage_arena) {
      replyto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replyto, submessage_arena);
    }
    
  } else {
    
  }
  replyto_ = replyto;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.ReplyTo)
}

// .bilibili.broadcast.message.intl.Style Style = 8;
inline bool DmItem::_internal_has_style() const {
  return this != internal_default_instance() && style_ != nullptr;
}
inline bool DmItem::has_style() const {
  return _internal_has_style();
}
inline void DmItem::clear_style() {
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::Style& DmItem::_internal_style() const {
  const ::bilibili::broadcast::message::intl::Style* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::Style&>(
      ::bilibili::broadcast::message::intl::_Style_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::Style& DmItem::style() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.Style)
  return _internal_style();
}
inline void DmItem::unsafe_arena_set_allocated_style(
    ::bilibili::broadcast::message::intl::Style* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.DmItem.Style)
}
inline ::bilibili::broadcast::message::intl::Style* DmItem::release_style() {
  
  ::bilibili::broadcast::message::intl::Style* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::Style* DmItem::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.Style)
  
  ::bilibili::broadcast::message::intl::Style* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::Style* DmItem::_internal_mutable_style() {
  
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::Style>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::bilibili::broadcast::message::intl::Style* DmItem::mutable_style() {
  ::bilibili::broadcast::message::intl::Style* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.Style)
  return _msg;
}
inline void DmItem::set_allocated_style(::bilibili::broadcast::message::intl::Style* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_;
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::Style>::GetOwningArena(style);
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.Style)
}

// .bilibili.broadcast.message.intl.Sticker Sticker = 9;
inline bool DmItem::_internal_has_sticker() const {
  return this != internal_default_instance() && sticker_ != nullptr;
}
inline bool DmItem::has_sticker() const {
  return _internal_has_sticker();
}
inline void DmItem::clear_sticker() {
  if (GetArenaForAllocation() == nullptr && sticker_ != nullptr) {
    delete sticker_;
  }
  sticker_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::Sticker& DmItem::_internal_sticker() const {
  const ::bilibili::broadcast::message::intl::Sticker* p = sticker_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::Sticker&>(
      ::bilibili::broadcast::message::intl::_Sticker_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::Sticker& DmItem::sticker() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.Sticker)
  return _internal_sticker();
}
inline void DmItem::unsafe_arena_set_allocated_sticker(
    ::bilibili::broadcast::message::intl::Sticker* sticker) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sticker_);
  }
  sticker_ = sticker;
  if (sticker) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.DmItem.Sticker)
}
inline ::bilibili::broadcast::message::intl::Sticker* DmItem::release_sticker() {
  
  ::bilibili::broadcast::message::intl::Sticker* temp = sticker_;
  sticker_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::Sticker* DmItem::unsafe_arena_release_sticker() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.Sticker)
  
  ::bilibili::broadcast::message::intl::Sticker* temp = sticker_;
  sticker_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::Sticker* DmItem::_internal_mutable_sticker() {
  
  if (sticker_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::Sticker>(GetArenaForAllocation());
    sticker_ = p;
  }
  return sticker_;
}
inline ::bilibili::broadcast::message::intl::Sticker* DmItem::mutable_sticker() {
  ::bilibili::broadcast::message::intl::Sticker* _msg = _internal_mutable_sticker();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.Sticker)
  return _msg;
}
inline void DmItem::set_allocated_sticker(::bilibili::broadcast::message::intl::Sticker* sticker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sticker_;
  }
  if (sticker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::Sticker>::GetOwningArena(sticker);
    if (message_arena != submessage_arena) {
      sticker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sticker, submessage_arena);
    }
    
  } else {
    
  }
  sticker_ = sticker;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.Sticker)
}

// .bilibili.broadcast.message.intl.TopUser TopUser = 10;
inline bool DmItem::_internal_has_topuser() const {
  return this != internal_default_instance() && topuser_ != nullptr;
}
inline bool DmItem::has_topuser() const {
  return _internal_has_topuser();
}
inline void DmItem::clear_topuser() {
  if (GetArenaForAllocation() == nullptr && topuser_ != nullptr) {
    delete topuser_;
  }
  topuser_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::TopUser& DmItem::_internal_topuser() const {
  const ::bilibili::broadcast::message::intl::TopUser* p = topuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::TopUser&>(
      ::bilibili::broadcast::message::intl::_TopUser_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::TopUser& DmItem::topuser() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.TopUser)
  return _internal_topuser();
}
inline void DmItem::unsafe_arena_set_allocated_topuser(
    ::bilibili::broadcast::message::intl::TopUser* topuser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topuser_);
  }
  topuser_ = topuser;
  if (topuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.DmItem.TopUser)
}
inline ::bilibili::broadcast::message::intl::TopUser* DmItem::release_topuser() {
  
  ::bilibili::broadcast::message::intl::TopUser* temp = topuser_;
  topuser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::TopUser* DmItem::unsafe_arena_release_topuser() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.TopUser)
  
  ::bilibili::broadcast::message::intl::TopUser* temp = topuser_;
  topuser_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::TopUser* DmItem::_internal_mutable_topuser() {
  
  if (topuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::TopUser>(GetArenaForAllocation());
    topuser_ = p;
  }
  return topuser_;
}
inline ::bilibili::broadcast::message::intl::TopUser* DmItem::mutable_topuser() {
  ::bilibili::broadcast::message::intl::TopUser* _msg = _internal_mutable_topuser();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.TopUser)
  return _msg;
}
inline void DmItem::set_allocated_topuser(::bilibili::broadcast::message::intl::TopUser* topuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete topuser_;
  }
  if (topuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::TopUser>::GetOwningArena(topuser);
    if (message_arena != submessage_arena) {
      topuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topuser, submessage_arena);
    }
    
  } else {
    
  }
  topuser_ = topuser;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.TopUser)
}

// repeated .bilibili.broadcast.message.intl.MessageItem MessageList = 11;
inline int DmItem::_internal_messagelist_size() const {
  return messagelist_.size();
}
inline int DmItem::messagelist_size() const {
  return _internal_messagelist_size();
}
inline void DmItem::clear_messagelist() {
  messagelist_.Clear();
}
inline ::bilibili::broadcast::message::intl::MessageItem* DmItem::mutable_messagelist(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.MessageList)
  return messagelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::MessageItem >*
DmItem::mutable_messagelist() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.broadcast.message.intl.DmItem.MessageList)
  return &messagelist_;
}
inline const ::bilibili::broadcast::message::intl::MessageItem& DmItem::_internal_messagelist(int index) const {
  return messagelist_.Get(index);
}
inline const ::bilibili::broadcast::message::intl::MessageItem& DmItem::messagelist(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.MessageList)
  return _internal_messagelist(index);
}
inline ::bilibili::broadcast::message::intl::MessageItem* DmItem::_internal_add_messagelist() {
  return messagelist_.Add();
}
inline ::bilibili::broadcast::message::intl::MessageItem* DmItem::add_messagelist() {
  ::bilibili::broadcast::message::intl::MessageItem* _add = _internal_add_messagelist();
  // @@protoc_insertion_point(field_add:bilibili.broadcast.message.intl.DmItem.MessageList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::MessageItem >&
DmItem::messagelist() const {
  // @@protoc_insertion_point(field_list:bilibili.broadcast.message.intl.DmItem.MessageList)
  return messagelist_;
}

// repeated .bilibili.broadcast.message.intl.Combo Combos = 12 [json_name = "combos"];
inline int DmItem::_internal_combos_size() const {
  return combos_.size();
}
inline int DmItem::combos_size() const {
  return _internal_combos_size();
}
inline void DmItem::clear_combos() {
  combos_.Clear();
}
inline ::bilibili::broadcast::message::intl::Combo* DmItem::mutable_combos(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.Combos)
  return combos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::Combo >*
DmItem::mutable_combos() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.broadcast.message.intl.DmItem.Combos)
  return &combos_;
}
inline const ::bilibili::broadcast::message::intl::Combo& DmItem::_internal_combos(int index) const {
  return combos_.Get(index);
}
inline const ::bilibili::broadcast::message::intl::Combo& DmItem::combos(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.Combos)
  return _internal_combos(index);
}
inline ::bilibili::broadcast::message::intl::Combo* DmItem::_internal_add_combos() {
  return combos_.Add();
}
inline ::bilibili::broadcast::message::intl::Combo* DmItem::add_combos() {
  ::bilibili::broadcast::message::intl::Combo* _add = _internal_add_combos();
  // @@protoc_insertion_point(field_add:bilibili.broadcast.message.intl.DmItem.Combos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::Combo >&
DmItem::combos() const {
  // @@protoc_insertion_point(field_list:bilibili.broadcast.message.intl.DmItem.Combos)
  return combos_;
}

// string msg_id = 13;
inline void DmItem::clear_msg_id() {
  msg_id_.ClearToEmpty();
}
inline const std::string& DmItem::msg_id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.msg_id)
  return _internal_msg_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmItem::set_msg_id(ArgT0&& arg0, ArgT... args) {
 
 msg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.DmItem.msg_id)
}
inline std::string* DmItem::mutable_msg_id() {
  std::string* _s = _internal_mutable_msg_id();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.msg_id)
  return _s;
}
inline const std::string& DmItem::_internal_msg_id() const {
  return msg_id_.Get();
}
inline void DmItem::_internal_set_msg_id(const std::string& value) {
  
  msg_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DmItem::_internal_mutable_msg_id() {
  
  return msg_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DmItem::release_msg_id() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.msg_id)
  return msg_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DmItem::set_allocated_msg_id(std::string* msg_id) {
  if (msg_id != nullptr) {
    
  } else {
    
  }
  msg_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.msg_id)
}

// string live_key = 14;
inline void DmItem::clear_live_key() {
  live_key_.ClearToEmpty();
}
inline const std::string& DmItem::live_key() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.live_key)
  return _internal_live_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DmItem::set_live_key(ArgT0&& arg0, ArgT... args) {
 
 live_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.DmItem.live_key)
}
inline std::string* DmItem::mutable_live_key() {
  std::string* _s = _internal_mutable_live_key();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.live_key)
  return _s;
}
inline const std::string& DmItem::_internal_live_key() const {
  return live_key_.Get();
}
inline void DmItem::_internal_set_live_key(const std::string& value) {
  
  live_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DmItem::_internal_mutable_live_key() {
  
  return live_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DmItem::release_live_key() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.live_key)
  return live_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DmItem::set_allocated_live_key(std::string* live_key) {
  if (live_key != nullptr) {
    
  } else {
    
  }
  live_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), live_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.live_key)
}

// .bilibili.broadcast.message.intl.PopupInfo popup_info = 15;
inline bool DmItem::_internal_has_popup_info() const {
  return this != internal_default_instance() && popup_info_ != nullptr;
}
inline bool DmItem::has_popup_info() const {
  return _internal_has_popup_info();
}
inline void DmItem::clear_popup_info() {
  if (GetArenaForAllocation() == nullptr && popup_info_ != nullptr) {
    delete popup_info_;
  }
  popup_info_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::PopupInfo& DmItem::_internal_popup_info() const {
  const ::bilibili::broadcast::message::intl::PopupInfo* p = popup_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::PopupInfo&>(
      ::bilibili::broadcast::message::intl::_PopupInfo_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::PopupInfo& DmItem::popup_info() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.popup_info)
  return _internal_popup_info();
}
inline void DmItem::unsafe_arena_set_allocated_popup_info(
    ::bilibili::broadcast::message::intl::PopupInfo* popup_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(popup_info_);
  }
  popup_info_ = popup_info;
  if (popup_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.DmItem.popup_info)
}
inline ::bilibili::broadcast::message::intl::PopupInfo* DmItem::release_popup_info() {
  
  ::bilibili::broadcast::message::intl::PopupInfo* temp = popup_info_;
  popup_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::PopupInfo* DmItem::unsafe_arena_release_popup_info() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.popup_info)
  
  ::bilibili::broadcast::message::intl::PopupInfo* temp = popup_info_;
  popup_info_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::PopupInfo* DmItem::_internal_mutable_popup_info() {
  
  if (popup_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::PopupInfo>(GetArenaForAllocation());
    popup_info_ = p;
  }
  return popup_info_;
}
inline ::bilibili::broadcast::message::intl::PopupInfo* DmItem::mutable_popup_info() {
  ::bilibili::broadcast::message::intl::PopupInfo* _msg = _internal_mutable_popup_info();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.popup_info)
  return _msg;
}
inline void DmItem::set_allocated_popup_info(::bilibili::broadcast::message::intl::PopupInfo* popup_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete popup_info_;
  }
  if (popup_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::PopupInfo>::GetOwningArena(popup_info);
    if (message_arena != submessage_arena) {
      popup_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, popup_info, submessage_arena);
    }
    
  } else {
    
  }
  popup_info_ = popup_info;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.popup_info)
}

// .bilibili.broadcast.message.intl.BlockInfo block_info = 16;
inline bool DmItem::_internal_has_block_info() const {
  return this != internal_default_instance() && block_info_ != nullptr;
}
inline bool DmItem::has_block_info() const {
  return _internal_has_block_info();
}
inline void DmItem::clear_block_info() {
  if (GetArenaForAllocation() == nullptr && block_info_ != nullptr) {
    delete block_info_;
  }
  block_info_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::BlockInfo& DmItem::_internal_block_info() const {
  const ::bilibili::broadcast::message::intl::BlockInfo* p = block_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::BlockInfo&>(
      ::bilibili::broadcast::message::intl::_BlockInfo_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::BlockInfo& DmItem::block_info() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmItem.block_info)
  return _internal_block_info();
}
inline void DmItem::unsafe_arena_set_allocated_block_info(
    ::bilibili::broadcast::message::intl::BlockInfo* block_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_info_);
  }
  block_info_ = block_info;
  if (block_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.DmItem.block_info)
}
inline ::bilibili::broadcast::message::intl::BlockInfo* DmItem::release_block_info() {
  
  ::bilibili::broadcast::message::intl::BlockInfo* temp = block_info_;
  block_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::BlockInfo* DmItem::unsafe_arena_release_block_info() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.DmItem.block_info)
  
  ::bilibili::broadcast::message::intl::BlockInfo* temp = block_info_;
  block_info_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::BlockInfo* DmItem::_internal_mutable_block_info() {
  
  if (block_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::BlockInfo>(GetArenaForAllocation());
    block_info_ = p;
  }
  return block_info_;
}
inline ::bilibili::broadcast::message::intl::BlockInfo* DmItem::mutable_block_info() {
  ::bilibili::broadcast::message::intl::BlockInfo* _msg = _internal_mutable_block_info();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmItem.block_info)
  return _msg;
}
inline void DmItem::set_allocated_block_info(::bilibili::broadcast::message::intl::BlockInfo* block_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_info_;
  }
  if (block_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::BlockInfo>::GetOwningArena(block_info);
    if (message_arena != submessage_arena) {
      block_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_info, submessage_arena);
    }
    
  } else {
    
  }
  block_info_ = block_info;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.DmItem.block_info)
}

// -------------------------------------------------------------------

// MessageItem

// .bilibili.broadcast.message.intl.MessageItemType Type = 1;
inline void MessageItem::clear_type() {
  type_ = 0;
}
inline ::bilibili::broadcast::message::intl::MessageItemType MessageItem::_internal_type() const {
  return static_cast< ::bilibili::broadcast::message::intl::MessageItemType >(type_);
}
inline ::bilibili::broadcast::message::intl::MessageItemType MessageItem::type() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.Type)
  return _internal_type();
}
inline void MessageItem::_internal_set_type(::bilibili::broadcast::message::intl::MessageItemType value) {
  
  type_ = value;
}
inline void MessageItem::set_type(::bilibili::broadcast::message::intl::MessageItemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.Type)
}

// string Content = 2;
inline void MessageItem::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& MessageItem::content() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.Content)
}
inline std::string* MessageItem::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.MessageItem.Content)
  return _s;
}
inline const std::string& MessageItem::_internal_content() const {
  return content_.Get();
}
inline void MessageItem::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageItem::release_content() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.MessageItem.Content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageItem::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.MessageItem.Content)
}

// string Color = 3;
inline void MessageItem::clear_color() {
  color_.ClearToEmpty();
}
inline const std::string& MessageItem::color() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.Color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_color(ArgT0&& arg0, ArgT... args) {
 
 color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.Color)
}
inline std::string* MessageItem::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.MessageItem.Color)
  return _s;
}
inline const std::string& MessageItem::_internal_color() const {
  return color_.Get();
}
inline void MessageItem::_internal_set_color(const std::string& value) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_color() {
  
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageItem::release_color() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.MessageItem.Color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageItem::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.MessageItem.Color)
}

// bool Bold = 4;
inline void MessageItem::clear_bold() {
  bold_ = false;
}
inline bool MessageItem::_internal_bold() const {
  return bold_;
}
inline bool MessageItem::bold() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.Bold)
  return _internal_bold();
}
inline void MessageItem::_internal_set_bold(bool value) {
  
  bold_ = value;
}
inline void MessageItem::set_bold(bool value) {
  _internal_set_bold(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.Bold)
}

// string IconName = 5;
inline void MessageItem::clear_iconname() {
  iconname_.ClearToEmpty();
}
inline const std::string& MessageItem::iconname() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.IconName)
  return _internal_iconname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_iconname(ArgT0&& arg0, ArgT... args) {
 
 iconname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.IconName)
}
inline std::string* MessageItem::mutable_iconname() {
  std::string* _s = _internal_mutable_iconname();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.MessageItem.IconName)
  return _s;
}
inline const std::string& MessageItem::_internal_iconname() const {
  return iconname_.Get();
}
inline void MessageItem::_internal_set_iconname(const std::string& value) {
  
  iconname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_iconname() {
  
  return iconname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageItem::release_iconname() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.MessageItem.IconName)
  return iconname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageItem::set_allocated_iconname(std::string* iconname) {
  if (iconname != nullptr) {
    
  } else {
    
  }
  iconname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iconname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.MessageItem.IconName)
}

// string IconUrl = 6;
inline void MessageItem::clear_iconurl() {
  iconurl_.ClearToEmpty();
}
inline const std::string& MessageItem::iconurl() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.IconUrl)
  return _internal_iconurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_iconurl(ArgT0&& arg0, ArgT... args) {
 
 iconurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.IconUrl)
}
inline std::string* MessageItem::mutable_iconurl() {
  std::string* _s = _internal_mutable_iconurl();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.MessageItem.IconUrl)
  return _s;
}
inline const std::string& MessageItem::_internal_iconurl() const {
  return iconurl_.Get();
}
inline void MessageItem::_internal_set_iconurl(const std::string& value) {
  
  iconurl_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_iconurl() {
  
  return iconurl_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageItem::release_iconurl() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.MessageItem.IconUrl)
  return iconurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageItem::set_allocated_iconurl(std::string* iconurl) {
  if (iconurl != nullptr) {
    
  } else {
    
  }
  iconurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iconurl,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.MessageItem.IconUrl)
}

// int32 Width = 7;
inline void MessageItem::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageItem::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageItem::width() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.Width)
  return _internal_width();
}
inline void MessageItem::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void MessageItem::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.Width)
}

// int32 Height = 8;
inline void MessageItem::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageItem::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageItem::height() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.Height)
  return _internal_height();
}
inline void MessageItem::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void MessageItem::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.Height)
}

// string BgColor = 9;
inline void MessageItem::clear_bgcolor() {
  bgcolor_.ClearToEmpty();
}
inline const std::string& MessageItem::bgcolor() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.BgColor)
  return _internal_bgcolor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageItem::set_bgcolor(ArgT0&& arg0, ArgT... args) {
 
 bgcolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.BgColor)
}
inline std::string* MessageItem::mutable_bgcolor() {
  std::string* _s = _internal_mutable_bgcolor();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.MessageItem.BgColor)
  return _s;
}
inline const std::string& MessageItem::_internal_bgcolor() const {
  return bgcolor_.Get();
}
inline void MessageItem::_internal_set_bgcolor(const std::string& value) {
  
  bgcolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageItem::_internal_mutable_bgcolor() {
  
  return bgcolor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageItem::release_bgcolor() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.MessageItem.BgColor)
  return bgcolor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageItem::set_allocated_bgcolor(std::string* bgcolor) {
  if (bgcolor != nullptr) {
    
  } else {
    
  }
  bgcolor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgcolor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.MessageItem.BgColor)
}

// .bilibili.broadcast.message.intl.MessageItemSubType SubType = 10;
inline void MessageItem::clear_subtype() {
  subtype_ = 0;
}
inline ::bilibili::broadcast::message::intl::MessageItemSubType MessageItem::_internal_subtype() const {
  return static_cast< ::bilibili::broadcast::message::intl::MessageItemSubType >(subtype_);
}
inline ::bilibili::broadcast::message::intl::MessageItemSubType MessageItem::subtype() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.SubType)
  return _internal_subtype();
}
inline void MessageItem::_internal_set_subtype(::bilibili::broadcast::message::intl::MessageItemSubType value) {
  
  subtype_ = value;
}
inline void MessageItem::set_subtype(::bilibili::broadcast::message::intl::MessageItemSubType value) {
  _internal_set_subtype(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.SubType)
}

// int64 treasure_id = 11;
inline void MessageItem::clear_treasure_id() {
  treasure_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageItem::_internal_treasure_id() const {
  return treasure_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageItem::treasure_id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.MessageItem.treasure_id)
  return _internal_treasure_id();
}
inline void MessageItem::_internal_set_treasure_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  treasure_id_ = value;
}
inline void MessageItem::set_treasure_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_treasure_id(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.MessageItem.treasure_id)
}

// -------------------------------------------------------------------

// Combo

// .bilibili.broadcast.message.intl.Author author = 1 [json_name = "author"];
inline bool Combo::_internal_has_author() const {
  return this != internal_default_instance() && author_ != nullptr;
}
inline bool Combo::has_author() const {
  return _internal_has_author();
}
inline void Combo::clear_author() {
  if (GetArenaForAllocation() == nullptr && author_ != nullptr) {
    delete author_;
  }
  author_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::Author& Combo::_internal_author() const {
  const ::bilibili::broadcast::message::intl::Author* p = author_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::Author&>(
      ::bilibili::broadcast::message::intl::_Author_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::Author& Combo::author() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Combo.author)
  return _internal_author();
}
inline void Combo::unsafe_arena_set_allocated_author(
    ::bilibili::broadcast::message::intl::Author* author) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(author_);
  }
  author_ = author;
  if (author) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.Combo.author)
}
inline ::bilibili::broadcast::message::intl::Author* Combo::release_author() {
  
  ::bilibili::broadcast::message::intl::Author* temp = author_;
  author_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::Author* Combo::unsafe_arena_release_author() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Combo.author)
  
  ::bilibili::broadcast::message::intl::Author* temp = author_;
  author_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::Author* Combo::_internal_mutable_author() {
  
  if (author_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::Author>(GetArenaForAllocation());
    author_ = p;
  }
  return author_;
}
inline ::bilibili::broadcast::message::intl::Author* Combo::mutable_author() {
  ::bilibili::broadcast::message::intl::Author* _msg = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Combo.author)
  return _msg;
}
inline void Combo::set_allocated_author(::bilibili::broadcast::message::intl::Author* author) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete author_;
  }
  if (author) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::Author>::GetOwningArena(author);
    if (message_arena != submessage_arena) {
      author = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Combo.author)
}

// string action = 2 [json_name = "action"];
inline void Combo::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& Combo::action() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Combo.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Combo::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Combo.action)
}
inline std::string* Combo::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Combo.action)
  return _s;
}
inline const std::string& Combo::_internal_action() const {
  return action_.Get();
}
inline void Combo::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Combo::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Combo::release_action() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Combo.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Combo::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Combo.action)
}

// .bilibili.broadcast.message.intl.Treasure treasure = 3 [json_name = "treasure"];
inline bool Combo::_internal_has_treasure() const {
  return this != internal_default_instance() && treasure_ != nullptr;
}
inline bool Combo::has_treasure() const {
  return _internal_has_treasure();
}
inline void Combo::clear_treasure() {
  if (GetArenaForAllocation() == nullptr && treasure_ != nullptr) {
    delete treasure_;
  }
  treasure_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::Treasure& Combo::_internal_treasure() const {
  const ::bilibili::broadcast::message::intl::Treasure* p = treasure_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::Treasure&>(
      ::bilibili::broadcast::message::intl::_Treasure_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::Treasure& Combo::treasure() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Combo.treasure)
  return _internal_treasure();
}
inline void Combo::unsafe_arena_set_allocated_treasure(
    ::bilibili::broadcast::message::intl::Treasure* treasure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(treasure_);
  }
  treasure_ = treasure;
  if (treasure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.Combo.treasure)
}
inline ::bilibili::broadcast::message::intl::Treasure* Combo::release_treasure() {
  
  ::bilibili::broadcast::message::intl::Treasure* temp = treasure_;
  treasure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::Treasure* Combo::unsafe_arena_release_treasure() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Combo.treasure)
  
  ::bilibili::broadcast::message::intl::Treasure* temp = treasure_;
  treasure_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::Treasure* Combo::_internal_mutable_treasure() {
  
  if (treasure_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::Treasure>(GetArenaForAllocation());
    treasure_ = p;
  }
  return treasure_;
}
inline ::bilibili::broadcast::message::intl::Treasure* Combo::mutable_treasure() {
  ::bilibili::broadcast::message::intl::Treasure* _msg = _internal_mutable_treasure();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Combo.treasure)
  return _msg;
}
inline void Combo::set_allocated_treasure(::bilibili::broadcast::message::intl::Treasure* treasure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete treasure_;
  }
  if (treasure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::Treasure>::GetOwningArena(treasure);
    if (message_arena != submessage_arena) {
      treasure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, treasure, submessage_arena);
    }
    
  } else {
    
  }
  treasure_ = treasure;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Combo.treasure)
}

// .bilibili.broadcast.message.intl.ComboStyle style = 4 [json_name = "style"];
inline bool Combo::_internal_has_style() const {
  return this != internal_default_instance() && style_ != nullptr;
}
inline bool Combo::has_style() const {
  return _internal_has_style();
}
inline void Combo::clear_style() {
  if (GetArenaForAllocation() == nullptr && style_ != nullptr) {
    delete style_;
  }
  style_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::ComboStyle& Combo::_internal_style() const {
  const ::bilibili::broadcast::message::intl::ComboStyle* p = style_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::ComboStyle&>(
      ::bilibili::broadcast::message::intl::_ComboStyle_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::ComboStyle& Combo::style() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Combo.style)
  return _internal_style();
}
inline void Combo::unsafe_arena_set_allocated_style(
    ::bilibili::broadcast::message::intl::ComboStyle* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style_);
  }
  style_ = style;
  if (style) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.Combo.style)
}
inline ::bilibili::broadcast::message::intl::ComboStyle* Combo::release_style() {
  
  ::bilibili::broadcast::message::intl::ComboStyle* temp = style_;
  style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::ComboStyle* Combo::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Combo.style)
  
  ::bilibili::broadcast::message::intl::ComboStyle* temp = style_;
  style_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::ComboStyle* Combo::_internal_mutable_style() {
  
  if (style_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::ComboStyle>(GetArenaForAllocation());
    style_ = p;
  }
  return style_;
}
inline ::bilibili::broadcast::message::intl::ComboStyle* Combo::mutable_style() {
  ::bilibili::broadcast::message::intl::ComboStyle* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Combo.style)
  return _msg;
}
inline void Combo::set_allocated_style(::bilibili::broadcast::message::intl::ComboStyle* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete style_;
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::ComboStyle>::GetOwningArena(style);
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    
  } else {
    
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Combo.style)
}

// string combo_id = 5 [json_name = "combo_id"];
inline void Combo::clear_combo_id() {
  combo_id_.ClearToEmpty();
}
inline const std::string& Combo::combo_id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Combo.combo_id)
  return _internal_combo_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Combo::set_combo_id(ArgT0&& arg0, ArgT... args) {
 
 combo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Combo.combo_id)
}
inline std::string* Combo::mutable_combo_id() {
  std::string* _s = _internal_mutable_combo_id();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Combo.combo_id)
  return _s;
}
inline const std::string& Combo::_internal_combo_id() const {
  return combo_id_.Get();
}
inline void Combo::_internal_set_combo_id(const std::string& value) {
  
  combo_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Combo::_internal_mutable_combo_id() {
  
  return combo_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Combo::release_combo_id() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Combo.combo_id)
  return combo_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Combo::set_allocated_combo_id(std::string* combo_id) {
  if (combo_id != nullptr) {
    
  } else {
    
  }
  combo_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), combo_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Combo.combo_id)
}

// -------------------------------------------------------------------

// Treasure

// int64 id = 1 [json_name = "id"];
inline void Treasure::clear_id() {
  id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Treasure::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Treasure::id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Treasure.id)
  return _internal_id();
}
inline void Treasure::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Treasure::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Treasure.id)
}

// string title = 2 [json_name = "title"];
inline void Treasure::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Treasure::title() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Treasure.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Treasure::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Treasure.title)
}
inline std::string* Treasure::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Treasure.title)
  return _s;
}
inline const std::string& Treasure::_internal_title() const {
  return title_.Get();
}
inline void Treasure::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Treasure::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Treasure::release_title() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Treasure.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Treasure::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Treasure.title)
}

// string icon = 3 [json_name = "icon"];
inline void Treasure::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& Treasure::icon() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Treasure.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Treasure::set_icon(ArgT0&& arg0, ArgT... args) {
 
 icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Treasure.icon)
}
inline std::string* Treasure::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Treasure.icon)
  return _s;
}
inline const std::string& Treasure::_internal_icon() const {
  return icon_.Get();
}
inline void Treasure::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Treasure::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Treasure::release_icon() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Treasure.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Treasure::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Treasure.icon)
}

// int64 number = 4 [json_name = "number"];
inline void Treasure::clear_number() {
  number_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Treasure::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Treasure::number() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Treasure.number)
  return _internal_number();
}
inline void Treasure::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
}
inline void Treasure::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Treasure.number)
}

// int64 stars = 5 [json_name = "stars"];
inline void Treasure::clear_stars() {
  stars_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Treasure::_internal_stars() const {
  return stars_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Treasure::stars() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Treasure.stars)
  return _internal_stars();
}
inline void Treasure::_internal_set_stars(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  stars_ = value;
}
inline void Treasure::set_stars(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stars(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Treasure.stars)
}

// .bilibili.broadcast.message.intl.Animation animation = 6 [json_name = "animation"];
inline bool Treasure::_internal_has_animation() const {
  return this != internal_default_instance() && animation_ != nullptr;
}
inline bool Treasure::has_animation() const {
  return _internal_has_animation();
}
inline void Treasure::clear_animation() {
  if (GetArenaForAllocation() == nullptr && animation_ != nullptr) {
    delete animation_;
  }
  animation_ = nullptr;
}
inline const ::bilibili::broadcast::message::intl::Animation& Treasure::_internal_animation() const {
  const ::bilibili::broadcast::message::intl::Animation* p = animation_;
  return p != nullptr ? *p : reinterpret_cast<const ::bilibili::broadcast::message::intl::Animation&>(
      ::bilibili::broadcast::message::intl::_Animation_default_instance_);
}
inline const ::bilibili::broadcast::message::intl::Animation& Treasure::animation() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Treasure.animation)
  return _internal_animation();
}
inline void Treasure::unsafe_arena_set_allocated_animation(
    ::bilibili::broadcast::message::intl::Animation* animation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation_);
  }
  animation_ = animation;
  if (animation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bilibili.broadcast.message.intl.Treasure.animation)
}
inline ::bilibili::broadcast::message::intl::Animation* Treasure::release_animation() {
  
  ::bilibili::broadcast::message::intl::Animation* temp = animation_;
  animation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::bilibili::broadcast::message::intl::Animation* Treasure::unsafe_arena_release_animation() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Treasure.animation)
  
  ::bilibili::broadcast::message::intl::Animation* temp = animation_;
  animation_ = nullptr;
  return temp;
}
inline ::bilibili::broadcast::message::intl::Animation* Treasure::_internal_mutable_animation() {
  
  if (animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bilibili::broadcast::message::intl::Animation>(GetArenaForAllocation());
    animation_ = p;
  }
  return animation_;
}
inline ::bilibili::broadcast::message::intl::Animation* Treasure::mutable_animation() {
  ::bilibili::broadcast::message::intl::Animation* _msg = _internal_mutable_animation();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Treasure.animation)
  return _msg;
}
inline void Treasure::set_allocated_animation(::bilibili::broadcast::message::intl::Animation* animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete animation_;
  }
  if (animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::bilibili::broadcast::message::intl::Animation>::GetOwningArena(animation);
    if (message_arena != submessage_arena) {
      animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation, submessage_arena);
    }
    
  } else {
    
  }
  animation_ = animation;
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Treasure.animation)
}

// int64 animation_type = 7 [json_name = "animation_type"];
inline void Treasure::clear_animation_type() {
  animation_type_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Treasure::_internal_animation_type() const {
  return animation_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Treasure::animation_type() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Treasure.animation_type)
  return _internal_animation_type();
}
inline void Treasure::_internal_set_animation_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  animation_type_ = value;
}
inline void Treasure::set_animation_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_animation_type(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Treasure.animation_type)
}

// -------------------------------------------------------------------

// Animation

// string resource_name = 1 [json_name = "resource_name"];
inline void Animation::clear_resource_name() {
  resource_name_.ClearToEmpty();
}
inline const std::string& Animation::resource_name() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Animation.resource_name)
  return _internal_resource_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Animation::set_resource_name(ArgT0&& arg0, ArgT... args) {
 
 resource_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Animation.resource_name)
}
inline std::string* Animation::mutable_resource_name() {
  std::string* _s = _internal_mutable_resource_name();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Animation.resource_name)
  return _s;
}
inline const std::string& Animation::_internal_resource_name() const {
  return resource_name_.Get();
}
inline void Animation::_internal_set_resource_name(const std::string& value) {
  
  resource_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Animation::_internal_mutable_resource_name() {
  
  return resource_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Animation::release_resource_name() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Animation.resource_name)
  return resource_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Animation::set_allocated_resource_name(std::string* resource_name) {
  if (resource_name != nullptr) {
    
  } else {
    
  }
  resource_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Animation.resource_name)
}

// string file_name = 2 [json_name = "file_name"];
inline void Animation::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& Animation::file_name() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Animation.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Animation::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Animation.file_name)
}
inline std::string* Animation::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Animation.file_name)
  return _s;
}
inline const std::string& Animation::_internal_file_name() const {
  return file_name_.Get();
}
inline void Animation::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Animation::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Animation::release_file_name() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Animation.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Animation::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Animation.file_name)
}

// string animation_url = 3 [json_name = "animation_url"];
inline void Animation::clear_animation_url() {
  animation_url_.ClearToEmpty();
}
inline const std::string& Animation::animation_url() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Animation.animation_url)
  return _internal_animation_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Animation::set_animation_url(ArgT0&& arg0, ArgT... args) {
 
 animation_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Animation.animation_url)
}
inline std::string* Animation::mutable_animation_url() {
  std::string* _s = _internal_mutable_animation_url();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Animation.animation_url)
  return _s;
}
inline const std::string& Animation::_internal_animation_url() const {
  return animation_url_.Get();
}
inline void Animation::_internal_set_animation_url(const std::string& value) {
  
  animation_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Animation::_internal_mutable_animation_url() {
  
  return animation_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Animation::release_animation_url() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Animation.animation_url)
  return animation_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Animation::set_allocated_animation_url(std::string* animation_url) {
  if (animation_url != nullptr) {
    
  } else {
    
  }
  animation_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), animation_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Animation.animation_url)
}

// int64 width = 4 [json_name = "width"];
inline void Animation::clear_width() {
  width_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Animation::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Animation::width() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Animation.width)
  return _internal_width();
}
inline void Animation::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  width_ = value;
}
inline void Animation::set_width(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Animation.width)
}

// int64 height = 5 [json_name = "height"];
inline void Animation::clear_height() {
  height_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Animation::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Animation::height() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Animation.height)
  return _internal_height();
}
inline void Animation::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void Animation::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Animation.height)
}

// -------------------------------------------------------------------

// ComboStyle

// string bg_color_start = 1 [json_name = "bg_color_start"];
inline void ComboStyle::clear_bg_color_start() {
  bg_color_start_.ClearToEmpty();
}
inline const std::string& ComboStyle::bg_color_start() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.ComboStyle.bg_color_start)
  return _internal_bg_color_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComboStyle::set_bg_color_start(ArgT0&& arg0, ArgT... args) {
 
 bg_color_start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.ComboStyle.bg_color_start)
}
inline std::string* ComboStyle::mutable_bg_color_start() {
  std::string* _s = _internal_mutable_bg_color_start();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.ComboStyle.bg_color_start)
  return _s;
}
inline const std::string& ComboStyle::_internal_bg_color_start() const {
  return bg_color_start_.Get();
}
inline void ComboStyle::_internal_set_bg_color_start(const std::string& value) {
  
  bg_color_start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComboStyle::_internal_mutable_bg_color_start() {
  
  return bg_color_start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComboStyle::release_bg_color_start() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.ComboStyle.bg_color_start)
  return bg_color_start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComboStyle::set_allocated_bg_color_start(std::string* bg_color_start) {
  if (bg_color_start != nullptr) {
    
  } else {
    
  }
  bg_color_start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bg_color_start,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.ComboStyle.bg_color_start)
}

// string bg_color_end = 2 [json_name = "bg_color_end"];
inline void ComboStyle::clear_bg_color_end() {
  bg_color_end_.ClearToEmpty();
}
inline const std::string& ComboStyle::bg_color_end() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.ComboStyle.bg_color_end)
  return _internal_bg_color_end();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComboStyle::set_bg_color_end(ArgT0&& arg0, ArgT... args) {
 
 bg_color_end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.ComboStyle.bg_color_end)
}
inline std::string* ComboStyle::mutable_bg_color_end() {
  std::string* _s = _internal_mutable_bg_color_end();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.ComboStyle.bg_color_end)
  return _s;
}
inline const std::string& ComboStyle::_internal_bg_color_end() const {
  return bg_color_end_.Get();
}
inline void ComboStyle::_internal_set_bg_color_end(const std::string& value) {
  
  bg_color_end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComboStyle::_internal_mutable_bg_color_end() {
  
  return bg_color_end_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComboStyle::release_bg_color_end() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.ComboStyle.bg_color_end)
  return bg_color_end_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComboStyle::set_allocated_bg_color_end(std::string* bg_color_end) {
  if (bg_color_end != nullptr) {
    
  } else {
    
  }
  bg_color_end_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bg_color_end,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.ComboStyle.bg_color_end)
}

// string gift_color = 3 [json_name = "gift_color"];
inline void ComboStyle::clear_gift_color() {
  gift_color_.ClearToEmpty();
}
inline const std::string& ComboStyle::gift_color() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.ComboStyle.gift_color)
  return _internal_gift_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComboStyle::set_gift_color(ArgT0&& arg0, ArgT... args) {
 
 gift_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.ComboStyle.gift_color)
}
inline std::string* ComboStyle::mutable_gift_color() {
  std::string* _s = _internal_mutable_gift_color();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.ComboStyle.gift_color)
  return _s;
}
inline const std::string& ComboStyle::_internal_gift_color() const {
  return gift_color_.Get();
}
inline void ComboStyle::_internal_set_gift_color(const std::string& value) {
  
  gift_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComboStyle::_internal_mutable_gift_color() {
  
  return gift_color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComboStyle::release_gift_color() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.ComboStyle.gift_color)
  return gift_color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComboStyle::set_allocated_gift_color(std::string* gift_color) {
  if (gift_color != nullptr) {
    
  } else {
    
  }
  gift_color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gift_color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.ComboStyle.gift_color)
}

// string name_color = 4 [json_name = "name_color"];
inline void ComboStyle::clear_name_color() {
  name_color_.ClearToEmpty();
}
inline const std::string& ComboStyle::name_color() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.ComboStyle.name_color)
  return _internal_name_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComboStyle::set_name_color(ArgT0&& arg0, ArgT... args) {
 
 name_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.ComboStyle.name_color)
}
inline std::string* ComboStyle::mutable_name_color() {
  std::string* _s = _internal_mutable_name_color();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.ComboStyle.name_color)
  return _s;
}
inline const std::string& ComboStyle::_internal_name_color() const {
  return name_color_.Get();
}
inline void ComboStyle::_internal_set_name_color(const std::string& value) {
  
  name_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComboStyle::_internal_mutable_name_color() {
  
  return name_color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComboStyle::release_name_color() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.ComboStyle.name_color)
  return name_color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComboStyle::set_allocated_name_color(std::string* name_color) {
  if (name_color != nullptr) {
    
  } else {
    
  }
  name_color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.ComboStyle.name_color)
}

// int32 gift_num_size = 5 [json_name = "gift_num_size"];
inline void ComboStyle::clear_gift_num_size() {
  gift_num_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboStyle::_internal_gift_num_size() const {
  return gift_num_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboStyle::gift_num_size() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.ComboStyle.gift_num_size)
  return _internal_gift_num_size();
}
inline void ComboStyle::_internal_set_gift_num_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gift_num_size_ = value;
}
inline void ComboStyle::set_gift_num_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gift_num_size(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.ComboStyle.gift_num_size)
}

// int64 duration = 6 [json_name = "duration"];
inline void ComboStyle::clear_duration() {
  duration_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComboStyle::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComboStyle::duration() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.ComboStyle.duration)
  return _internal_duration();
}
inline void ComboStyle::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_ = value;
}
inline void ComboStyle::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.ComboStyle.duration)
}

// int64 period = 7 [json_name = "period"];
inline void ComboStyle::clear_period() {
  period_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComboStyle::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComboStyle::period() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.ComboStyle.period)
  return _internal_period();
}
inline void ComboStyle::_internal_set_period(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  period_ = value;
}
inline void ComboStyle::set_period(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.ComboStyle.period)
}

// string bg_color_center = 8 [json_name = "bg_color_center"];
inline void ComboStyle::clear_bg_color_center() {
  bg_color_center_.ClearToEmpty();
}
inline const std::string& ComboStyle::bg_color_center() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.ComboStyle.bg_color_center)
  return _internal_bg_color_center();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComboStyle::set_bg_color_center(ArgT0&& arg0, ArgT... args) {
 
 bg_color_center_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.ComboStyle.bg_color_center)
}
inline std::string* ComboStyle::mutable_bg_color_center() {
  std::string* _s = _internal_mutable_bg_color_center();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.ComboStyle.bg_color_center)
  return _s;
}
inline const std::string& ComboStyle::_internal_bg_color_center() const {
  return bg_color_center_.Get();
}
inline void ComboStyle::_internal_set_bg_color_center(const std::string& value) {
  
  bg_color_center_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComboStyle::_internal_mutable_bg_color_center() {
  
  return bg_color_center_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComboStyle::release_bg_color_center() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.ComboStyle.bg_color_center)
  return bg_color_center_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComboStyle::set_allocated_bg_color_center(std::string* bg_color_center) {
  if (bg_color_center != nullptr) {
    
  } else {
    
  }
  bg_color_center_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bg_color_center,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.ComboStyle.bg_color_center)
}

// string gift_num_color = 9 [json_name = "gift_num_color"];
inline void ComboStyle::clear_gift_num_color() {
  gift_num_color_.ClearToEmpty();
}
inline const std::string& ComboStyle::gift_num_color() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.ComboStyle.gift_num_color)
  return _internal_gift_num_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComboStyle::set_gift_num_color(ArgT0&& arg0, ArgT... args) {
 
 gift_num_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.ComboStyle.gift_num_color)
}
inline std::string* ComboStyle::mutable_gift_num_color() {
  std::string* _s = _internal_mutable_gift_num_color();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.ComboStyle.gift_num_color)
  return _s;
}
inline const std::string& ComboStyle::_internal_gift_num_color() const {
  return gift_num_color_.Get();
}
inline void ComboStyle::_internal_set_gift_num_color(const std::string& value) {
  
  gift_num_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComboStyle::_internal_mutable_gift_num_color() {
  
  return gift_num_color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComboStyle::release_gift_num_color() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.ComboStyle.gift_num_color)
  return gift_num_color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComboStyle::set_allocated_gift_num_color(std::string* gift_num_color) {
  if (gift_num_color != nullptr) {
    
  } else {
    
  }
  gift_num_color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gift_num_color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.ComboStyle.gift_num_color)
}

// -------------------------------------------------------------------

// Author

// int64 mid = 1 [json_name = "mid"];
inline void Author::clear_mid() {
  mid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Author::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Author::mid() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Author.mid)
  return _internal_mid();
}
inline void Author::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mid_ = value;
}
inline void Author::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Author.mid)
}

// string name = 2 [json_name = "name"];
inline void Author::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Author::name() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Author.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Author::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Author.name)
}
inline std::string* Author::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Author.name)
  return _s;
}
inline const std::string& Author::_internal_name() const {
  return name_.Get();
}
inline void Author::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Author::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Author::release_name() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Author.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Author::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Author.name)
}

// int32 rank = 3 [json_name = "rank"];
inline void Author::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Author::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Author::rank() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Author.rank)
  return _internal_rank();
}
inline void Author::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void Author::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Author.rank)
}

// string avatar = 4 [json_name = "avatar"];
inline void Author::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& Author::avatar() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Author.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Author::set_avatar(ArgT0&& arg0, ArgT... args) {
 
 avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Author.avatar)
}
inline std::string* Author::mutable_avatar() {
  std::string* _s = _internal_mutable_avatar();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Author.avatar)
  return _s;
}
inline const std::string& Author::_internal_avatar() const {
  return avatar_.Get();
}
inline void Author::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Author::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Author::release_avatar() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Author.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Author::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Author.avatar)
}

// -------------------------------------------------------------------

// DmEventReply

// repeated .bilibili.broadcast.message.intl.DmItem Items = 1;
inline int DmEventReply::_internal_items_size() const {
  return items_.size();
}
inline int DmEventReply::items_size() const {
  return _internal_items_size();
}
inline void DmEventReply::clear_items() {
  items_.Clear();
}
inline ::bilibili::broadcast::message::intl::DmItem* DmEventReply::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.DmEventReply.Items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::DmItem >*
DmEventReply::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.broadcast.message.intl.DmEventReply.Items)
  return &items_;
}
inline const ::bilibili::broadcast::message::intl::DmItem& DmEventReply::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::bilibili::broadcast::message::intl::DmItem& DmEventReply::items(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.DmEventReply.Items)
  return _internal_items(index);
}
inline ::bilibili::broadcast::message::intl::DmItem* DmEventReply::_internal_add_items() {
  return items_.Add();
}
inline ::bilibili::broadcast::message::intl::DmItem* DmEventReply::add_items() {
  ::bilibili::broadcast::message::intl::DmItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:bilibili.broadcast.message.intl.DmEventReply.Items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::DmItem >&
DmEventReply::items() const {
  // @@protoc_insertion_point(field_list:bilibili.broadcast.message.intl.DmEventReply.Items)
  return items_;
}

// -------------------------------------------------------------------

// Style

// string NameColor = 1;
inline void Style::clear_namecolor() {
  namecolor_.ClearToEmpty();
}
inline const std::string& Style::namecolor() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Style.NameColor)
  return _internal_namecolor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Style::set_namecolor(ArgT0&& arg0, ArgT... args) {
 
 namecolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Style.NameColor)
}
inline std::string* Style::mutable_namecolor() {
  std::string* _s = _internal_mutable_namecolor();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Style.NameColor)
  return _s;
}
inline const std::string& Style::_internal_namecolor() const {
  return namecolor_.Get();
}
inline void Style::_internal_set_namecolor(const std::string& value) {
  
  namecolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Style::_internal_mutable_namecolor() {
  
  return namecolor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Style::release_namecolor() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Style.NameColor)
  return namecolor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Style::set_allocated_namecolor(std::string* namecolor) {
  if (namecolor != nullptr) {
    
  } else {
    
  }
  namecolor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namecolor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Style.NameColor)
}

// string ContentColor = 2;
inline void Style::clear_contentcolor() {
  contentcolor_.ClearToEmpty();
}
inline const std::string& Style::contentcolor() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Style.ContentColor)
  return _internal_contentcolor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Style::set_contentcolor(ArgT0&& arg0, ArgT... args) {
 
 contentcolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Style.ContentColor)
}
inline std::string* Style::mutable_contentcolor() {
  std::string* _s = _internal_mutable_contentcolor();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Style.ContentColor)
  return _s;
}
inline const std::string& Style::_internal_contentcolor() const {
  return contentcolor_.Get();
}
inline void Style::_internal_set_contentcolor(const std::string& value) {
  
  contentcolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Style::_internal_mutable_contentcolor() {
  
  return contentcolor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Style::release_contentcolor() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Style.ContentColor)
  return contentcolor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Style::set_allocated_contentcolor(std::string* contentcolor) {
  if (contentcolor != nullptr) {
    
  } else {
    
  }
  contentcolor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contentcolor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Style.ContentColor)
}

// string BgColor = 3;
inline void Style::clear_bgcolor() {
  bgcolor_.ClearToEmpty();
}
inline const std::string& Style::bgcolor() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Style.BgColor)
  return _internal_bgcolor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Style::set_bgcolor(ArgT0&& arg0, ArgT... args) {
 
 bgcolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Style.BgColor)
}
inline std::string* Style::mutable_bgcolor() {
  std::string* _s = _internal_mutable_bgcolor();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Style.BgColor)
  return _s;
}
inline const std::string& Style::_internal_bgcolor() const {
  return bgcolor_.Get();
}
inline void Style::_internal_set_bgcolor(const std::string& value) {
  
  bgcolor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Style::_internal_mutable_bgcolor() {
  
  return bgcolor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Style::release_bgcolor() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Style.BgColor)
  return bgcolor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Style::set_allocated_bgcolor(std::string* bgcolor) {
  if (bgcolor != nullptr) {
    
  } else {
    
  }
  bgcolor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bgcolor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Style.BgColor)
}

// bool Bold = 4;
inline void Style::clear_bold() {
  bold_ = false;
}
inline bool Style::_internal_bold() const {
  return bold_;
}
inline bool Style::bold() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Style.Bold)
  return _internal_bold();
}
inline void Style::_internal_set_bold(bool value) {
  
  bold_ = value;
}
inline void Style::set_bold(bool value) {
  _internal_set_bold(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Style.Bold)
}

// -------------------------------------------------------------------

// Sticker

// int64 ID = 1;
inline void Sticker::clear_id() {
  id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sticker::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sticker::id() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Sticker.ID)
  return _internal_id();
}
inline void Sticker::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Sticker::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Sticker.ID)
}

// string Title = 2;
inline void Sticker::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& Sticker::title() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Sticker.Title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sticker::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Sticker.Title)
}
inline std::string* Sticker::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Sticker.Title)
  return _s;
}
inline const std::string& Sticker::_internal_title() const {
  return title_.Get();
}
inline void Sticker::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sticker::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sticker::release_title() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Sticker.Title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sticker::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Sticker.Title)
}

// string Icon = 3;
inline void Sticker::clear_icon() {
  icon_.ClearToEmpty();
}
inline const std::string& Sticker::icon() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Sticker.Icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sticker::set_icon(ArgT0&& arg0, ArgT... args) {
 
 icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Sticker.Icon)
}
inline std::string* Sticker::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.Sticker.Icon)
  return _s;
}
inline const std::string& Sticker::_internal_icon() const {
  return icon_.Get();
}
inline void Sticker::_internal_set_icon(const std::string& value) {
  
  icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sticker::_internal_mutable_icon() {
  
  return icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sticker::release_icon() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.Sticker.Icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sticker::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.Sticker.Icon)
}

// int64 Number = 4;
inline void Sticker::clear_number() {
  number_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sticker::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sticker::number() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.Sticker.Number)
  return _internal_number();
}
inline void Sticker::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
}
inline void Sticker::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.Sticker.Number)
}

// -------------------------------------------------------------------

// TopUser

// string PaidUserNum = 1;
inline void TopUser::clear_paidusernum() {
  paidusernum_.ClearToEmpty();
}
inline const std::string& TopUser::paidusernum() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.TopUser.PaidUserNum)
  return _internal_paidusernum();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopUser::set_paidusernum(ArgT0&& arg0, ArgT... args) {
 
 paidusernum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.TopUser.PaidUserNum)
}
inline std::string* TopUser::mutable_paidusernum() {
  std::string* _s = _internal_mutable_paidusernum();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.TopUser.PaidUserNum)
  return _s;
}
inline const std::string& TopUser::_internal_paidusernum() const {
  return paidusernum_.Get();
}
inline void TopUser::_internal_set_paidusernum(const std::string& value) {
  
  paidusernum_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TopUser::_internal_mutable_paidusernum() {
  
  return paidusernum_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TopUser::release_paidusernum() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.TopUser.PaidUserNum)
  return paidusernum_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TopUser::set_allocated_paidusernum(std::string* paidusernum) {
  if (paidusernum != nullptr) {
    
  } else {
    
  }
  paidusernum_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paidusernum,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.TopUser.PaidUserNum)
}

// repeated .bilibili.broadcast.message.intl.User Users = 2;
inline int TopUser::_internal_users_size() const {
  return users_.size();
}
inline int TopUser::users_size() const {
  return _internal_users_size();
}
inline void TopUser::clear_users() {
  users_.Clear();
}
inline ::bilibili::broadcast::message::intl::User* TopUser::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.TopUser.Users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::User >*
TopUser::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.broadcast.message.intl.TopUser.Users)
  return &users_;
}
inline const ::bilibili::broadcast::message::intl::User& TopUser::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::bilibili::broadcast::message::intl::User& TopUser::users(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.TopUser.Users)
  return _internal_users(index);
}
inline ::bilibili::broadcast::message::intl::User* TopUser::_internal_add_users() {
  return users_.Add();
}
inline ::bilibili::broadcast::message::intl::User* TopUser::add_users() {
  ::bilibili::broadcast::message::intl::User* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:bilibili.broadcast.message.intl.TopUser.Users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::User >&
TopUser::users() const {
  // @@protoc_insertion_point(field_list:bilibili.broadcast.message.intl.TopUser.Users)
  return users_;
}

// -------------------------------------------------------------------

// User

// int64 Mid = 1;
inline void User::clear_mid() {
  mid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::_internal_mid() const {
  return mid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::mid() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.User.Mid)
  return _internal_mid();
}
inline void User::_internal_set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  mid_ = value;
}
inline void User::set_mid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_mid(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.User.Mid)
}

// string Name = 2;
inline void User::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.User.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.User.Name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.User.Name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.User.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.User.Name)
}

// string Face = 3;
inline void User::clear_face() {
  face_.ClearToEmpty();
}
inline const std::string& User::face() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.User.Face)
  return _internal_face();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_face(ArgT0&& arg0, ArgT... args) {
 
 face_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.User.Face)
}
inline std::string* User::mutable_face() {
  std::string* _s = _internal_mutable_face();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.User.Face)
  return _s;
}
inline const std::string& User::_internal_face() const {
  return face_.Get();
}
inline void User::_internal_set_face(const std::string& value) {
  
  face_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_face() {
  
  return face_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User::release_face() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.User.Face)
  return face_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void User::set_allocated_face(std::string* face) {
  if (face != nullptr) {
    
  } else {
    
  }
  face_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.User.Face)
}

// int64 score = 4;
inline void User::clear_score() {
  score_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::score() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.User.score)
  return _internal_score();
}
inline void User::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void User::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.User.score)
}

// -------------------------------------------------------------------

// PopupInfo

// repeated .bilibili.broadcast.message.intl.PopupInfoItem popup_info_list = 1;
inline int PopupInfo::_internal_popup_info_list_size() const {
  return popup_info_list_.size();
}
inline int PopupInfo::popup_info_list_size() const {
  return _internal_popup_info_list_size();
}
inline void PopupInfo::clear_popup_info_list() {
  popup_info_list_.Clear();
}
inline ::bilibili::broadcast::message::intl::PopupInfoItem* PopupInfo::mutable_popup_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.PopupInfo.popup_info_list)
  return popup_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::PopupInfoItem >*
PopupInfo::mutable_popup_info_list() {
  // @@protoc_insertion_point(field_mutable_list:bilibili.broadcast.message.intl.PopupInfo.popup_info_list)
  return &popup_info_list_;
}
inline const ::bilibili::broadcast::message::intl::PopupInfoItem& PopupInfo::_internal_popup_info_list(int index) const {
  return popup_info_list_.Get(index);
}
inline const ::bilibili::broadcast::message::intl::PopupInfoItem& PopupInfo::popup_info_list(int index) const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfo.popup_info_list)
  return _internal_popup_info_list(index);
}
inline ::bilibili::broadcast::message::intl::PopupInfoItem* PopupInfo::_internal_add_popup_info_list() {
  return popup_info_list_.Add();
}
inline ::bilibili::broadcast::message::intl::PopupInfoItem* PopupInfo::add_popup_info_list() {
  ::bilibili::broadcast::message::intl::PopupInfoItem* _add = _internal_add_popup_info_list();
  // @@protoc_insertion_point(field_add:bilibili.broadcast.message.intl.PopupInfo.popup_info_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bilibili::broadcast::message::intl::PopupInfoItem >&
PopupInfo::popup_info_list() const {
  // @@protoc_insertion_point(field_list:bilibili.broadcast.message.intl.PopupInfo.popup_info_list)
  return popup_info_list_;
}

// int64 duration = 2;
inline void PopupInfo::clear_duration() {
  duration_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PopupInfo::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PopupInfo::duration() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfo.duration)
  return _internal_duration();
}
inline void PopupInfo::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_ = value;
}
inline void PopupInfo::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfo.duration)
}

// -------------------------------------------------------------------

// PopupInfoItem

// .bilibili.broadcast.message.intl.PopupItemType type = 1;
inline void PopupInfoItem::clear_type() {
  type_ = 0;
}
inline ::bilibili::broadcast::message::intl::PopupItemType PopupInfoItem::_internal_type() const {
  return static_cast< ::bilibili::broadcast::message::intl::PopupItemType >(type_);
}
inline ::bilibili::broadcast::message::intl::PopupItemType PopupInfoItem::type() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.type)
  return _internal_type();
}
inline void PopupInfoItem::_internal_set_type(::bilibili::broadcast::message::intl::PopupItemType value) {
  
  type_ = value;
}
inline void PopupInfoItem::set_type(::bilibili::broadcast::message::intl::PopupItemType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.type)
}

// .bilibili.broadcast.message.intl.PopupItemPosition positon = 2;
inline void PopupInfoItem::clear_positon() {
  positon_ = 0;
}
inline ::bilibili::broadcast::message::intl::PopupItemPosition PopupInfoItem::_internal_positon() const {
  return static_cast< ::bilibili::broadcast::message::intl::PopupItemPosition >(positon_);
}
inline ::bilibili::broadcast::message::intl::PopupItemPosition PopupInfoItem::positon() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.positon)
  return _internal_positon();
}
inline void PopupInfoItem::_internal_set_positon(::bilibili::broadcast::message::intl::PopupItemPosition value) {
  
  positon_ = value;
}
inline void PopupInfoItem::set_positon(::bilibili::broadcast::message::intl::PopupItemPosition value) {
  _internal_set_positon(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.positon)
}

// string content = 3;
inline void PopupInfoItem::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& PopupInfoItem::content() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PopupInfoItem::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.content)
}
inline std::string* PopupInfoItem::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.PopupInfoItem.content)
  return _s;
}
inline const std::string& PopupInfoItem::_internal_content() const {
  return content_.Get();
}
inline void PopupInfoItem::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::release_content() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.PopupInfoItem.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PopupInfoItem::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.PopupInfoItem.content)
}

// string color = 4;
inline void PopupInfoItem::clear_color() {
  color_.ClearToEmpty();
}
inline const std::string& PopupInfoItem::color() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PopupInfoItem::set_color(ArgT0&& arg0, ArgT... args) {
 
 color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.color)
}
inline std::string* PopupInfoItem::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.PopupInfoItem.color)
  return _s;
}
inline const std::string& PopupInfoItem::_internal_color() const {
  return color_.Get();
}
inline void PopupInfoItem::_internal_set_color(const std::string& value) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::_internal_mutable_color() {
  
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::release_color() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.PopupInfoItem.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PopupInfoItem::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.PopupInfoItem.color)
}

// bool bold = 5;
inline void PopupInfoItem::clear_bold() {
  bold_ = false;
}
inline bool PopupInfoItem::_internal_bold() const {
  return bold_;
}
inline bool PopupInfoItem::bold() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.bold)
  return _internal_bold();
}
inline void PopupInfoItem::_internal_set_bold(bool value) {
  
  bold_ = value;
}
inline void PopupInfoItem::set_bold(bool value) {
  _internal_set_bold(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.bold)
}

// string icon_name = 6;
inline void PopupInfoItem::clear_icon_name() {
  icon_name_.ClearToEmpty();
}
inline const std::string& PopupInfoItem::icon_name() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.icon_name)
  return _internal_icon_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PopupInfoItem::set_icon_name(ArgT0&& arg0, ArgT... args) {
 
 icon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.icon_name)
}
inline std::string* PopupInfoItem::mutable_icon_name() {
  std::string* _s = _internal_mutable_icon_name();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.PopupInfoItem.icon_name)
  return _s;
}
inline const std::string& PopupInfoItem::_internal_icon_name() const {
  return icon_name_.Get();
}
inline void PopupInfoItem::_internal_set_icon_name(const std::string& value) {
  
  icon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::_internal_mutable_icon_name() {
  
  return icon_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::release_icon_name() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.PopupInfoItem.icon_name)
  return icon_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PopupInfoItem::set_allocated_icon_name(std::string* icon_name) {
  if (icon_name != nullptr) {
    
  } else {
    
  }
  icon_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.PopupInfoItem.icon_name)
}

// string icon_url = 7;
inline void PopupInfoItem::clear_icon_url() {
  icon_url_.ClearToEmpty();
}
inline const std::string& PopupInfoItem::icon_url() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.icon_url)
  return _internal_icon_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PopupInfoItem::set_icon_url(ArgT0&& arg0, ArgT... args) {
 
 icon_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.icon_url)
}
inline std::string* PopupInfoItem::mutable_icon_url() {
  std::string* _s = _internal_mutable_icon_url();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.PopupInfoItem.icon_url)
  return _s;
}
inline const std::string& PopupInfoItem::_internal_icon_url() const {
  return icon_url_.Get();
}
inline void PopupInfoItem::_internal_set_icon_url(const std::string& value) {
  
  icon_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::_internal_mutable_icon_url() {
  
  return icon_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::release_icon_url() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.PopupInfoItem.icon_url)
  return icon_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PopupInfoItem::set_allocated_icon_url(std::string* icon_url) {
  if (icon_url != nullptr) {
    
  } else {
    
  }
  icon_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.PopupInfoItem.icon_url)
}

// int64 width = 8;
inline void PopupInfoItem::clear_width() {
  width_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PopupInfoItem::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PopupInfoItem::width() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.width)
  return _internal_width();
}
inline void PopupInfoItem::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  width_ = value;
}
inline void PopupInfoItem::set_width(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.width)
}

// int64 height = 9;
inline void PopupInfoItem::clear_height() {
  height_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PopupInfoItem::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PopupInfoItem::height() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.height)
  return _internal_height();
}
inline void PopupInfoItem::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
}
inline void PopupInfoItem::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.height)
}

// string bg_color = 10;
inline void PopupInfoItem::clear_bg_color() {
  bg_color_.ClearToEmpty();
}
inline const std::string& PopupInfoItem::bg_color() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.PopupInfoItem.bg_color)
  return _internal_bg_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PopupInfoItem::set_bg_color(ArgT0&& arg0, ArgT... args) {
 
 bg_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.PopupInfoItem.bg_color)
}
inline std::string* PopupInfoItem::mutable_bg_color() {
  std::string* _s = _internal_mutable_bg_color();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.PopupInfoItem.bg_color)
  return _s;
}
inline const std::string& PopupInfoItem::_internal_bg_color() const {
  return bg_color_.Get();
}
inline void PopupInfoItem::_internal_set_bg_color(const std::string& value) {
  
  bg_color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::_internal_mutable_bg_color() {
  
  return bg_color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PopupInfoItem::release_bg_color() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.PopupInfoItem.bg_color)
  return bg_color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PopupInfoItem::set_allocated_bg_color(std::string* bg_color) {
  if (bg_color != nullptr) {
    
  } else {
    
  }
  bg_color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bg_color,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.PopupInfoItem.bg_color)
}

// -------------------------------------------------------------------

// BlockInfo

// string notice = 1;
inline void BlockInfo::clear_notice() {
  notice_.ClearToEmpty();
}
inline const std::string& BlockInfo::notice() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.BlockInfo.notice)
  return _internal_notice();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockInfo::set_notice(ArgT0&& arg0, ArgT... args) {
 
 notice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.BlockInfo.notice)
}
inline std::string* BlockInfo::mutable_notice() {
  std::string* _s = _internal_mutable_notice();
  // @@protoc_insertion_point(field_mutable:bilibili.broadcast.message.intl.BlockInfo.notice)
  return _s;
}
inline const std::string& BlockInfo::_internal_notice() const {
  return notice_.Get();
}
inline void BlockInfo::_internal_set_notice(const std::string& value) {
  
  notice_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockInfo::_internal_mutable_notice() {
  
  return notice_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockInfo::release_notice() {
  // @@protoc_insertion_point(field_release:bilibili.broadcast.message.intl.BlockInfo.notice)
  return notice_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockInfo::set_allocated_notice(std::string* notice) {
  if (notice != nullptr) {
    
  } else {
    
  }
  notice_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:bilibili.broadcast.message.intl.BlockInfo.notice)
}

// int64 end_time = 2;
inline void BlockInfo::clear_end_time() {
  end_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockInfo::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockInfo::end_time() const {
  // @@protoc_insertion_point(field_get:bilibili.broadcast.message.intl.BlockInfo.end_time)
  return _internal_end_time();
}
inline void BlockInfo::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void BlockInfo::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:bilibili.broadcast.message.intl.BlockInfo.end_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace intl
}  // namespace message
}  // namespace broadcast
}  // namespace bilibili

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bilibili::broadcast::message::intl::DmType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bilibili::broadcast::message::intl::DmType>() {
  return ::bilibili::broadcast::message::intl::DmType_descriptor();
}
template <> struct is_proto_enum< ::bilibili::broadcast::message::intl::MessageItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bilibili::broadcast::message::intl::MessageItemType>() {
  return ::bilibili::broadcast::message::intl::MessageItemType_descriptor();
}
template <> struct is_proto_enum< ::bilibili::broadcast::message::intl::MessageItemSubType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bilibili::broadcast::message::intl::MessageItemSubType>() {
  return ::bilibili::broadcast::message::intl::MessageItemSubType_descriptor();
}
template <> struct is_proto_enum< ::bilibili::broadcast::message::intl::PopupItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bilibili::broadcast::message::intl::PopupItemType>() {
  return ::bilibili::broadcast::message::intl::PopupItemType_descriptor();
}
template <> struct is_proto_enum< ::bilibili::broadcast::message::intl::PopupItemPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bilibili::broadcast::message::intl::PopupItemPosition>() {
  return ::bilibili::broadcast::message::intl::PopupItemPosition_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DMData_2eproto
