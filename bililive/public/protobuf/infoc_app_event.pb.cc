// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: infoc_app_event.proto

#include "infoc_app_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr AppInfo::AppInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buvid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , brand_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , osver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buvid_shared_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , abi_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bilifp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0)
  , platform_(0)
  , fts_(int64_t{0})
  , uid_(0)
  , api_level_(0){}
struct AppInfoDefaultTypeInternal {
  constexpr AppInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppInfoDefaultTypeInternal() {}
  union {
    AppInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppInfoDefaultTypeInternal _AppInfo_default_instance_;
constexpr AppRuntimeInfo::AppRuntimeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , abtest_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ff_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , longitude_(0)
  , latitude_(0)
  , network_(0)
{}
struct AppRuntimeInfoDefaultTypeInternal {
  constexpr AppRuntimeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppRuntimeInfoDefaultTypeInternal() {}
  union {
    AppRuntimeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppRuntimeInfoDefaultTypeInternal _AppRuntimeInfo_default_instance_;
constexpr AppEvent_ExtendedFieldsEntry_DoNotUse::AppEvent_ExtendedFieldsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppEvent_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal {
  constexpr AppEvent_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppEvent_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppEvent_ExtendedFieldsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppEvent_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal _AppEvent_ExtendedFieldsEntry_DoNotUse_default_instance_;
constexpr AppEvent::AppEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extended_fields_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , event_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_info_(nullptr)
  , runtime_info_(nullptr)
  , app_page_view_info_(nullptr)
  , app_click_info_(nullptr)
  , app_exposure_info_(nullptr)
  , app_player_info_(nullptr)
  , ctime_(int64_t{0})
  , sn_(int64_t{0})
  , retry_send_count_(0)
  , event_category_(0)

  , sn_gen_time_(int64_t{0})
  , upload_time_(int64_t{0})
  , page_type_(0){}
struct AppEventDefaultTypeInternal {
  constexpr AppEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppEventDefaultTypeInternal() {}
  union {
    AppEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppEventDefaultTypeInternal _AppEvent_default_instance_;
constexpr AppPageViewInfo::AppPageViewInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_id_from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_(int64_t{0})
  , pvstart_(int64_t{0})
  , load_type_(0)
  , pvend_(int64_t{0}){}
struct AppPageViewInfoDefaultTypeInternal {
  constexpr AppPageViewInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppPageViewInfoDefaultTypeInternal() {}
  union {
    AppPageViewInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppPageViewInfoDefaultTypeInternal _AppPageViewInfo_default_instance_;
constexpr AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal {
  constexpr AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal _AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse_default_instance_;
constexpr AppExposureInfo_AppExposureContentInfo::AppExposureInfo_AppExposureContentInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extended_fields_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , event_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AppExposureInfo_AppExposureContentInfoDefaultTypeInternal {
  constexpr AppExposureInfo_AppExposureContentInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppExposureInfo_AppExposureContentInfoDefaultTypeInternal() {}
  union {
    AppExposureInfo_AppExposureContentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppExposureInfo_AppExposureContentInfoDefaultTypeInternal _AppExposureInfo_AppExposureContentInfo_default_instance_;
constexpr AppExposureInfo::AppExposureInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_infos_(){}
struct AppExposureInfoDefaultTypeInternal {
  constexpr AppExposureInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppExposureInfoDefaultTypeInternal() {}
  union {
    AppExposureInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppExposureInfoDefaultTypeInternal _AppExposureInfo_default_instance_;
constexpr AppClickInfo::AppClickInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AppClickInfoDefaultTypeInternal {
  constexpr AppClickInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppClickInfoDefaultTypeInternal() {}
  union {
    AppClickInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppClickInfoDefaultTypeInternal _AppClickInfo_default_instance_;
constexpr AppPlayerInfo::AppPlayerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : play_from_spmid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , season_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ep_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , progress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , speed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_clarity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
  , sub_type_(0)
  , network_type_(0)
  , danmaku_(0)
  , status_(0)
  , play_method_(0)
  , play_type_(0)
  , is_autoplay_(0)
  , video_format_(0){}
struct AppPlayerInfoDefaultTypeInternal {
  constexpr AppPlayerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppPlayerInfoDefaultTypeInternal() {}
  union {
    AppPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppPlayerInfoDefaultTypeInternal _AppPlayerInfo_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_infoc_5fapp_5fevent_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_infoc_5fapp_5fevent_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_infoc_5fapp_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_infoc_5fapp_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppInfo, app_id_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, buvid_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, chid_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, brand_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, model_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, osver_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, fts_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, buvid_shared_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, api_level_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, abi_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, bilifp_),
  PROTOBUF_FIELD_OFFSET(::AppInfo, session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, network_),
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, oid_),
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, version_),
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, version_code_),
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, logver_),
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, abtest_),
  PROTOBUF_FIELD_OFFSET(::AppRuntimeInfo, ff_version_),
  PROTOBUF_FIELD_OFFSET(::AppEvent_ExtendedFieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AppEvent_ExtendedFieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppEvent_ExtendedFieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::AppEvent_ExtendedFieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppEvent, event_id_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, app_info_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, runtime_info_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, mid_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, ctime_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, log_id_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, retry_send_count_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, sn_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, event_category_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, app_page_view_info_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, app_click_info_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, app_exposure_info_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, extended_fields_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, page_type_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, sn_gen_time_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, upload_time_),
  PROTOBUF_FIELD_OFFSET(::AppEvent, app_player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppPageViewInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppPageViewInfo, event_id_from_),
  PROTOBUF_FIELD_OFFSET(::AppPageViewInfo, load_type_),
  PROTOBUF_FIELD_OFFSET(::AppPageViewInfo, duration_),
  PROTOBUF_FIELD_OFFSET(::AppPageViewInfo, pvstart_),
  PROTOBUF_FIELD_OFFSET(::AppPageViewInfo, pvend_),
  PROTOBUF_FIELD_OFFSET(::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppExposureInfo_AppExposureContentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppExposureInfo_AppExposureContentInfo, event_id_),
  PROTOBUF_FIELD_OFFSET(::AppExposureInfo_AppExposureContentInfo, extended_fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppExposureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppExposureInfo, content_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppClickInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, play_from_spmid_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, season_id_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, type_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, sub_type_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, ep_id_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, progress_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, avid_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, cid_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, network_type_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, danmaku_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, status_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, play_method_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, play_type_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, player_session_id_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, speed_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, player_clarity_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, is_autoplay_),
  PROTOBUF_FIELD_OFFSET(::AppPlayerInfo, video_format_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AppInfo)},
  { 20, -1, sizeof(::AppRuntimeInfo)},
  { 34, 41, sizeof(::AppEvent_ExtendedFieldsEntry_DoNotUse)},
  { 43, -1, sizeof(::AppEvent)},
  { 65, -1, sizeof(::AppPageViewInfo)},
  { 75, 82, sizeof(::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse)},
  { 84, -1, sizeof(::AppExposureInfo_AppExposureContentInfo)},
  { 91, -1, sizeof(::AppExposureInfo)},
  { 97, -1, sizeof(::AppClickInfo)},
  { 102, -1, sizeof(::AppPlayerInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppRuntimeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppEvent_ExtendedFieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppPageViewInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppExposureInfo_AppExposureContentInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppExposureInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppClickInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AppPlayerInfo_default_instance_),
};

const char descriptor_table_protodef_infoc_5fapp_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025infoc_app_event.proto\"\374\001\n\007AppInfo\022\016\n\006a"
  "pp_id\030\001 \001(\005\022\020\n\010platform\030\002 \001(\005\022\r\n\005buvid\030\003"
  " \001(\t\022\014\n\004chid\030\004 \001(\t\022\r\n\005brand\030\005 \001(\t\022\021\n\tdev"
  "ice_id\030\006 \001(\t\022\r\n\005model\030\007 \001(\t\022\r\n\005osver\030\010 \001"
  "(\t\022\013\n\003fts\030\t \001(\003\022\024\n\014buvid_shared\030\n \001(\t\022\013\n"
  "\003uid\030\013 \001(\005\022\021\n\tapi_level\030\014 \001(\005\022\013\n\003abi\030\r \001"
  "(\t\022\016\n\006bilifp\030\016 \001(\t\022\022\n\nsession_id\030\017 \001(\t\"\277"
  "\001\n\016AppRuntimeInfo\022 \n\007network\030\001 \001(\0162\017.Run"
  "timeNetWork\022\013\n\003oid\030\002 \001(\t\022\021\n\tlongitude\030\003 "
  "\001(\001\022\020\n\010latitude\030\004 \001(\001\022\017\n\007version\030\005 \001(\t\022\024"
  "\n\014version_code\030\006 \001(\t\022\016\n\006logver\030\007 \001(\t\022\016\n\006"
  "abtest\030\010 \001(\t\022\022\n\nff_version\030\t \001(\t\"\260\004\n\010App"
  "Event\022\020\n\010event_id\030\001 \001(\t\022\032\n\010app_info\030\002 \001("
  "\0132\010.AppInfo\022%\n\014runtime_info\030\003 \001(\0132\017.AppR"
  "untimeInfo\022\013\n\003mid\030\004 \001(\t\022\r\n\005ctime\030\005 \001(\003\022\016"
  "\n\006log_id\030\006 \001(\t\022\030\n\020retry_send_count\030\007 \001(\005"
  "\022\n\n\002sn\030\010 \001(\003\022&\n\016event_category\030\t \001(\0162\016.E"
  "ventCategory\022,\n\022app_page_view_info\030\n \001(\013"
  "2\020.AppPageViewInfo\022%\n\016app_click_info\030\013 \001"
  "(\0132\r.AppClickInfo\022+\n\021app_exposure_info\030\014"
  " \001(\0132\020.AppExposureInfo\0226\n\017extended_field"
  "s\030\r \003(\0132\035.AppEvent.ExtendedFieldsEntry\022\021"
  "\n\tpage_type\030\016 \001(\005\022\023\n\013sn_gen_time\030\017 \001(\003\022\023"
  "\n\013upload_time\030\020 \001(\003\022\'\n\017app_player_info\030\021"
  " \001(\0132\016.AppPlayerInfo\0325\n\023ExtendedFieldsEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"m\n\017A"
  "ppPageViewInfo\022\025\n\revent_id_from\030\001 \001(\t\022\021\n"
  "\tload_type\030\004 \001(\005\022\020\n\010duration\030\005 \001(\003\022\017\n\007pv"
  "start\030\006 \001(\003\022\r\n\005pvend\030\007 \001(\003\"\213\002\n\017AppExposu"
  "reInfo\022>\n\rcontent_infos\030\001 \003(\0132\'.AppExpos"
  "ureInfo.AppExposureContentInfo\032\267\001\n\026AppEx"
  "posureContentInfo\022\020\n\010event_id\030\001 \001(\t\022T\n\017e"
  "xtended_fields\030\002 \003(\0132;.AppExposureInfo.A"
  "ppExposureContentInfo.ExtendedFieldsEntr"
  "y\0325\n\023ExtendedFieldsEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\"\016\n\014AppClickInfo\"\343\002\n\rApp"
  "PlayerInfo\022\027\n\017play_from_spmid\030\001 \001(\t\022\021\n\ts"
  "eason_id\030\002 \001(\t\022\014\n\004type\030\003 \001(\005\022\020\n\010sub_type"
  "\030\004 \001(\005\022\r\n\005ep_id\030\005 \001(\t\022\020\n\010progress\030\006 \001(\t\022"
  "\014\n\004avid\030\007 \001(\t\022\013\n\003cid\030\010 \001(\t\022\024\n\014network_ty"
  "pe\030\t \001(\005\022\017\n\007danmaku\030\n \001(\005\022\016\n\006status\030\013 \001("
  "\005\022\023\n\013play_method\030\014 \001(\005\022\021\n\tplay_type\030\r \001("
  "\005\022\031\n\021player_session_id\030\016 \001(\t\022\r\n\005speed\030\017 "
  "\001(\t\022\026\n\016player_clarity\030\020 \001(\t\022\023\n\013is_autopl"
  "ay\030\021 \001(\005\022\024\n\014video_format\030\022 \001(\005*\202\001\n\rEvent"
  "Category\022\t\n\005OTHER\020\000\022\014\n\010PAGEVIEW\020\001\022\t\n\005CLI"
  "CK\020\002\022\014\n\010EXPOSURE\020\003\022\n\n\006SYSTEM\020\004\022\013\n\007TRACKE"
  "R\020\005\022\n\n\006CUSTOM\020\007\022\016\n\nCOMPATIBLE\020\010\022\n\n\006PLAYE"
  "R\020\t*^\n\016RuntimeNetWork\022\013\n\007UNKNOWN\020\000\022\010\n\004WI"
  "FI\020\001\022\014\n\010CELLULAR\020\002\022\013\n\007OFFLINE\020\003\022\014\n\010OTHER"
  "NET\020\004\022\014\n\010ETHERNET\020\005BF\n)com.bilibili.lanc"
  "er.event.parser.protobufB\rAppInfocProto\242"
  "\002\tBFCNeuronb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_infoc_5fapp_5fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_infoc_5fapp_5fevent_2eproto = {
  false, false, 2099, descriptor_table_protodef_infoc_5fapp_5fevent_2eproto, "infoc_app_event.proto", 
  &descriptor_table_infoc_5fapp_5fevent_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_infoc_5fapp_5fevent_2eproto::offsets,
  file_level_metadata_infoc_5fapp_5fevent_2eproto, file_level_enum_descriptors_infoc_5fapp_5fevent_2eproto, file_level_service_descriptors_infoc_5fapp_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_infoc_5fapp_5fevent_2eproto_getter() {
  return &descriptor_table_infoc_5fapp_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_infoc_5fapp_5fevent_2eproto(&descriptor_table_infoc_5fapp_5fevent_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_infoc_5fapp_5fevent_2eproto);
  return file_level_enum_descriptors_infoc_5fapp_5fevent_2eproto[0];
}
bool EventCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuntimeNetWork_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_infoc_5fapp_5fevent_2eproto);
  return file_level_enum_descriptors_infoc_5fapp_5fevent_2eproto[1];
}
bool RuntimeNetWork_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AppInfo::_Internal {
 public:
};

AppInfo::AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppInfo)
}
AppInfo::AppInfo(const AppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buvid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buvid().empty()) {
    buvid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buvid(), 
      GetArenaForAllocation());
  }
  chid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chid().empty()) {
    chid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chid(), 
      GetArenaForAllocation());
  }
  brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_brand().empty()) {
    brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_brand(), 
      GetArenaForAllocation());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  osver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_osver().empty()) {
    osver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_osver(), 
      GetArenaForAllocation());
  }
  buvid_shared_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buvid_shared().empty()) {
    buvid_shared_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buvid_shared(), 
      GetArenaForAllocation());
  }
  abi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_abi().empty()) {
    abi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_abi(), 
      GetArenaForAllocation());
  }
  bilifp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bilifp().empty()) {
    bilifp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bilifp(), 
      GetArenaForAllocation());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&api_level_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(api_level_));
  // @@protoc_insertion_point(copy_constructor:AppInfo)
}

inline void AppInfo::SharedCtor() {
buvid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
brand_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
osver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buvid_shared_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
abi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bilifp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&api_level_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(api_level_));
}

AppInfo::~AppInfo() {
  // @@protoc_insertion_point(destructor:AppInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buvid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  brand_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buvid_shared_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bilifp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppInfo::ArenaDtor(void* object) {
  AppInfo* _this = reinterpret_cast< AppInfo* >(object);
  (void)_this;
}
void AppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buvid_.ClearToEmpty();
  chid_.ClearToEmpty();
  brand_.ClearToEmpty();
  device_id_.ClearToEmpty();
  model_.ClearToEmpty();
  osver_.ClearToEmpty();
  buvid_shared_.ClearToEmpty();
  abi_.ClearToEmpty();
  bilifp_.ClearToEmpty();
  session_id_.ClearToEmpty();
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&api_level_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(api_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          platform_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buvid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_buvid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.buvid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_chid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.chid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string brand = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_brand();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.brand"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.model"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string osver = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_osver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.osver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          fts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buvid_shared = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_buvid_shared();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.buvid_shared"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 api_level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          api_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string abi = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_abi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.abi"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bilifp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_bilifp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.bilifp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppInfo.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 app_id = 1;
  if (this->_internal_app_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_app_id(), target);
  }

  // int32 platform = 2;
  if (this->_internal_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_platform(), target);
  }

  // string buvid = 3;
  if (!this->_internal_buvid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buvid().data(), static_cast<int>(this->_internal_buvid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.buvid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_buvid(), target);
  }

  // string chid = 4;
  if (!this->_internal_chid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chid().data(), static_cast<int>(this->_internal_chid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.chid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chid(), target);
  }

  // string brand = 5;
  if (!this->_internal_brand().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brand().data(), static_cast<int>(this->_internal_brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.brand");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_brand(), target);
  }

  // string device_id = 6;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.device_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_id(), target);
  }

  // string model = 7;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.model");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_model(), target);
  }

  // string osver = 8;
  if (!this->_internal_osver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_osver().data(), static_cast<int>(this->_internal_osver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.osver");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_osver(), target);
  }

  // int64 fts = 9;
  if (this->_internal_fts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_fts(), target);
  }

  // string buvid_shared = 10;
  if (!this->_internal_buvid_shared().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buvid_shared().data(), static_cast<int>(this->_internal_buvid_shared().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.buvid_shared");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_buvid_shared(), target);
  }

  // int32 uid = 11;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_uid(), target);
  }

  // int32 api_level = 12;
  if (this->_internal_api_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_api_level(), target);
  }

  // string abi = 13;
  if (!this->_internal_abi().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abi().data(), static_cast<int>(this->_internal_abi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.abi");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_abi(), target);
  }

  // string bilifp = 14;
  if (!this->_internal_bilifp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bilifp().data(), static_cast<int>(this->_internal_bilifp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.bilifp");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_bilifp(), target);
  }

  // string session_id = 15;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppInfo.session_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppInfo)
  return target;
}

size_t AppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string buvid = 3;
  if (!this->_internal_buvid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buvid());
  }

  // string chid = 4;
  if (!this->_internal_chid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chid());
  }

  // string brand = 5;
  if (!this->_internal_brand().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brand());
  }

  // string device_id = 6;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string model = 7;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string osver = 8;
  if (!this->_internal_osver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_osver());
  }

  // string buvid_shared = 10;
  if (!this->_internal_buvid_shared().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buvid_shared());
  }

  // string abi = 13;
  if (!this->_internal_abi().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abi());
  }

  // string bilifp = 14;
  if (!this->_internal_bilifp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bilifp());
  }

  // string session_id = 15;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // int32 app_id = 1;
  if (this->_internal_app_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_app_id());
  }

  // int32 platform = 2;
  if (this->_internal_platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_platform());
  }

  // int64 fts = 9;
  if (this->_internal_fts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fts());
  }

  // int32 uid = 11;
  if (this->_internal_uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 api_level = 12;
  if (this->_internal_api_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_api_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppInfo::GetClassData() const { return &_class_data_; }

void AppInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppInfo *>(to)->MergeFrom(
      static_cast<const AppInfo &>(from));
}


void AppInfo::MergeFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buvid().empty()) {
    _internal_set_buvid(from._internal_buvid());
  }
  if (!from._internal_chid().empty()) {
    _internal_set_chid(from._internal_chid());
  }
  if (!from._internal_brand().empty()) {
    _internal_set_brand(from._internal_brand());
  }
  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_model().empty()) {
    _internal_set_model(from._internal_model());
  }
  if (!from._internal_osver().empty()) {
    _internal_set_osver(from._internal_osver());
  }
  if (!from._internal_buvid_shared().empty()) {
    _internal_set_buvid_shared(from._internal_buvid_shared());
  }
  if (!from._internal_abi().empty()) {
    _internal_set_abi(from._internal_abi());
  }
  if (!from._internal_bilifp().empty()) {
    _internal_set_bilifp(from._internal_bilifp());
  }
  if (!from._internal_session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_app_id() != 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_platform() != 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from._internal_fts() != 0) {
    _internal_set_fts(from._internal_fts());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_api_level() != 0) {
    _internal_set_api_level(from._internal_api_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppInfo::CopyFrom(const AppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppInfo::IsInitialized() const {
  return true;
}

void AppInfo::InternalSwap(AppInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buvid_, GetArenaForAllocation(),
      &other->buvid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chid_, GetArenaForAllocation(),
      &other->chid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &brand_, GetArenaForAllocation(),
      &other->brand_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, GetArenaForAllocation(),
      &other->device_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, GetArenaForAllocation(),
      &other->model_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &osver_, GetArenaForAllocation(),
      &other->osver_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buvid_shared_, GetArenaForAllocation(),
      &other->buvid_shared_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &abi_, GetArenaForAllocation(),
      &other->abi_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bilifp_, GetArenaForAllocation(),
      &other->bilifp_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, GetArenaForAllocation(),
      &other->session_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppInfo, api_level_)
      + sizeof(AppInfo::api_level_)
      - PROTOBUF_FIELD_OFFSET(AppInfo, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[0]);
}

// ===================================================================

class AppRuntimeInfo::_Internal {
 public:
};

AppRuntimeInfo::AppRuntimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppRuntimeInfo)
}
AppRuntimeInfo::AppRuntimeInfo(const AppRuntimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_oid().empty()) {
    oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oid(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  version_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version_code().empty()) {
    version_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version_code(), 
      GetArenaForAllocation());
  }
  logver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logver().empty()) {
    logver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_logver(), 
      GetArenaForAllocation());
  }
  abtest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_abtest().empty()) {
    abtest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_abtest(), 
      GetArenaForAllocation());
  }
  ff_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ff_version().empty()) {
    ff_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ff_version(), 
      GetArenaForAllocation());
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(network_));
  // @@protoc_insertion_point(copy_constructor:AppRuntimeInfo)
}

inline void AppRuntimeInfo::SharedCtor() {
oid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
logver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
abtest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ff_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&longitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&network_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(network_));
}

AppRuntimeInfo::~AppRuntimeInfo() {
  // @@protoc_insertion_point(destructor:AppRuntimeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppRuntimeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  oid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abtest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ff_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppRuntimeInfo::ArenaDtor(void* object) {
  AppRuntimeInfo* _this = reinterpret_cast< AppRuntimeInfo* >(object);
  (void)_this;
}
void AppRuntimeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppRuntimeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppRuntimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AppRuntimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oid_.ClearToEmpty();
  version_.ClearToEmpty();
  version_code_.ClearToEmpty();
  logver_.ClearToEmpty();
  abtest_.ClearToEmpty();
  ff_version_.ClearToEmpty();
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(network_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppRuntimeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .RuntimeNetWork network = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_network(static_cast<::RuntimeNetWork>(val));
        } else goto handle_unusual;
        continue;
      // string oid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_oid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppRuntimeInfo.oid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppRuntimeInfo.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_version_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppRuntimeInfo.version_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logver = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_logver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppRuntimeInfo.logver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string abtest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_abtest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppRuntimeInfo.abtest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ff_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ff_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppRuntimeInfo.ff_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppRuntimeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppRuntimeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RuntimeNetWork network = 1;
  if (this->_internal_network() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_network(), target);
  }

  // string oid = 2;
  if (!this->_internal_oid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oid().data(), static_cast<int>(this->_internal_oid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppRuntimeInfo.oid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oid(), target);
  }

  // double longitude = 3;
  if (!(this->_internal_longitude() <= 0 && this->_internal_longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  // double latitude = 4;
  if (!(this->_internal_latitude() <= 0 && this->_internal_latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_latitude(), target);
  }

  // string version = 5;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppRuntimeInfo.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // string version_code = 6;
  if (!this->_internal_version_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_code().data(), static_cast<int>(this->_internal_version_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppRuntimeInfo.version_code");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version_code(), target);
  }

  // string logver = 7;
  if (!this->_internal_logver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logver().data(), static_cast<int>(this->_internal_logver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppRuntimeInfo.logver");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_logver(), target);
  }

  // string abtest = 8;
  if (!this->_internal_abtest().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abtest().data(), static_cast<int>(this->_internal_abtest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppRuntimeInfo.abtest");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_abtest(), target);
  }

  // string ff_version = 9;
  if (!this->_internal_ff_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ff_version().data(), static_cast<int>(this->_internal_ff_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppRuntimeInfo.ff_version");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ff_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppRuntimeInfo)
  return target;
}

size_t AppRuntimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppRuntimeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string oid = 2;
  if (!this->_internal_oid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oid());
  }

  // string version = 5;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string version_code = 6;
  if (!this->_internal_version_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_code());
  }

  // string logver = 7;
  if (!this->_internal_logver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logver());
  }

  // string abtest = 8;
  if (!this->_internal_abtest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abtest());
  }

  // string ff_version = 9;
  if (!this->_internal_ff_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ff_version());
  }

  // double longitude = 3;
  if (!(this->_internal_longitude() <= 0 && this->_internal_longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 4;
  if (!(this->_internal_latitude() <= 0 && this->_internal_latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // .RuntimeNetWork network = 1;
  if (this->_internal_network() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_network());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppRuntimeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppRuntimeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppRuntimeInfo::GetClassData() const { return &_class_data_; }

void AppRuntimeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppRuntimeInfo *>(to)->MergeFrom(
      static_cast<const AppRuntimeInfo &>(from));
}


void AppRuntimeInfo::MergeFrom(const AppRuntimeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppRuntimeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_oid().empty()) {
    _internal_set_oid(from._internal_oid());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_version_code().empty()) {
    _internal_set_version_code(from._internal_version_code());
  }
  if (!from._internal_logver().empty()) {
    _internal_set_logver(from._internal_logver());
  }
  if (!from._internal_abtest().empty()) {
    _internal_set_abtest(from._internal_abtest());
  }
  if (!from._internal_ff_version().empty()) {
    _internal_set_ff_version(from._internal_ff_version());
  }
  if (!(from._internal_longitude() <= 0 && from._internal_longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from._internal_latitude() <= 0 && from._internal_latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_network() != 0) {
    _internal_set_network(from._internal_network());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppRuntimeInfo::CopyFrom(const AppRuntimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppRuntimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRuntimeInfo::IsInitialized() const {
  return true;
}

void AppRuntimeInfo::InternalSwap(AppRuntimeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &oid_, GetArenaForAllocation(),
      &other->oid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_code_, GetArenaForAllocation(),
      &other->version_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &logver_, GetArenaForAllocation(),
      &other->logver_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &abtest_, GetArenaForAllocation(),
      &other->abtest_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ff_version_, GetArenaForAllocation(),
      &other->ff_version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppRuntimeInfo, network_)
      + sizeof(AppRuntimeInfo::network_)
      - PROTOBUF_FIELD_OFFSET(AppRuntimeInfo, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppRuntimeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[1]);
}

// ===================================================================

AppEvent_ExtendedFieldsEntry_DoNotUse::AppEvent_ExtendedFieldsEntry_DoNotUse() {}
AppEvent_ExtendedFieldsEntry_DoNotUse::AppEvent_ExtendedFieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppEvent_ExtendedFieldsEntry_DoNotUse::MergeFrom(const AppEvent_ExtendedFieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppEvent_ExtendedFieldsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[2]);
}

// ===================================================================

class AppEvent::_Internal {
 public:
  static const ::AppInfo& app_info(const AppEvent* msg);
  static const ::AppRuntimeInfo& runtime_info(const AppEvent* msg);
  static const ::AppPageViewInfo& app_page_view_info(const AppEvent* msg);
  static const ::AppClickInfo& app_click_info(const AppEvent* msg);
  static const ::AppExposureInfo& app_exposure_info(const AppEvent* msg);
  static const ::AppPlayerInfo& app_player_info(const AppEvent* msg);
};

const ::AppInfo&
AppEvent::_Internal::app_info(const AppEvent* msg) {
  return *msg->app_info_;
}
const ::AppRuntimeInfo&
AppEvent::_Internal::runtime_info(const AppEvent* msg) {
  return *msg->runtime_info_;
}
const ::AppPageViewInfo&
AppEvent::_Internal::app_page_view_info(const AppEvent* msg) {
  return *msg->app_page_view_info_;
}
const ::AppClickInfo&
AppEvent::_Internal::app_click_info(const AppEvent* msg) {
  return *msg->app_click_info_;
}
const ::AppExposureInfo&
AppEvent::_Internal::app_exposure_info(const AppEvent* msg) {
  return *msg->app_exposure_info_;
}
const ::AppPlayerInfo&
AppEvent::_Internal::app_player_info(const AppEvent* msg) {
  return *msg->app_player_info_;
}
AppEvent::AppEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extended_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppEvent)
}
AppEvent::AppEvent(const AppEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extended_fields_.MergeFrom(from.extended_fields_);
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_id().empty()) {
    event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_id(), 
      GetArenaForAllocation());
  }
  mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mid().empty()) {
    mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mid(), 
      GetArenaForAllocation());
  }
  log_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_id().empty()) {
    log_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_app_info()) {
    app_info_ = new ::AppInfo(*from.app_info_);
  } else {
    app_info_ = nullptr;
  }
  if (from._internal_has_runtime_info()) {
    runtime_info_ = new ::AppRuntimeInfo(*from.runtime_info_);
  } else {
    runtime_info_ = nullptr;
  }
  if (from._internal_has_app_page_view_info()) {
    app_page_view_info_ = new ::AppPageViewInfo(*from.app_page_view_info_);
  } else {
    app_page_view_info_ = nullptr;
  }
  if (from._internal_has_app_click_info()) {
    app_click_info_ = new ::AppClickInfo(*from.app_click_info_);
  } else {
    app_click_info_ = nullptr;
  }
  if (from._internal_has_app_exposure_info()) {
    app_exposure_info_ = new ::AppExposureInfo(*from.app_exposure_info_);
  } else {
    app_exposure_info_ = nullptr;
  }
  if (from._internal_has_app_player_info()) {
    app_player_info_ = new ::AppPlayerInfo(*from.app_player_info_);
  } else {
    app_player_info_ = nullptr;
  }
  ::memcpy(&ctime_, &from.ctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_type_) -
    reinterpret_cast<char*>(&ctime_)) + sizeof(page_type_));
  // @@protoc_insertion_point(copy_constructor:AppEvent)
}

inline void AppEvent::SharedCtor() {
event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
log_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_type_) -
    reinterpret_cast<char*>(&app_info_)) + sizeof(page_type_));
}

AppEvent::~AppEvent() {
  // @@protoc_insertion_point(destructor:AppEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete app_info_;
  if (this != internal_default_instance()) delete runtime_info_;
  if (this != internal_default_instance()) delete app_page_view_info_;
  if (this != internal_default_instance()) delete app_click_info_;
  if (this != internal_default_instance()) delete app_exposure_info_;
  if (this != internal_default_instance()) delete app_player_info_;
}

void AppEvent::ArenaDtor(void* object) {
  AppEvent* _this = reinterpret_cast< AppEvent* >(object);
  (void)_this;
  _this->extended_fields_. ~MapField();
}
inline void AppEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AppEvent::ArenaDtor);
  }
}
void AppEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:AppEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extended_fields_.Clear();
  event_id_.ClearToEmpty();
  mid_.ClearToEmpty();
  log_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && app_info_ != nullptr) {
    delete app_info_;
  }
  app_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && runtime_info_ != nullptr) {
    delete runtime_info_;
  }
  runtime_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_page_view_info_ != nullptr) {
    delete app_page_view_info_;
  }
  app_page_view_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_click_info_ != nullptr) {
    delete app_click_info_;
  }
  app_click_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_exposure_info_ != nullptr) {
    delete app_exposure_info_;
  }
  app_exposure_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_player_info_ != nullptr) {
    delete app_player_info_;
  }
  app_player_info_ = nullptr;
  ::memset(&ctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_type_) -
      reinterpret_cast<char*>(&ctime_)) + sizeof(page_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppEvent.event_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AppInfo app_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AppRuntimeInfo runtime_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppEvent.mid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ctime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_log_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppEvent.log_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 retry_send_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          retry_send_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EventCategory event_category = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_category(static_cast<::EventCategory>(val));
        } else goto handle_unusual;
        continue;
      // .AppPageViewInfo app_page_view_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_page_view_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AppClickInfo app_click_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_click_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AppExposureInfo app_exposure_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_exposure_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> extended_fields = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extended_fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 page_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          page_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sn_gen_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          sn_gen_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 upload_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          upload_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AppPlayerInfo app_player_info = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_player_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppEvent.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // .AppInfo app_info = 2;
  if (this->_internal_has_app_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::app_info(this), target, stream);
  }

  // .AppRuntimeInfo runtime_info = 3;
  if (this->_internal_has_runtime_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::runtime_info(this), target, stream);
  }

  // string mid = 4;
  if (!this->_internal_mid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mid().data(), static_cast<int>(this->_internal_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppEvent.mid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mid(), target);
  }

  // int64 ctime = 5;
  if (this->_internal_ctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_ctime(), target);
  }

  // string log_id = 6;
  if (!this->_internal_log_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_id().data(), static_cast<int>(this->_internal_log_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppEvent.log_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_log_id(), target);
  }

  // int32 retry_send_count = 7;
  if (this->_internal_retry_send_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_retry_send_count(), target);
  }

  // int64 sn = 8;
  if (this->_internal_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_sn(), target);
  }

  // .EventCategory event_category = 9;
  if (this->_internal_event_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_event_category(), target);
  }

  // .AppPageViewInfo app_page_view_info = 10;
  if (this->_internal_has_app_page_view_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::app_page_view_info(this), target, stream);
  }

  // .AppClickInfo app_click_info = 11;
  if (this->_internal_has_app_click_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::app_click_info(this), target, stream);
  }

  // .AppExposureInfo app_exposure_info = 12;
  if (this->_internal_has_app_exposure_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::app_exposure_info(this), target, stream);
  }

  // map<string, string> extended_fields = 13;
  if (!this->_internal_extended_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "AppEvent.ExtendedFieldsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "AppEvent.ExtendedFieldsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extended_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extended_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extended_fields().begin();
          it != this->_internal_extended_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppEvent_ExtendedFieldsEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extended_fields().begin();
          it != this->_internal_extended_fields().end(); ++it) {
        target = AppEvent_ExtendedFieldsEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 page_type = 14;
  if (this->_internal_page_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_page_type(), target);
  }

  // int64 sn_gen_time = 15;
  if (this->_internal_sn_gen_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_sn_gen_time(), target);
  }

  // int64 upload_time = 16;
  if (this->_internal_upload_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_upload_time(), target);
  }

  // .AppPlayerInfo app_player_info = 17;
  if (this->_internal_has_app_player_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::app_player_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppEvent)
  return target;
}

size_t AppEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> extended_fields = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extended_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_extended_fields().begin();
      it != this->_internal_extended_fields().end(); ++it) {
    total_size += AppEvent_ExtendedFieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  // string mid = 4;
  if (!this->_internal_mid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mid());
  }

  // string log_id = 6;
  if (!this->_internal_log_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_id());
  }

  // .AppInfo app_info = 2;
  if (this->_internal_has_app_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_info_);
  }

  // .AppRuntimeInfo runtime_info = 3;
  if (this->_internal_has_runtime_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *runtime_info_);
  }

  // .AppPageViewInfo app_page_view_info = 10;
  if (this->_internal_has_app_page_view_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_page_view_info_);
  }

  // .AppClickInfo app_click_info = 11;
  if (this->_internal_has_app_click_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_click_info_);
  }

  // .AppExposureInfo app_exposure_info = 12;
  if (this->_internal_has_app_exposure_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_exposure_info_);
  }

  // .AppPlayerInfo app_player_info = 17;
  if (this->_internal_has_app_player_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_player_info_);
  }

  // int64 ctime = 5;
  if (this->_internal_ctime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ctime());
  }

  // int64 sn = 8;
  if (this->_internal_sn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sn());
  }

  // int32 retry_send_count = 7;
  if (this->_internal_retry_send_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retry_send_count());
  }

  // .EventCategory event_category = 9;
  if (this->_internal_event_category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_category());
  }

  // int64 sn_gen_time = 15;
  if (this->_internal_sn_gen_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sn_gen_time());
  }

  // int64 upload_time = 16;
  if (this->_internal_upload_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_upload_time());
  }

  // int32 page_type = 14;
  if (this->_internal_page_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppEvent::GetClassData() const { return &_class_data_; }

void AppEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppEvent *>(to)->MergeFrom(
      static_cast<const AppEvent &>(from));
}


void AppEvent::MergeFrom(const AppEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extended_fields_.MergeFrom(from.extended_fields_);
  if (!from._internal_event_id().empty()) {
    _internal_set_event_id(from._internal_event_id());
  }
  if (!from._internal_mid().empty()) {
    _internal_set_mid(from._internal_mid());
  }
  if (!from._internal_log_id().empty()) {
    _internal_set_log_id(from._internal_log_id());
  }
  if (from._internal_has_app_info()) {
    _internal_mutable_app_info()->::AppInfo::MergeFrom(from._internal_app_info());
  }
  if (from._internal_has_runtime_info()) {
    _internal_mutable_runtime_info()->::AppRuntimeInfo::MergeFrom(from._internal_runtime_info());
  }
  if (from._internal_has_app_page_view_info()) {
    _internal_mutable_app_page_view_info()->::AppPageViewInfo::MergeFrom(from._internal_app_page_view_info());
  }
  if (from._internal_has_app_click_info()) {
    _internal_mutable_app_click_info()->::AppClickInfo::MergeFrom(from._internal_app_click_info());
  }
  if (from._internal_has_app_exposure_info()) {
    _internal_mutable_app_exposure_info()->::AppExposureInfo::MergeFrom(from._internal_app_exposure_info());
  }
  if (from._internal_has_app_player_info()) {
    _internal_mutable_app_player_info()->::AppPlayerInfo::MergeFrom(from._internal_app_player_info());
  }
  if (from._internal_ctime() != 0) {
    _internal_set_ctime(from._internal_ctime());
  }
  if (from._internal_sn() != 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from._internal_retry_send_count() != 0) {
    _internal_set_retry_send_count(from._internal_retry_send_count());
  }
  if (from._internal_event_category() != 0) {
    _internal_set_event_category(from._internal_event_category());
  }
  if (from._internal_sn_gen_time() != 0) {
    _internal_set_sn_gen_time(from._internal_sn_gen_time());
  }
  if (from._internal_upload_time() != 0) {
    _internal_set_upload_time(from._internal_upload_time());
  }
  if (from._internal_page_type() != 0) {
    _internal_set_page_type(from._internal_page_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppEvent::CopyFrom(const AppEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppEvent::IsInitialized() const {
  return true;
}

void AppEvent::InternalSwap(AppEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extended_fields_.InternalSwap(&other->extended_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_id_, GetArenaForAllocation(),
      &other->event_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mid_, GetArenaForAllocation(),
      &other->mid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_id_, GetArenaForAllocation(),
      &other->log_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppEvent, page_type_)
      + sizeof(AppEvent::page_type_)
      - PROTOBUF_FIELD_OFFSET(AppEvent, app_info_)>(
          reinterpret_cast<char*>(&app_info_),
          reinterpret_cast<char*>(&other->app_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[3]);
}

// ===================================================================

class AppPageViewInfo::_Internal {
 public:
};

AppPageViewInfo::AppPageViewInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppPageViewInfo)
}
AppPageViewInfo::AppPageViewInfo(const AppPageViewInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_id_from().empty()) {
    event_id_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_id_from(), 
      GetArenaForAllocation());
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&pvend_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(pvend_));
  // @@protoc_insertion_point(copy_constructor:AppPageViewInfo)
}

inline void AppPageViewInfo::SharedCtor() {
event_id_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pvend_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(pvend_));
}

AppPageViewInfo::~AppPageViewInfo() {
  // @@protoc_insertion_point(destructor:AppPageViewInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppPageViewInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_id_from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppPageViewInfo::ArenaDtor(void* object) {
  AppPageViewInfo* _this = reinterpret_cast< AppPageViewInfo* >(object);
  (void)_this;
}
void AppPageViewInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppPageViewInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppPageViewInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AppPageViewInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_id_from_.ClearToEmpty();
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pvend_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(pvend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppPageViewInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_id_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPageViewInfo.event_id_from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 load_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          load_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pvstart = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pvstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pvend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pvend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppPageViewInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppPageViewInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id_from = 1;
  if (!this->_internal_event_id_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id_from().data(), static_cast<int>(this->_internal_event_id_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPageViewInfo.event_id_from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id_from(), target);
  }

  // int32 load_type = 4;
  if (this->_internal_load_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_load_type(), target);
  }

  // int64 duration = 5;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_duration(), target);
  }

  // int64 pvstart = 6;
  if (this->_internal_pvstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_pvstart(), target);
  }

  // int64 pvend = 7;
  if (this->_internal_pvend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_pvend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppPageViewInfo)
  return target;
}

size_t AppPageViewInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppPageViewInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_id_from = 1;
  if (!this->_internal_event_id_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id_from());
  }

  // int64 duration = 5;
  if (this->_internal_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  // int64 pvstart = 6;
  if (this->_internal_pvstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pvstart());
  }

  // int32 load_type = 4;
  if (this->_internal_load_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_load_type());
  }

  // int64 pvend = 7;
  if (this->_internal_pvend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pvend());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppPageViewInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppPageViewInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppPageViewInfo::GetClassData() const { return &_class_data_; }

void AppPageViewInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppPageViewInfo *>(to)->MergeFrom(
      static_cast<const AppPageViewInfo &>(from));
}


void AppPageViewInfo::MergeFrom(const AppPageViewInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppPageViewInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_event_id_from().empty()) {
    _internal_set_event_id_from(from._internal_event_id_from());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from._internal_pvstart() != 0) {
    _internal_set_pvstart(from._internal_pvstart());
  }
  if (from._internal_load_type() != 0) {
    _internal_set_load_type(from._internal_load_type());
  }
  if (from._internal_pvend() != 0) {
    _internal_set_pvend(from._internal_pvend());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppPageViewInfo::CopyFrom(const AppPageViewInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppPageViewInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppPageViewInfo::IsInitialized() const {
  return true;
}

void AppPageViewInfo::InternalSwap(AppPageViewInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_id_from_, GetArenaForAllocation(),
      &other->event_id_from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppPageViewInfo, pvend_)
      + sizeof(AppPageViewInfo::pvend_)
      - PROTOBUF_FIELD_OFFSET(AppPageViewInfo, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppPageViewInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[4]);
}

// ===================================================================

AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse() {}
AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse::MergeFrom(const AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[5]);
}

// ===================================================================

class AppExposureInfo_AppExposureContentInfo::_Internal {
 public:
};

AppExposureInfo_AppExposureContentInfo::AppExposureInfo_AppExposureContentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extended_fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppExposureInfo.AppExposureContentInfo)
}
AppExposureInfo_AppExposureContentInfo::AppExposureInfo_AppExposureContentInfo(const AppExposureInfo_AppExposureContentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extended_fields_.MergeFrom(from.extended_fields_);
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_id().empty()) {
    event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:AppExposureInfo.AppExposureContentInfo)
}

inline void AppExposureInfo_AppExposureContentInfo::SharedCtor() {
event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppExposureInfo_AppExposureContentInfo::~AppExposureInfo_AppExposureContentInfo() {
  // @@protoc_insertion_point(destructor:AppExposureInfo.AppExposureContentInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppExposureInfo_AppExposureContentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  event_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppExposureInfo_AppExposureContentInfo::ArenaDtor(void* object) {
  AppExposureInfo_AppExposureContentInfo* _this = reinterpret_cast< AppExposureInfo_AppExposureContentInfo* >(object);
  (void)_this;
  _this->extended_fields_. ~MapField();
}
inline void AppExposureInfo_AppExposureContentInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AppExposureInfo_AppExposureContentInfo::ArenaDtor);
  }
}
void AppExposureInfo_AppExposureContentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppExposureInfo_AppExposureContentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AppExposureInfo.AppExposureContentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extended_fields_.Clear();
  event_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppExposureInfo_AppExposureContentInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppExposureInfo.AppExposureContentInfo.event_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> extended_fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&extended_fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppExposureInfo_AppExposureContentInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppExposureInfo.AppExposureContentInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_id().data(), static_cast<int>(this->_internal_event_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppExposureInfo.AppExposureContentInfo.event_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_id(), target);
  }

  // map<string, string> extended_fields = 2;
  if (!this->_internal_extended_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "AppExposureInfo.AppExposureContentInfo.ExtendedFieldsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "AppExposureInfo.AppExposureContentInfo.ExtendedFieldsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extended_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extended_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extended_fields().begin();
          it != this->_internal_extended_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extended_fields().begin();
          it != this->_internal_extended_fields().end(); ++it) {
        target = AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppExposureInfo.AppExposureContentInfo)
  return target;
}

size_t AppExposureInfo_AppExposureContentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppExposureInfo.AppExposureContentInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> extended_fields = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extended_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_extended_fields().begin();
      it != this->_internal_extended_fields().end(); ++it) {
    total_size += AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string event_id = 1;
  if (!this->_internal_event_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppExposureInfo_AppExposureContentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppExposureInfo_AppExposureContentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppExposureInfo_AppExposureContentInfo::GetClassData() const { return &_class_data_; }

void AppExposureInfo_AppExposureContentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppExposureInfo_AppExposureContentInfo *>(to)->MergeFrom(
      static_cast<const AppExposureInfo_AppExposureContentInfo &>(from));
}


void AppExposureInfo_AppExposureContentInfo::MergeFrom(const AppExposureInfo_AppExposureContentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppExposureInfo.AppExposureContentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extended_fields_.MergeFrom(from.extended_fields_);
  if (!from._internal_event_id().empty()) {
    _internal_set_event_id(from._internal_event_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppExposureInfo_AppExposureContentInfo::CopyFrom(const AppExposureInfo_AppExposureContentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppExposureInfo.AppExposureContentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppExposureInfo_AppExposureContentInfo::IsInitialized() const {
  return true;
}

void AppExposureInfo_AppExposureContentInfo::InternalSwap(AppExposureInfo_AppExposureContentInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extended_fields_.InternalSwap(&other->extended_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_id_, GetArenaForAllocation(),
      &other->event_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppExposureInfo_AppExposureContentInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[6]);
}

// ===================================================================

class AppExposureInfo::_Internal {
 public:
};

AppExposureInfo::AppExposureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  content_infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppExposureInfo)
}
AppExposureInfo::AppExposureInfo(const AppExposureInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_infos_(from.content_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AppExposureInfo)
}

inline void AppExposureInfo::SharedCtor() {
}

AppExposureInfo::~AppExposureInfo() {
  // @@protoc_insertion_point(destructor:AppExposureInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppExposureInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppExposureInfo::ArenaDtor(void* object) {
  AppExposureInfo* _this = reinterpret_cast< AppExposureInfo* >(object);
  (void)_this;
}
void AppExposureInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppExposureInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppExposureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AppExposureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppExposureInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .AppExposureInfo.AppExposureContentInfo content_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_content_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppExposureInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppExposureInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AppExposureInfo.AppExposureContentInfo content_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_content_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_content_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppExposureInfo)
  return target;
}

size_t AppExposureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppExposureInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AppExposureInfo.AppExposureContentInfo content_infos = 1;
  total_size += 1UL * this->_internal_content_infos_size();
  for (const auto& msg : this->content_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppExposureInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppExposureInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppExposureInfo::GetClassData() const { return &_class_data_; }

void AppExposureInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppExposureInfo *>(to)->MergeFrom(
      static_cast<const AppExposureInfo &>(from));
}


void AppExposureInfo::MergeFrom(const AppExposureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppExposureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_infos_.MergeFrom(from.content_infos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppExposureInfo::CopyFrom(const AppExposureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppExposureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppExposureInfo::IsInitialized() const {
  return true;
}

void AppExposureInfo::InternalSwap(AppExposureInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  content_infos_.InternalSwap(&other->content_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppExposureInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[7]);
}

// ===================================================================

class AppClickInfo::_Internal {
 public:
};

AppClickInfo::AppClickInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppClickInfo)
}
AppClickInfo::AppClickInfo(const AppClickInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AppClickInfo)
}

inline void AppClickInfo::SharedCtor() {
}

AppClickInfo::~AppClickInfo() {
  // @@protoc_insertion_point(destructor:AppClickInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppClickInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppClickInfo::ArenaDtor(void* object) {
  AppClickInfo* _this = reinterpret_cast< AppClickInfo* >(object);
  (void)_this;
}
void AppClickInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppClickInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppClickInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AppClickInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppClickInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppClickInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppClickInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppClickInfo)
  return target;
}

size_t AppClickInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppClickInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppClickInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppClickInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppClickInfo::GetClassData() const { return &_class_data_; }

void AppClickInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppClickInfo *>(to)->MergeFrom(
      static_cast<const AppClickInfo &>(from));
}


void AppClickInfo::MergeFrom(const AppClickInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppClickInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppClickInfo::CopyFrom(const AppClickInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppClickInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppClickInfo::IsInitialized() const {
  return true;
}

void AppClickInfo::InternalSwap(AppClickInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppClickInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[8]);
}

// ===================================================================

class AppPlayerInfo::_Internal {
 public:
};

AppPlayerInfo::AppPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AppPlayerInfo)
}
AppPlayerInfo::AppPlayerInfo(const AppPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  play_from_spmid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_play_from_spmid().empty()) {
    play_from_spmid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_play_from_spmid(), 
      GetArenaForAllocation());
  }
  season_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_season_id().empty()) {
    season_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_season_id(), 
      GetArenaForAllocation());
  }
  ep_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ep_id().empty()) {
    ep_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ep_id(), 
      GetArenaForAllocation());
  }
  progress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_progress().empty()) {
    progress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_progress(), 
      GetArenaForAllocation());
  }
  avid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avid().empty()) {
    avid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avid(), 
      GetArenaForAllocation());
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cid(), 
      GetArenaForAllocation());
  }
  player_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_session_id().empty()) {
    player_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_session_id(), 
      GetArenaForAllocation());
  }
  speed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_speed().empty()) {
    speed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_speed(), 
      GetArenaForAllocation());
  }
  player_clarity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_clarity().empty()) {
    player_clarity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_clarity(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&video_format_) -
    reinterpret_cast<char*>(&type_)) + sizeof(video_format_));
  // @@protoc_insertion_point(copy_constructor:AppPlayerInfo)
}

inline void AppPlayerInfo::SharedCtor() {
play_from_spmid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
season_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ep_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
progress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
speed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_clarity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&video_format_) -
    reinterpret_cast<char*>(&type_)) + sizeof(video_format_));
}

AppPlayerInfo::~AppPlayerInfo() {
  // @@protoc_insertion_point(destructor:AppPlayerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  play_from_spmid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  season_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ep_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  speed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_clarity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppPlayerInfo::ArenaDtor(void* object) {
  AppPlayerInfo* _this = reinterpret_cast< AppPlayerInfo* >(object);
  (void)_this;
}
void AppPlayerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AppPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  play_from_spmid_.ClearToEmpty();
  season_id_.ClearToEmpty();
  ep_id_.ClearToEmpty();
  progress_.ClearToEmpty();
  avid_.ClearToEmpty();
  cid_.ClearToEmpty();
  player_session_id_.ClearToEmpty();
  speed_.ClearToEmpty();
  player_clarity_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_format_) -
      reinterpret_cast<char*>(&type_)) + sizeof(video_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string play_from_spmid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_play_from_spmid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPlayerInfo.play_from_spmid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string season_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_season_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPlayerInfo.season_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sub_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sub_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ep_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ep_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPlayerInfo.ep_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_progress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPlayerInfo.progress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_avid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPlayerInfo.avid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPlayerInfo.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 network_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          network_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 danmaku = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          danmaku_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 play_method = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          play_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 play_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          play_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string player_session_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_player_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPlayerInfo.player_session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string speed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_speed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPlayerInfo.speed"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string player_clarity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_player_clarity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "AppPlayerInfo.player_clarity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_autoplay = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          is_autoplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 video_format = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          video_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string play_from_spmid = 1;
  if (!this->_internal_play_from_spmid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_play_from_spmid().data(), static_cast<int>(this->_internal_play_from_spmid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPlayerInfo.play_from_spmid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_play_from_spmid(), target);
  }

  // string season_id = 2;
  if (!this->_internal_season_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_season_id().data(), static_cast<int>(this->_internal_season_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPlayerInfo.season_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_season_id(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 sub_type = 4;
  if (this->_internal_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sub_type(), target);
  }

  // string ep_id = 5;
  if (!this->_internal_ep_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ep_id().data(), static_cast<int>(this->_internal_ep_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPlayerInfo.ep_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ep_id(), target);
  }

  // string progress = 6;
  if (!this->_internal_progress().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_progress().data(), static_cast<int>(this->_internal_progress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPlayerInfo.progress");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_progress(), target);
  }

  // string avid = 7;
  if (!this->_internal_avid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avid().data(), static_cast<int>(this->_internal_avid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPlayerInfo.avid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_avid(), target);
  }

  // string cid = 8;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPlayerInfo.cid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_cid(), target);
  }

  // int32 network_type = 9;
  if (this->_internal_network_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_network_type(), target);
  }

  // int32 danmaku = 10;
  if (this->_internal_danmaku() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_danmaku(), target);
  }

  // int32 status = 11;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_status(), target);
  }

  // int32 play_method = 12;
  if (this->_internal_play_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_play_method(), target);
  }

  // int32 play_type = 13;
  if (this->_internal_play_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_play_type(), target);
  }

  // string player_session_id = 14;
  if (!this->_internal_player_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_session_id().data(), static_cast<int>(this->_internal_player_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPlayerInfo.player_session_id");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_player_session_id(), target);
  }

  // string speed = 15;
  if (!this->_internal_speed().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_speed().data(), static_cast<int>(this->_internal_speed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPlayerInfo.speed");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_speed(), target);
  }

  // string player_clarity = 16;
  if (!this->_internal_player_clarity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_clarity().data(), static_cast<int>(this->_internal_player_clarity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppPlayerInfo.player_clarity");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_player_clarity(), target);
  }

  // int32 is_autoplay = 17;
  if (this->_internal_is_autoplay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_is_autoplay(), target);
  }

  // int32 video_format = 18;
  if (this->_internal_video_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_video_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppPlayerInfo)
  return target;
}

size_t AppPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string play_from_spmid = 1;
  if (!this->_internal_play_from_spmid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_play_from_spmid());
  }

  // string season_id = 2;
  if (!this->_internal_season_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_season_id());
  }

  // string ep_id = 5;
  if (!this->_internal_ep_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ep_id());
  }

  // string progress = 6;
  if (!this->_internal_progress().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_progress());
  }

  // string avid = 7;
  if (!this->_internal_avid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avid());
  }

  // string cid = 8;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string player_session_id = 14;
  if (!this->_internal_player_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_session_id());
  }

  // string speed = 15;
  if (!this->_internal_speed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_speed());
  }

  // string player_clarity = 16;
  if (!this->_internal_player_clarity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_clarity());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 sub_type = 4;
  if (this->_internal_sub_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sub_type());
  }

  // int32 network_type = 9;
  if (this->_internal_network_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_network_type());
  }

  // int32 danmaku = 10;
  if (this->_internal_danmaku() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_danmaku());
  }

  // int32 status = 11;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 play_method = 12;
  if (this->_internal_play_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_play_method());
  }

  // int32 play_type = 13;
  if (this->_internal_play_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_play_type());
  }

  // int32 is_autoplay = 17;
  if (this->_internal_is_autoplay() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_autoplay());
  }

  // int32 video_format = 18;
  if (this->_internal_video_format() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_video_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppPlayerInfo::GetClassData() const { return &_class_data_; }

void AppPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppPlayerInfo *>(to)->MergeFrom(
      static_cast<const AppPlayerInfo &>(from));
}


void AppPlayerInfo::MergeFrom(const AppPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_play_from_spmid().empty()) {
    _internal_set_play_from_spmid(from._internal_play_from_spmid());
  }
  if (!from._internal_season_id().empty()) {
    _internal_set_season_id(from._internal_season_id());
  }
  if (!from._internal_ep_id().empty()) {
    _internal_set_ep_id(from._internal_ep_id());
  }
  if (!from._internal_progress().empty()) {
    _internal_set_progress(from._internal_progress());
  }
  if (!from._internal_avid().empty()) {
    _internal_set_avid(from._internal_avid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_player_session_id().empty()) {
    _internal_set_player_session_id(from._internal_player_session_id());
  }
  if (!from._internal_speed().empty()) {
    _internal_set_speed(from._internal_speed());
  }
  if (!from._internal_player_clarity().empty()) {
    _internal_set_player_clarity(from._internal_player_clarity());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_sub_type() != 0) {
    _internal_set_sub_type(from._internal_sub_type());
  }
  if (from._internal_network_type() != 0) {
    _internal_set_network_type(from._internal_network_type());
  }
  if (from._internal_danmaku() != 0) {
    _internal_set_danmaku(from._internal_danmaku());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_play_method() != 0) {
    _internal_set_play_method(from._internal_play_method());
  }
  if (from._internal_play_type() != 0) {
    _internal_set_play_type(from._internal_play_type());
  }
  if (from._internal_is_autoplay() != 0) {
    _internal_set_is_autoplay(from._internal_is_autoplay());
  }
  if (from._internal_video_format() != 0) {
    _internal_set_video_format(from._internal_video_format());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppPlayerInfo::CopyFrom(const AppPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppPlayerInfo::IsInitialized() const {
  return true;
}

void AppPlayerInfo::InternalSwap(AppPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &play_from_spmid_, GetArenaForAllocation(),
      &other->play_from_spmid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &season_id_, GetArenaForAllocation(),
      &other->season_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ep_id_, GetArenaForAllocation(),
      &other->ep_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &progress_, GetArenaForAllocation(),
      &other->progress_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avid_, GetArenaForAllocation(),
      &other->avid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cid_, GetArenaForAllocation(),
      &other->cid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &player_session_id_, GetArenaForAllocation(),
      &other->player_session_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &speed_, GetArenaForAllocation(),
      &other->speed_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &player_clarity_, GetArenaForAllocation(),
      &other->player_clarity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppPlayerInfo, video_format_)
      + sizeof(AppPlayerInfo::video_format_)
      - PROTOBUF_FIELD_OFFSET(AppPlayerInfo, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppPlayerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_infoc_5fapp_5fevent_2eproto_getter, &descriptor_table_infoc_5fapp_5fevent_2eproto_once,
      file_level_metadata_infoc_5fapp_5fevent_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AppInfo* Arena::CreateMaybeMessage< ::AppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AppRuntimeInfo* Arena::CreateMaybeMessage< ::AppRuntimeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppRuntimeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AppEvent_ExtendedFieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::AppEvent_ExtendedFieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppEvent_ExtendedFieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AppEvent* Arena::CreateMaybeMessage< ::AppEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::AppPageViewInfo* Arena::CreateMaybeMessage< ::AppPageViewInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppPageViewInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::AppExposureInfo_AppExposureContentInfo* Arena::CreateMaybeMessage< ::AppExposureInfo_AppExposureContentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppExposureInfo_AppExposureContentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AppExposureInfo* Arena::CreateMaybeMessage< ::AppExposureInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppExposureInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AppClickInfo* Arena::CreateMaybeMessage< ::AppClickInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppClickInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::AppPlayerInfo* Arena::CreateMaybeMessage< ::AppPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AppPlayerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
