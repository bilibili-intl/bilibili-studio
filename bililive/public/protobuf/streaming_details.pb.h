// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: streaming_details.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_streaming_5fdetails_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_streaming_5fdetails_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_streaming_5fdetails_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_streaming_5fdetails_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_streaming_5fdetails_2eproto;
namespace streaming_performance {
class AppInfo;
struct AppInfoDefaultTypeInternal;
extern AppInfoDefaultTypeInternal _AppInfo_default_instance_;
class BaseStatisticInfo;
struct BaseStatisticInfoDefaultTypeInternal;
extern BaseStatisticInfoDefaultTypeInternal _BaseStatisticInfo_default_instance_;
class CpuUsage;
struct CpuUsageDefaultTypeInternal;
extern CpuUsageDefaultTypeInternal _CpuUsage_default_instance_;
class EncodeDropFrame;
struct EncodeDropFrameDefaultTypeInternal;
extern EncodeDropFrameDefaultTypeInternal _EncodeDropFrame_default_instance_;
class EncodingSettings;
struct EncodingSettingsDefaultTypeInternal;
extern EncodingSettingsDefaultTypeInternal _EncodingSettings_default_instance_;
class GpuUsage;
struct GpuUsageDefaultTypeInternal;
extern GpuUsageDefaultTypeInternal _GpuUsage_default_instance_;
class MemoryUsage;
struct MemoryUsageDefaultTypeInternal;
extern MemoryUsageDefaultTypeInternal _MemoryUsage_default_instance_;
class NetworkDropFrame;
struct NetworkDropFrameDefaultTypeInternal;
extern NetworkDropFrameDefaultTypeInternal _NetworkDropFrame_default_instance_;
class PerformanceReport;
struct PerformanceReportDefaultTypeInternal;
extern PerformanceReportDefaultTypeInternal _PerformanceReport_default_instance_;
class ProcessCpuUsage;
struct ProcessCpuUsageDefaultTypeInternal;
extern ProcessCpuUsageDefaultTypeInternal _ProcessCpuUsage_default_instance_;
class ProcessMemoryUsage;
struct ProcessMemoryUsageDefaultTypeInternal;
extern ProcessMemoryUsageDefaultTypeInternal _ProcessMemoryUsage_default_instance_;
class RenderDropFrame;
struct RenderDropFrameDefaultTypeInternal;
extern RenderDropFrameDefaultTypeInternal _RenderDropFrame_default_instance_;
class SampleData;
struct SampleDataDefaultTypeInternal;
extern SampleDataDefaultTypeInternal _SampleData_default_instance_;
class SourceItem;
struct SourceItemDefaultTypeInternal;
extern SourceItemDefaultTypeInternal _SourceItem_default_instance_;
class SourceItem_PropsEntry_DoNotUse;
struct SourceItem_PropsEntry_DoNotUseDefaultTypeInternal;
extern SourceItem_PropsEntry_DoNotUseDefaultTypeInternal _SourceItem_PropsEntry_DoNotUse_default_instance_;
class StartLiveInfo;
struct StartLiveInfoDefaultTypeInternal;
extern StartLiveInfoDefaultTypeInternal _StartLiveInfo_default_instance_;
class StatisticsSet;
struct StatisticsSetDefaultTypeInternal;
extern StatisticsSetDefaultTypeInternal _StatisticsSet_default_instance_;
class SystemInfo;
struct SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
}  // namespace streaming_performance
PROTOBUF_NAMESPACE_OPEN
template<> ::streaming_performance::AppInfo* Arena::CreateMaybeMessage<::streaming_performance::AppInfo>(Arena*);
template<> ::streaming_performance::BaseStatisticInfo* Arena::CreateMaybeMessage<::streaming_performance::BaseStatisticInfo>(Arena*);
template<> ::streaming_performance::CpuUsage* Arena::CreateMaybeMessage<::streaming_performance::CpuUsage>(Arena*);
template<> ::streaming_performance::EncodeDropFrame* Arena::CreateMaybeMessage<::streaming_performance::EncodeDropFrame>(Arena*);
template<> ::streaming_performance::EncodingSettings* Arena::CreateMaybeMessage<::streaming_performance::EncodingSettings>(Arena*);
template<> ::streaming_performance::GpuUsage* Arena::CreateMaybeMessage<::streaming_performance::GpuUsage>(Arena*);
template<> ::streaming_performance::MemoryUsage* Arena::CreateMaybeMessage<::streaming_performance::MemoryUsage>(Arena*);
template<> ::streaming_performance::NetworkDropFrame* Arena::CreateMaybeMessage<::streaming_performance::NetworkDropFrame>(Arena*);
template<> ::streaming_performance::PerformanceReport* Arena::CreateMaybeMessage<::streaming_performance::PerformanceReport>(Arena*);
template<> ::streaming_performance::ProcessCpuUsage* Arena::CreateMaybeMessage<::streaming_performance::ProcessCpuUsage>(Arena*);
template<> ::streaming_performance::ProcessMemoryUsage* Arena::CreateMaybeMessage<::streaming_performance::ProcessMemoryUsage>(Arena*);
template<> ::streaming_performance::RenderDropFrame* Arena::CreateMaybeMessage<::streaming_performance::RenderDropFrame>(Arena*);
template<> ::streaming_performance::SampleData* Arena::CreateMaybeMessage<::streaming_performance::SampleData>(Arena*);
template<> ::streaming_performance::SourceItem* Arena::CreateMaybeMessage<::streaming_performance::SourceItem>(Arena*);
template<> ::streaming_performance::SourceItem_PropsEntry_DoNotUse* Arena::CreateMaybeMessage<::streaming_performance::SourceItem_PropsEntry_DoNotUse>(Arena*);
template<> ::streaming_performance::StartLiveInfo* Arena::CreateMaybeMessage<::streaming_performance::StartLiveInfo>(Arena*);
template<> ::streaming_performance::StatisticsSet* Arena::CreateMaybeMessage<::streaming_performance::StatisticsSet>(Arena*);
template<> ::streaming_performance::SystemInfo* Arena::CreateMaybeMessage<::streaming_performance::SystemInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace streaming_performance {

enum RuntimeNetWork : int {
  UNKNOWN = 0,
  WIFI = 1,
  CELLULAR = 2,
  OFFLINE = 3,
  OTHERNET = 4,
  ETHERNET = 5,
  RuntimeNetWork_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RuntimeNetWork_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RuntimeNetWork_IsValid(int value);
constexpr RuntimeNetWork RuntimeNetWork_MIN = UNKNOWN;
constexpr RuntimeNetWork RuntimeNetWork_MAX = ETHERNET;
constexpr int RuntimeNetWork_ARRAYSIZE = RuntimeNetWork_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuntimeNetWork_descriptor();
template<typename T>
inline const std::string& RuntimeNetWork_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RuntimeNetWork>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RuntimeNetWork_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RuntimeNetWork_descriptor(), enum_t_value);
}
inline bool RuntimeNetWork_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RuntimeNetWork* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RuntimeNetWork>(
    RuntimeNetWork_descriptor(), name, value);
}
// ===================================================================

class SystemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.SystemInfo) */ {
 public:
  inline SystemInfo() : SystemInfo(nullptr) {}
  ~SystemInfo() override;
  explicit constexpr SystemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfo(const SystemInfo& from);
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfo* New() const final {
    return new SystemInfo();
  }

  SystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SystemInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.SystemInfo";
  }
  protected:
  explicit SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGraphicFieldNumber = 3,
    kSystemVerFieldNumber = 1,
    kCpuFieldNumber = 2,
    kLoadGraphicFieldNumber = 4,
    kMemoryFieldNumber = 5,
    kCoFieldNumber = 7,
    kIpFieldNumber = 8,
    kRegionFieldNumber = 9,
    kNetworkFieldNumber = 6,
  };
  // repeated string graphic = 3;
  int graphic_size() const;
  private:
  int _internal_graphic_size() const;
  public:
  void clear_graphic();
  const std::string& graphic(int index) const;
  std::string* mutable_graphic(int index);
  void set_graphic(int index, const std::string& value);
  void set_graphic(int index, std::string&& value);
  void set_graphic(int index, const char* value);
  void set_graphic(int index, const char* value, size_t size);
  std::string* add_graphic();
  void add_graphic(const std::string& value);
  void add_graphic(std::string&& value);
  void add_graphic(const char* value);
  void add_graphic(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& graphic() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_graphic();
  private:
  const std::string& _internal_graphic(int index) const;
  std::string* _internal_add_graphic();
  public:

  // string system_ver = 1;
  void clear_system_ver();
  const std::string& system_ver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_system_ver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_system_ver();
  PROTOBUF_MUST_USE_RESULT std::string* release_system_ver();
  void set_allocated_system_ver(std::string* system_ver);
  private:
  const std::string& _internal_system_ver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_ver(const std::string& value);
  std::string* _internal_mutable_system_ver();
  public:

  // string cpu = 2;
  void clear_cpu();
  const std::string& cpu() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu();
  PROTOBUF_MUST_USE_RESULT std::string* release_cpu();
  void set_allocated_cpu(std::string* cpu);
  private:
  const std::string& _internal_cpu() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu(const std::string& value);
  std::string* _internal_mutable_cpu();
  public:

  // string load_graphic = 4;
  void clear_load_graphic();
  const std::string& load_graphic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_load_graphic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_load_graphic();
  PROTOBUF_MUST_USE_RESULT std::string* release_load_graphic();
  void set_allocated_load_graphic(std::string* load_graphic);
  private:
  const std::string& _internal_load_graphic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_load_graphic(const std::string& value);
  std::string* _internal_mutable_load_graphic();
  public:

  // string memory = 5;
  void clear_memory();
  const std::string& memory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memory();
  PROTOBUF_MUST_USE_RESULT std::string* release_memory();
  void set_allocated_memory(std::string* memory);
  private:
  const std::string& _internal_memory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memory(const std::string& value);
  std::string* _internal_mutable_memory();
  public:

  // string co = 7;
  void clear_co();
  const std::string& co() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_co(ArgT0&& arg0, ArgT... args);
  std::string* mutable_co();
  PROTOBUF_MUST_USE_RESULT std::string* release_co();
  void set_allocated_co(std::string* co);
  private:
  const std::string& _internal_co() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_co(const std::string& value);
  std::string* _internal_mutable_co();
  public:

  // string ip = 8;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string region = 9;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_MUST_USE_RESULT std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // .streaming_performance.RuntimeNetWork network = 6;
  void clear_network();
  ::streaming_performance::RuntimeNetWork network() const;
  void set_network(::streaming_performance::RuntimeNetWork value);
  private:
  ::streaming_performance::RuntimeNetWork _internal_network() const;
  void _internal_set_network(::streaming_performance::RuntimeNetWork value);
  public:

  // @@protoc_insertion_point(class_scope:streaming_performance.SystemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> graphic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr load_graphic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr co_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  int network_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class AppInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.AppInfo) */ {
 public:
  inline AppInfo() : AppInfo(nullptr) {}
  ~AppInfo() override;
  explicit constexpr AppInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppInfo(const AppInfo& from);
  AppInfo(AppInfo&& from) noexcept
    : AppInfo() {
    *this = ::std::move(from);
  }

  inline AppInfo& operator=(const AppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfo& operator=(AppInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppInfo* internal_default_instance() {
    return reinterpret_cast<const AppInfo*>(
               &_AppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppInfo& a, AppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfo* New() const final {
    return new AppInfo();
  }

  AppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.AppInfo";
  }
  protected:
  explicit AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuvidFieldNumber = 4,
    kVersionFieldNumber = 5,
    kAccountFieldNumber = 7,
    kSysInfoFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kPlatformFieldNumber = 3,
    kUidFieldNumber = 8,
    kRoomidFieldNumber = 9,
    kBuildNoFieldNumber = 6,
  };
  // string buvid = 4;
  void clear_buvid();
  const std::string& buvid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buvid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buvid();
  PROTOBUF_MUST_USE_RESULT std::string* release_buvid();
  void set_allocated_buvid(std::string* buvid);
  private:
  const std::string& _internal_buvid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buvid(const std::string& value);
  std::string* _internal_mutable_buvid();
  public:

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string account = 7;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // .streaming_performance.SystemInfo sys_info = 1;
  bool has_sys_info() const;
  private:
  bool _internal_has_sys_info() const;
  public:
  void clear_sys_info();
  const ::streaming_performance::SystemInfo& sys_info() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::SystemInfo* release_sys_info();
  ::streaming_performance::SystemInfo* mutable_sys_info();
  void set_allocated_sys_info(::streaming_performance::SystemInfo* sys_info);
  private:
  const ::streaming_performance::SystemInfo& _internal_sys_info() const;
  ::streaming_performance::SystemInfo* _internal_mutable_sys_info();
  public:
  void unsafe_arena_set_allocated_sys_info(
      ::streaming_performance::SystemInfo* sys_info);
  ::streaming_performance::SystemInfo* unsafe_arena_release_sys_info();

  // int32 app_id = 2;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 platform = 3;
  void clear_platform();
  ::PROTOBUF_NAMESPACE_ID::int32 platform() const;
  void set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_platform() const;
  void _internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 uid = 8;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 roomid = 9;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int64 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 build_no = 6;
  void clear_build_no();
  ::PROTOBUF_NAMESPACE_ID::int32 build_no() const;
  void set_build_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_build_no() const;
  void _internal_set_build_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:streaming_performance.AppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buvid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::streaming_performance::SystemInfo* sys_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 platform_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 build_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class EncodingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.EncodingSettings) */ {
 public:
  inline EncodingSettings() : EncodingSettings(nullptr) {}
  ~EncodingSettings() override;
  explicit constexpr EncodingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncodingSettings(const EncodingSettings& from);
  EncodingSettings(EncodingSettings&& from) noexcept
    : EncodingSettings() {
    *this = ::std::move(from);
  }

  inline EncodingSettings& operator=(const EncodingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncodingSettings& operator=(EncodingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncodingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncodingSettings* internal_default_instance() {
    return reinterpret_cast<const EncodingSettings*>(
               &_EncodingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EncodingSettings& a, EncodingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(EncodingSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncodingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncodingSettings* New() const final {
    return new EncodingSettings();
  }

  EncodingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncodingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncodingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EncodingSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncodingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.EncodingSettings";
  }
  protected:
  explicit EncodingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRateTypeFieldNumber = 3,
    kFpsFieldNumber = 4,
    kResolutionFieldNumber = 5,
    kEncoderFieldNumber = 6,
    kQualityFieldNumber = 7,
    kTsFieldNumber = 1,
    kBitRateFieldNumber = 2,
  };
  // string rate_type = 3;
  void clear_rate_type();
  const std::string& rate_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rate_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rate_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_rate_type();
  void set_allocated_rate_type(std::string* rate_type);
  private:
  const std::string& _internal_rate_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rate_type(const std::string& value);
  std::string* _internal_mutable_rate_type();
  public:

  // string fps = 4;
  void clear_fps();
  const std::string& fps() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fps(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fps();
  PROTOBUF_MUST_USE_RESULT std::string* release_fps();
  void set_allocated_fps(std::string* fps);
  private:
  const std::string& _internal_fps() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fps(const std::string& value);
  std::string* _internal_mutable_fps();
  public:

  // string resolution = 5;
  void clear_resolution();
  const std::string& resolution() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resolution(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resolution();
  PROTOBUF_MUST_USE_RESULT std::string* release_resolution();
  void set_allocated_resolution(std::string* resolution);
  private:
  const std::string& _internal_resolution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resolution(const std::string& value);
  std::string* _internal_mutable_resolution();
  public:

  // string encoder = 6;
  void clear_encoder();
  const std::string& encoder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encoder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encoder();
  PROTOBUF_MUST_USE_RESULT std::string* release_encoder();
  void set_allocated_encoder(std::string* encoder);
  private:
  const std::string& _internal_encoder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encoder(const std::string& value);
  std::string* _internal_mutable_encoder();
  public:

  // string quality = 7;
  void clear_quality();
  const std::string& quality() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quality(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quality();
  PROTOBUF_MUST_USE_RESULT std::string* release_quality();
  void set_allocated_quality(std::string* quality);
  private:
  const std::string& _internal_quality() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quality(const std::string& value);
  std::string* _internal_mutable_quality();
  public:

  // int64 ts = 1;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 bit_rate = 2;
  void clear_bit_rate();
  ::PROTOBUF_NAMESPACE_ID::int32 bit_rate() const;
  void set_bit_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bit_rate() const;
  void _internal_set_bit_rate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:streaming_performance.EncodingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rate_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quality_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 bit_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class StartLiveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.StartLiveInfo) */ {
 public:
  inline StartLiveInfo() : StartLiveInfo(nullptr) {}
  ~StartLiveInfo() override;
  explicit constexpr StartLiveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartLiveInfo(const StartLiveInfo& from);
  StartLiveInfo(StartLiveInfo&& from) noexcept
    : StartLiveInfo() {
    *this = ::std::move(from);
  }

  inline StartLiveInfo& operator=(const StartLiveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartLiveInfo& operator=(StartLiveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartLiveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartLiveInfo* internal_default_instance() {
    return reinterpret_cast<const StartLiveInfo*>(
               &_StartLiveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StartLiveInfo& a, StartLiveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StartLiveInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartLiveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartLiveInfo* New() const final {
    return new StartLiveInfo();
  }

  StartLiveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartLiveInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartLiveInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartLiveInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartLiveInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.StartLiveInfo";
  }
  protected:
  explicit StartLiveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoSettingsFieldNumber = 9,
    kLiveKeyFieldNumber = 1,
    kCdnHostFieldNumber = 2,
    kAddrFieldNumber = 3,
    kCodeFieldNumber = 4,
    kLiveTypeFieldNumber = 5,
    kLiveStatusFieldNumber = 6,
    kStartTimeFieldNumber = 7,
    kEndTimeFieldNumber = 8,
  };
  // repeated .streaming_performance.EncodingSettings video_settings = 9;
  int video_settings_size() const;
  private:
  int _internal_video_settings_size() const;
  public:
  void clear_video_settings();
  ::streaming_performance::EncodingSettings* mutable_video_settings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::EncodingSettings >*
      mutable_video_settings();
  private:
  const ::streaming_performance::EncodingSettings& _internal_video_settings(int index) const;
  ::streaming_performance::EncodingSettings* _internal_add_video_settings();
  public:
  const ::streaming_performance::EncodingSettings& video_settings(int index) const;
  ::streaming_performance::EncodingSettings* add_video_settings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::EncodingSettings >&
      video_settings() const;

  // string live_key = 1;
  void clear_live_key();
  const std::string& live_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_live_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_live_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_live_key();
  void set_allocated_live_key(std::string* live_key);
  private:
  const std::string& _internal_live_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_live_key(const std::string& value);
  std::string* _internal_mutable_live_key();
  public:

  // string cdn_host = 2;
  void clear_cdn_host();
  const std::string& cdn_host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cdn_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cdn_host();
  PROTOBUF_MUST_USE_RESULT std::string* release_cdn_host();
  void set_allocated_cdn_host(std::string* cdn_host);
  private:
  const std::string& _internal_cdn_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cdn_host(const std::string& value);
  std::string* _internal_mutable_cdn_host();
  public:

  // string addr = 3;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string code = 4;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // int32 live_type = 5;
  void clear_live_type();
  ::PROTOBUF_NAMESPACE_ID::int32 live_type() const;
  void set_live_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_live_type() const;
  void _internal_set_live_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 live_status = 6;
  void clear_live_status();
  ::PROTOBUF_NAMESPACE_ID::int32 live_status() const;
  void set_live_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_live_status() const;
  void _internal_set_live_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 start_time = 7;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_time = 8;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:streaming_performance.StartLiveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::EncodingSettings > video_settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr live_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdn_host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::int32 live_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 live_status_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class SourceItem_PropsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SourceItem_PropsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SourceItem_PropsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  SourceItem_PropsEntry_DoNotUse();
  explicit constexpr SourceItem_PropsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SourceItem_PropsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SourceItem_PropsEntry_DoNotUse& other);
  static const SourceItem_PropsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SourceItem_PropsEntry_DoNotUse*>(&_SourceItem_PropsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "streaming_performance.SourceItem.PropsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "streaming_performance.SourceItem.PropsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class SourceItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.SourceItem) */ {
 public:
  inline SourceItem() : SourceItem(nullptr) {}
  ~SourceItem() override;
  explicit constexpr SourceItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceItem(const SourceItem& from);
  SourceItem(SourceItem&& from) noexcept
    : SourceItem() {
    *this = ::std::move(from);
  }

  inline SourceItem& operator=(const SourceItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceItem& operator=(SourceItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourceItem* internal_default_instance() {
    return reinterpret_cast<const SourceItem*>(
               &_SourceItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SourceItem& a, SourceItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceItem* New() const final {
    return new SourceItem();
  }

  SourceItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourceItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SourceItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.SourceItem";
  }
  protected:
  explicit SourceItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 3,
    kSourceNameFieldNumber = 2,
    kSourceTypeFieldNumber = 1,
    kVisibleFieldNumber = 4,
  };
  // map<string, string> props = 3;
  int props_size() const;
  private:
  int _internal_props_size() const;
  public:
  void clear_props();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_props() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_props();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      props() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_props();

  // string source_name = 2;
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // int32 source_type = 1;
  void clear_source_type();
  ::PROTOBUF_NAMESPACE_ID::int32 source_type() const;
  void set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source_type() const;
  void _internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool visible = 4;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);
  private:
  bool _internal_visible() const;
  void _internal_set_visible(bool value);
  public:

  // @@protoc_insertion_point(class_scope:streaming_performance.SourceItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SourceItem_PropsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> props_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_type_;
  bool visible_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class SampleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.SampleData) */ {
 public:
  inline SampleData() : SampleData(nullptr) {}
  ~SampleData() override;
  explicit constexpr SampleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleData(const SampleData& from);
  SampleData(SampleData&& from) noexcept
    : SampleData() {
    *this = ::std::move(from);
  }

  inline SampleData& operator=(const SampleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleData& operator=(SampleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SampleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleData* internal_default_instance() {
    return reinterpret_cast<const SampleData*>(
               &_SampleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SampleData& a, SampleData& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleData* New() const final {
    return new SampleData();
  }

  SampleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SampleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SampleData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.SampleData";
  }
  protected:
  explicit SampleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double data = 2;
  void clear_data();
  double data() const;
  void set_data(double value);
  private:
  double _internal_data() const;
  void _internal_set_data(double value);
  public:

  // @@protoc_insertion_point(class_scope:streaming_performance.SampleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  double data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class BaseStatisticInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.BaseStatisticInfo) */ {
 public:
  inline BaseStatisticInfo() : BaseStatisticInfo(nullptr) {}
  ~BaseStatisticInfo() override;
  explicit constexpr BaseStatisticInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseStatisticInfo(const BaseStatisticInfo& from);
  BaseStatisticInfo(BaseStatisticInfo&& from) noexcept
    : BaseStatisticInfo() {
    *this = ::std::move(from);
  }

  inline BaseStatisticInfo& operator=(const BaseStatisticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseStatisticInfo& operator=(BaseStatisticInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseStatisticInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseStatisticInfo* internal_default_instance() {
    return reinterpret_cast<const BaseStatisticInfo*>(
               &_BaseStatisticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BaseStatisticInfo& a, BaseStatisticInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseStatisticInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseStatisticInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseStatisticInfo* New() const final {
    return new BaseStatisticInfo();
  }

  BaseStatisticInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseStatisticInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseStatisticInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BaseStatisticInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseStatisticInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.BaseStatisticInfo";
  }
  protected:
  explicit BaseStatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplesFieldNumber = 1,
  };
  // repeated .streaming_performance.SampleData samples = 1;
  int samples_size() const;
  private:
  int _internal_samples_size() const;
  public:
  void clear_samples();
  ::streaming_performance::SampleData* mutable_samples(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SampleData >*
      mutable_samples();
  private:
  const ::streaming_performance::SampleData& _internal_samples(int index) const;
  ::streaming_performance::SampleData* _internal_add_samples();
  public:
  const ::streaming_performance::SampleData& samples(int index) const;
  ::streaming_performance::SampleData* add_samples();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SampleData >&
      samples() const;

  // @@protoc_insertion_point(class_scope:streaming_performance.BaseStatisticInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SampleData > samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class NetworkDropFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.NetworkDropFrame) */ {
 public:
  inline NetworkDropFrame() : NetworkDropFrame(nullptr) {}
  ~NetworkDropFrame() override;
  explicit constexpr NetworkDropFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkDropFrame(const NetworkDropFrame& from);
  NetworkDropFrame(NetworkDropFrame&& from) noexcept
    : NetworkDropFrame() {
    *this = ::std::move(from);
  }

  inline NetworkDropFrame& operator=(const NetworkDropFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkDropFrame& operator=(NetworkDropFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetworkDropFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkDropFrame* internal_default_instance() {
    return reinterpret_cast<const NetworkDropFrame*>(
               &_NetworkDropFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NetworkDropFrame& a, NetworkDropFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkDropFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkDropFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkDropFrame* New() const final {
    return new NetworkDropFrame();
  }

  NetworkDropFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkDropFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetworkDropFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetworkDropFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkDropFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.NetworkDropFrame";
  }
  protected:
  explicit NetworkDropFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .streaming_performance.BaseStatisticInfo data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::streaming_performance::BaseStatisticInfo& data() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::BaseStatisticInfo* release_data();
  ::streaming_performance::BaseStatisticInfo* mutable_data();
  void set_allocated_data(::streaming_performance::BaseStatisticInfo* data);
  private:
  const ::streaming_performance::BaseStatisticInfo& _internal_data() const;
  ::streaming_performance::BaseStatisticInfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::streaming_performance::BaseStatisticInfo* data);
  ::streaming_performance::BaseStatisticInfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:streaming_performance.NetworkDropFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::streaming_performance::BaseStatisticInfo* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class RenderDropFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.RenderDropFrame) */ {
 public:
  inline RenderDropFrame() : RenderDropFrame(nullptr) {}
  ~RenderDropFrame() override;
  explicit constexpr RenderDropFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderDropFrame(const RenderDropFrame& from);
  RenderDropFrame(RenderDropFrame&& from) noexcept
    : RenderDropFrame() {
    *this = ::std::move(from);
  }

  inline RenderDropFrame& operator=(const RenderDropFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderDropFrame& operator=(RenderDropFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderDropFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderDropFrame* internal_default_instance() {
    return reinterpret_cast<const RenderDropFrame*>(
               &_RenderDropFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RenderDropFrame& a, RenderDropFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderDropFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderDropFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenderDropFrame* New() const final {
    return new RenderDropFrame();
  }

  RenderDropFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderDropFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenderDropFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RenderDropFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderDropFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.RenderDropFrame";
  }
  protected:
  explicit RenderDropFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .streaming_performance.BaseStatisticInfo data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::streaming_performance::BaseStatisticInfo& data() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::BaseStatisticInfo* release_data();
  ::streaming_performance::BaseStatisticInfo* mutable_data();
  void set_allocated_data(::streaming_performance::BaseStatisticInfo* data);
  private:
  const ::streaming_performance::BaseStatisticInfo& _internal_data() const;
  ::streaming_performance::BaseStatisticInfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::streaming_performance::BaseStatisticInfo* data);
  ::streaming_performance::BaseStatisticInfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:streaming_performance.RenderDropFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::streaming_performance::BaseStatisticInfo* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class EncodeDropFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.EncodeDropFrame) */ {
 public:
  inline EncodeDropFrame() : EncodeDropFrame(nullptr) {}
  ~EncodeDropFrame() override;
  explicit constexpr EncodeDropFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncodeDropFrame(const EncodeDropFrame& from);
  EncodeDropFrame(EncodeDropFrame&& from) noexcept
    : EncodeDropFrame() {
    *this = ::std::move(from);
  }

  inline EncodeDropFrame& operator=(const EncodeDropFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncodeDropFrame& operator=(EncodeDropFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncodeDropFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncodeDropFrame* internal_default_instance() {
    return reinterpret_cast<const EncodeDropFrame*>(
               &_EncodeDropFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EncodeDropFrame& a, EncodeDropFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(EncodeDropFrame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncodeDropFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncodeDropFrame* New() const final {
    return new EncodeDropFrame();
  }

  EncodeDropFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncodeDropFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncodeDropFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EncodeDropFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncodeDropFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.EncodeDropFrame";
  }
  protected:
  explicit EncodeDropFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .streaming_performance.BaseStatisticInfo data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::streaming_performance::BaseStatisticInfo& data() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::BaseStatisticInfo* release_data();
  ::streaming_performance::BaseStatisticInfo* mutable_data();
  void set_allocated_data(::streaming_performance::BaseStatisticInfo* data);
  private:
  const ::streaming_performance::BaseStatisticInfo& _internal_data() const;
  ::streaming_performance::BaseStatisticInfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::streaming_performance::BaseStatisticInfo* data);
  ::streaming_performance::BaseStatisticInfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:streaming_performance.EncodeDropFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::streaming_performance::BaseStatisticInfo* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class GpuUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.GpuUsage) */ {
 public:
  inline GpuUsage() : GpuUsage(nullptr) {}
  ~GpuUsage() override;
  explicit constexpr GpuUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GpuUsage(const GpuUsage& from);
  GpuUsage(GpuUsage&& from) noexcept
    : GpuUsage() {
    *this = ::std::move(from);
  }

  inline GpuUsage& operator=(const GpuUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpuUsage& operator=(GpuUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GpuUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GpuUsage* internal_default_instance() {
    return reinterpret_cast<const GpuUsage*>(
               &_GpuUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GpuUsage& a, GpuUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(GpuUsage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GpuUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpuUsage* New() const final {
    return new GpuUsage();
  }

  GpuUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpuUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GpuUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GpuUsage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpuUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.GpuUsage";
  }
  protected:
  explicit GpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .streaming_performance.BaseStatisticInfo data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::streaming_performance::BaseStatisticInfo& data() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::BaseStatisticInfo* release_data();
  ::streaming_performance::BaseStatisticInfo* mutable_data();
  void set_allocated_data(::streaming_performance::BaseStatisticInfo* data);
  private:
  const ::streaming_performance::BaseStatisticInfo& _internal_data() const;
  ::streaming_performance::BaseStatisticInfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::streaming_performance::BaseStatisticInfo* data);
  ::streaming_performance::BaseStatisticInfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:streaming_performance.GpuUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::streaming_performance::BaseStatisticInfo* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class CpuUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.CpuUsage) */ {
 public:
  inline CpuUsage() : CpuUsage(nullptr) {}
  ~CpuUsage() override;
  explicit constexpr CpuUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CpuUsage(const CpuUsage& from);
  CpuUsage(CpuUsage&& from) noexcept
    : CpuUsage() {
    *this = ::std::move(from);
  }

  inline CpuUsage& operator=(const CpuUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpuUsage& operator=(CpuUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpuUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpuUsage* internal_default_instance() {
    return reinterpret_cast<const CpuUsage*>(
               &_CpuUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CpuUsage& a, CpuUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(CpuUsage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpuUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpuUsage* New() const final {
    return new CpuUsage();
  }

  CpuUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpuUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CpuUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CpuUsage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpuUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.CpuUsage";
  }
  protected:
  explicit CpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .streaming_performance.BaseStatisticInfo data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::streaming_performance::BaseStatisticInfo& data() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::BaseStatisticInfo* release_data();
  ::streaming_performance::BaseStatisticInfo* mutable_data();
  void set_allocated_data(::streaming_performance::BaseStatisticInfo* data);
  private:
  const ::streaming_performance::BaseStatisticInfo& _internal_data() const;
  ::streaming_performance::BaseStatisticInfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::streaming_performance::BaseStatisticInfo* data);
  ::streaming_performance::BaseStatisticInfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:streaming_performance.CpuUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::streaming_performance::BaseStatisticInfo* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class MemoryUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.MemoryUsage) */ {
 public:
  inline MemoryUsage() : MemoryUsage(nullptr) {}
  ~MemoryUsage() override;
  explicit constexpr MemoryUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryUsage(const MemoryUsage& from);
  MemoryUsage(MemoryUsage&& from) noexcept
    : MemoryUsage() {
    *this = ::std::move(from);
  }

  inline MemoryUsage& operator=(const MemoryUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryUsage& operator=(MemoryUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryUsage* internal_default_instance() {
    return reinterpret_cast<const MemoryUsage*>(
               &_MemoryUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MemoryUsage& a, MemoryUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryUsage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryUsage* New() const final {
    return new MemoryUsage();
  }

  MemoryUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryUsage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.MemoryUsage";
  }
  protected:
  explicit MemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .streaming_performance.BaseStatisticInfo data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::streaming_performance::BaseStatisticInfo& data() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::BaseStatisticInfo* release_data();
  ::streaming_performance::BaseStatisticInfo* mutable_data();
  void set_allocated_data(::streaming_performance::BaseStatisticInfo* data);
  private:
  const ::streaming_performance::BaseStatisticInfo& _internal_data() const;
  ::streaming_performance::BaseStatisticInfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::streaming_performance::BaseStatisticInfo* data);
  ::streaming_performance::BaseStatisticInfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:streaming_performance.MemoryUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::streaming_performance::BaseStatisticInfo* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class ProcessCpuUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.ProcessCpuUsage) */ {
 public:
  inline ProcessCpuUsage() : ProcessCpuUsage(nullptr) {}
  ~ProcessCpuUsage() override;
  explicit constexpr ProcessCpuUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessCpuUsage(const ProcessCpuUsage& from);
  ProcessCpuUsage(ProcessCpuUsage&& from) noexcept
    : ProcessCpuUsage() {
    *this = ::std::move(from);
  }

  inline ProcessCpuUsage& operator=(const ProcessCpuUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessCpuUsage& operator=(ProcessCpuUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessCpuUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessCpuUsage* internal_default_instance() {
    return reinterpret_cast<const ProcessCpuUsage*>(
               &_ProcessCpuUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ProcessCpuUsage& a, ProcessCpuUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessCpuUsage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessCpuUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessCpuUsage* New() const final {
    return new ProcessCpuUsage();
  }

  ProcessCpuUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessCpuUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessCpuUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessCpuUsage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessCpuUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.ProcessCpuUsage";
  }
  protected:
  explicit ProcessCpuUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .streaming_performance.BaseStatisticInfo data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::streaming_performance::BaseStatisticInfo& data() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::BaseStatisticInfo* release_data();
  ::streaming_performance::BaseStatisticInfo* mutable_data();
  void set_allocated_data(::streaming_performance::BaseStatisticInfo* data);
  private:
  const ::streaming_performance::BaseStatisticInfo& _internal_data() const;
  ::streaming_performance::BaseStatisticInfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::streaming_performance::BaseStatisticInfo* data);
  ::streaming_performance::BaseStatisticInfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:streaming_performance.ProcessCpuUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::streaming_performance::BaseStatisticInfo* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class ProcessMemoryUsage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.ProcessMemoryUsage) */ {
 public:
  inline ProcessMemoryUsage() : ProcessMemoryUsage(nullptr) {}
  ~ProcessMemoryUsage() override;
  explicit constexpr ProcessMemoryUsage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessMemoryUsage(const ProcessMemoryUsage& from);
  ProcessMemoryUsage(ProcessMemoryUsage&& from) noexcept
    : ProcessMemoryUsage() {
    *this = ::std::move(from);
  }

  inline ProcessMemoryUsage& operator=(const ProcessMemoryUsage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessMemoryUsage& operator=(ProcessMemoryUsage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessMemoryUsage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessMemoryUsage* internal_default_instance() {
    return reinterpret_cast<const ProcessMemoryUsage*>(
               &_ProcessMemoryUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ProcessMemoryUsage& a, ProcessMemoryUsage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessMemoryUsage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessMemoryUsage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessMemoryUsage* New() const final {
    return new ProcessMemoryUsage();
  }

  ProcessMemoryUsage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessMemoryUsage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessMemoryUsage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessMemoryUsage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessMemoryUsage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.ProcessMemoryUsage";
  }
  protected:
  explicit ProcessMemoryUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .streaming_performance.BaseStatisticInfo data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::streaming_performance::BaseStatisticInfo& data() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::BaseStatisticInfo* release_data();
  ::streaming_performance::BaseStatisticInfo* mutable_data();
  void set_allocated_data(::streaming_performance::BaseStatisticInfo* data);
  private:
  const ::streaming_performance::BaseStatisticInfo& _internal_data() const;
  ::streaming_performance::BaseStatisticInfo* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::streaming_performance::BaseStatisticInfo* data);
  ::streaming_performance::BaseStatisticInfo* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:streaming_performance.ProcessMemoryUsage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::streaming_performance::BaseStatisticInfo* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class StatisticsSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.StatisticsSet) */ {
 public:
  inline StatisticsSet() : StatisticsSet(nullptr) {}
  ~StatisticsSet() override;
  explicit constexpr StatisticsSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatisticsSet(const StatisticsSet& from);
  StatisticsSet(StatisticsSet&& from) noexcept
    : StatisticsSet() {
    *this = ::std::move(from);
  }

  inline StatisticsSet& operator=(const StatisticsSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatisticsSet& operator=(StatisticsSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatisticsSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatisticsSet* internal_default_instance() {
    return reinterpret_cast<const StatisticsSet*>(
               &_StatisticsSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StatisticsSet& a, StatisticsSet& b) {
    a.Swap(&b);
  }
  inline void Swap(StatisticsSet* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatisticsSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatisticsSet* New() const final {
    return new StatisticsSet();
  }

  StatisticsSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatisticsSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatisticsSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatisticsSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatisticsSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.StatisticsSet";
  }
  protected:
  explicit StatisticsSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNdfFieldNumber = 1,
    kRdfFieldNumber = 2,
    kEdfFieldNumber = 3,
    kGpuFieldNumber = 4,
    kCpuFieldNumber = 5,
    kMemFieldNumber = 6,
    kPCpuFieldNumber = 7,
    kPMemFieldNumber = 8,
  };
  // .streaming_performance.NetworkDropFrame ndf = 1;
  bool has_ndf() const;
  private:
  bool _internal_has_ndf() const;
  public:
  void clear_ndf();
  const ::streaming_performance::NetworkDropFrame& ndf() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::NetworkDropFrame* release_ndf();
  ::streaming_performance::NetworkDropFrame* mutable_ndf();
  void set_allocated_ndf(::streaming_performance::NetworkDropFrame* ndf);
  private:
  const ::streaming_performance::NetworkDropFrame& _internal_ndf() const;
  ::streaming_performance::NetworkDropFrame* _internal_mutable_ndf();
  public:
  void unsafe_arena_set_allocated_ndf(
      ::streaming_performance::NetworkDropFrame* ndf);
  ::streaming_performance::NetworkDropFrame* unsafe_arena_release_ndf();

  // .streaming_performance.RenderDropFrame rdf = 2;
  bool has_rdf() const;
  private:
  bool _internal_has_rdf() const;
  public:
  void clear_rdf();
  const ::streaming_performance::RenderDropFrame& rdf() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::RenderDropFrame* release_rdf();
  ::streaming_performance::RenderDropFrame* mutable_rdf();
  void set_allocated_rdf(::streaming_performance::RenderDropFrame* rdf);
  private:
  const ::streaming_performance::RenderDropFrame& _internal_rdf() const;
  ::streaming_performance::RenderDropFrame* _internal_mutable_rdf();
  public:
  void unsafe_arena_set_allocated_rdf(
      ::streaming_performance::RenderDropFrame* rdf);
  ::streaming_performance::RenderDropFrame* unsafe_arena_release_rdf();

  // .streaming_performance.EncodeDropFrame edf = 3;
  bool has_edf() const;
  private:
  bool _internal_has_edf() const;
  public:
  void clear_edf();
  const ::streaming_performance::EncodeDropFrame& edf() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::EncodeDropFrame* release_edf();
  ::streaming_performance::EncodeDropFrame* mutable_edf();
  void set_allocated_edf(::streaming_performance::EncodeDropFrame* edf);
  private:
  const ::streaming_performance::EncodeDropFrame& _internal_edf() const;
  ::streaming_performance::EncodeDropFrame* _internal_mutable_edf();
  public:
  void unsafe_arena_set_allocated_edf(
      ::streaming_performance::EncodeDropFrame* edf);
  ::streaming_performance::EncodeDropFrame* unsafe_arena_release_edf();

  // .streaming_performance.GpuUsage gpu = 4;
  bool has_gpu() const;
  private:
  bool _internal_has_gpu() const;
  public:
  void clear_gpu();
  const ::streaming_performance::GpuUsage& gpu() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::GpuUsage* release_gpu();
  ::streaming_performance::GpuUsage* mutable_gpu();
  void set_allocated_gpu(::streaming_performance::GpuUsage* gpu);
  private:
  const ::streaming_performance::GpuUsage& _internal_gpu() const;
  ::streaming_performance::GpuUsage* _internal_mutable_gpu();
  public:
  void unsafe_arena_set_allocated_gpu(
      ::streaming_performance::GpuUsage* gpu);
  ::streaming_performance::GpuUsage* unsafe_arena_release_gpu();

  // .streaming_performance.CpuUsage cpu = 5;
  bool has_cpu() const;
  private:
  bool _internal_has_cpu() const;
  public:
  void clear_cpu();
  const ::streaming_performance::CpuUsage& cpu() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::CpuUsage* release_cpu();
  ::streaming_performance::CpuUsage* mutable_cpu();
  void set_allocated_cpu(::streaming_performance::CpuUsage* cpu);
  private:
  const ::streaming_performance::CpuUsage& _internal_cpu() const;
  ::streaming_performance::CpuUsage* _internal_mutable_cpu();
  public:
  void unsafe_arena_set_allocated_cpu(
      ::streaming_performance::CpuUsage* cpu);
  ::streaming_performance::CpuUsage* unsafe_arena_release_cpu();

  // .streaming_performance.MemoryUsage mem = 6;
  bool has_mem() const;
  private:
  bool _internal_has_mem() const;
  public:
  void clear_mem();
  const ::streaming_performance::MemoryUsage& mem() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::MemoryUsage* release_mem();
  ::streaming_performance::MemoryUsage* mutable_mem();
  void set_allocated_mem(::streaming_performance::MemoryUsage* mem);
  private:
  const ::streaming_performance::MemoryUsage& _internal_mem() const;
  ::streaming_performance::MemoryUsage* _internal_mutable_mem();
  public:
  void unsafe_arena_set_allocated_mem(
      ::streaming_performance::MemoryUsage* mem);
  ::streaming_performance::MemoryUsage* unsafe_arena_release_mem();

  // .streaming_performance.ProcessCpuUsage p_cpu = 7;
  bool has_p_cpu() const;
  private:
  bool _internal_has_p_cpu() const;
  public:
  void clear_p_cpu();
  const ::streaming_performance::ProcessCpuUsage& p_cpu() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::ProcessCpuUsage* release_p_cpu();
  ::streaming_performance::ProcessCpuUsage* mutable_p_cpu();
  void set_allocated_p_cpu(::streaming_performance::ProcessCpuUsage* p_cpu);
  private:
  const ::streaming_performance::ProcessCpuUsage& _internal_p_cpu() const;
  ::streaming_performance::ProcessCpuUsage* _internal_mutable_p_cpu();
  public:
  void unsafe_arena_set_allocated_p_cpu(
      ::streaming_performance::ProcessCpuUsage* p_cpu);
  ::streaming_performance::ProcessCpuUsage* unsafe_arena_release_p_cpu();

  // .streaming_performance.ProcessMemoryUsage p_mem = 8;
  bool has_p_mem() const;
  private:
  bool _internal_has_p_mem() const;
  public:
  void clear_p_mem();
  const ::streaming_performance::ProcessMemoryUsage& p_mem() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::ProcessMemoryUsage* release_p_mem();
  ::streaming_performance::ProcessMemoryUsage* mutable_p_mem();
  void set_allocated_p_mem(::streaming_performance::ProcessMemoryUsage* p_mem);
  private:
  const ::streaming_performance::ProcessMemoryUsage& _internal_p_mem() const;
  ::streaming_performance::ProcessMemoryUsage* _internal_mutable_p_mem();
  public:
  void unsafe_arena_set_allocated_p_mem(
      ::streaming_performance::ProcessMemoryUsage* p_mem);
  ::streaming_performance::ProcessMemoryUsage* unsafe_arena_release_p_mem();

  // @@protoc_insertion_point(class_scope:streaming_performance.StatisticsSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::streaming_performance::NetworkDropFrame* ndf_;
  ::streaming_performance::RenderDropFrame* rdf_;
  ::streaming_performance::EncodeDropFrame* edf_;
  ::streaming_performance::GpuUsage* gpu_;
  ::streaming_performance::CpuUsage* cpu_;
  ::streaming_performance::MemoryUsage* mem_;
  ::streaming_performance::ProcessCpuUsage* p_cpu_;
  ::streaming_performance::ProcessMemoryUsage* p_mem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// -------------------------------------------------------------------

class PerformanceReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:streaming_performance.PerformanceReport) */ {
 public:
  inline PerformanceReport() : PerformanceReport(nullptr) {}
  ~PerformanceReport() override;
  explicit constexpr PerformanceReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerformanceReport(const PerformanceReport& from);
  PerformanceReport(PerformanceReport&& from) noexcept
    : PerformanceReport() {
    *this = ::std::move(from);
  }

  inline PerformanceReport& operator=(const PerformanceReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformanceReport& operator=(PerformanceReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerformanceReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerformanceReport* internal_default_instance() {
    return reinterpret_cast<const PerformanceReport*>(
               &_PerformanceReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PerformanceReport& a, PerformanceReport& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformanceReport* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerformanceReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerformanceReport* New() const final {
    return new PerformanceReport();
  }

  PerformanceReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerformanceReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerformanceReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PerformanceReport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerformanceReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "streaming_performance.PerformanceReport";
  }
  protected:
  explicit PerformanceReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceItemsFieldNumber = 16,
    kAppInfoFieldNumber = 3,
    kRuntimeInfoFieldNumber = 4,
    kStatisticsFieldNumber = 5,
    kLogverFieldNumber = 1,
    kSamplingFieldNumber = 2,
  };
  // repeated .streaming_performance.SourceItem source_items = 16;
  int source_items_size() const;
  private:
  int _internal_source_items_size() const;
  public:
  void clear_source_items();
  ::streaming_performance::SourceItem* mutable_source_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SourceItem >*
      mutable_source_items();
  private:
  const ::streaming_performance::SourceItem& _internal_source_items(int index) const;
  ::streaming_performance::SourceItem* _internal_add_source_items();
  public:
  const ::streaming_performance::SourceItem& source_items(int index) const;
  ::streaming_performance::SourceItem* add_source_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SourceItem >&
      source_items() const;

  // .streaming_performance.AppInfo app_info = 3;
  bool has_app_info() const;
  private:
  bool _internal_has_app_info() const;
  public:
  void clear_app_info();
  const ::streaming_performance::AppInfo& app_info() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::AppInfo* release_app_info();
  ::streaming_performance::AppInfo* mutable_app_info();
  void set_allocated_app_info(::streaming_performance::AppInfo* app_info);
  private:
  const ::streaming_performance::AppInfo& _internal_app_info() const;
  ::streaming_performance::AppInfo* _internal_mutable_app_info();
  public:
  void unsafe_arena_set_allocated_app_info(
      ::streaming_performance::AppInfo* app_info);
  ::streaming_performance::AppInfo* unsafe_arena_release_app_info();

  // .streaming_performance.StartLiveInfo runtime_info = 4;
  bool has_runtime_info() const;
  private:
  bool _internal_has_runtime_info() const;
  public:
  void clear_runtime_info();
  const ::streaming_performance::StartLiveInfo& runtime_info() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::StartLiveInfo* release_runtime_info();
  ::streaming_performance::StartLiveInfo* mutable_runtime_info();
  void set_allocated_runtime_info(::streaming_performance::StartLiveInfo* runtime_info);
  private:
  const ::streaming_performance::StartLiveInfo& _internal_runtime_info() const;
  ::streaming_performance::StartLiveInfo* _internal_mutable_runtime_info();
  public:
  void unsafe_arena_set_allocated_runtime_info(
      ::streaming_performance::StartLiveInfo* runtime_info);
  ::streaming_performance::StartLiveInfo* unsafe_arena_release_runtime_info();

  // .streaming_performance.StatisticsSet statistics = 5;
  bool has_statistics() const;
  private:
  bool _internal_has_statistics() const;
  public:
  void clear_statistics();
  const ::streaming_performance::StatisticsSet& statistics() const;
  PROTOBUF_MUST_USE_RESULT ::streaming_performance::StatisticsSet* release_statistics();
  ::streaming_performance::StatisticsSet* mutable_statistics();
  void set_allocated_statistics(::streaming_performance::StatisticsSet* statistics);
  private:
  const ::streaming_performance::StatisticsSet& _internal_statistics() const;
  ::streaming_performance::StatisticsSet* _internal_mutable_statistics();
  public:
  void unsafe_arena_set_allocated_statistics(
      ::streaming_performance::StatisticsSet* statistics);
  ::streaming_performance::StatisticsSet* unsafe_arena_release_statistics();

  // int32 logver = 1;
  void clear_logver();
  ::PROTOBUF_NAMESPACE_ID::int32 logver() const;
  void set_logver(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logver() const;
  void _internal_set_logver(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sampling = 2;
  void clear_sampling();
  ::PROTOBUF_NAMESPACE_ID::int32 sampling() const;
  void set_sampling(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sampling() const;
  void _internal_set_sampling(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:streaming_performance.PerformanceReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SourceItem > source_items_;
  ::streaming_performance::AppInfo* app_info_;
  ::streaming_performance::StartLiveInfo* runtime_info_;
  ::streaming_performance::StatisticsSet* statistics_;
  ::PROTOBUF_NAMESPACE_ID::int32 logver_;
  ::PROTOBUF_NAMESPACE_ID::int32 sampling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_streaming_5fdetails_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemInfo

// string system_ver = 1;
inline void SystemInfo::clear_system_ver() {
  system_ver_.ClearToEmpty();
}
inline const std::string& SystemInfo::system_ver() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SystemInfo.system_ver)
  return _internal_system_ver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_system_ver(ArgT0&& arg0, ArgT... args) {
 
 system_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.system_ver)
}
inline std::string* SystemInfo::mutable_system_ver() {
  std::string* _s = _internal_mutable_system_ver();
  // @@protoc_insertion_point(field_mutable:streaming_performance.SystemInfo.system_ver)
  return _s;
}
inline const std::string& SystemInfo::_internal_system_ver() const {
  return system_ver_.Get();
}
inline void SystemInfo::_internal_set_system_ver(const std::string& value) {
  
  system_ver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_system_ver() {
  
  return system_ver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_system_ver() {
  // @@protoc_insertion_point(field_release:streaming_performance.SystemInfo.system_ver)
  return system_ver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_system_ver(std::string* system_ver) {
  if (system_ver != nullptr) {
    
  } else {
    
  }
  system_ver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_ver,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.SystemInfo.system_ver)
}

// string cpu = 2;
inline void SystemInfo::clear_cpu() {
  cpu_.ClearToEmpty();
}
inline const std::string& SystemInfo::cpu() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SystemInfo.cpu)
  return _internal_cpu();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_cpu(ArgT0&& arg0, ArgT... args) {
 
 cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.cpu)
}
inline std::string* SystemInfo::mutable_cpu() {
  std::string* _s = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:streaming_performance.SystemInfo.cpu)
  return _s;
}
inline const std::string& SystemInfo::_internal_cpu() const {
  return cpu_.Get();
}
inline void SystemInfo::_internal_set_cpu(const std::string& value) {
  
  cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_cpu() {
  
  return cpu_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_cpu() {
  // @@protoc_insertion_point(field_release:streaming_performance.SystemInfo.cpu)
  return cpu_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_cpu(std::string* cpu) {
  if (cpu != nullptr) {
    
  } else {
    
  }
  cpu_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.SystemInfo.cpu)
}

// repeated string graphic = 3;
inline int SystemInfo::_internal_graphic_size() const {
  return graphic_.size();
}
inline int SystemInfo::graphic_size() const {
  return _internal_graphic_size();
}
inline void SystemInfo::clear_graphic() {
  graphic_.Clear();
}
inline std::string* SystemInfo::add_graphic() {
  std::string* _s = _internal_add_graphic();
  // @@protoc_insertion_point(field_add_mutable:streaming_performance.SystemInfo.graphic)
  return _s;
}
inline const std::string& SystemInfo::_internal_graphic(int index) const {
  return graphic_.Get(index);
}
inline const std::string& SystemInfo::graphic(int index) const {
  // @@protoc_insertion_point(field_get:streaming_performance.SystemInfo.graphic)
  return _internal_graphic(index);
}
inline std::string* SystemInfo::mutable_graphic(int index) {
  // @@protoc_insertion_point(field_mutable:streaming_performance.SystemInfo.graphic)
  return graphic_.Mutable(index);
}
inline void SystemInfo::set_graphic(int index, const std::string& value) {
  graphic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.graphic)
}
inline void SystemInfo::set_graphic(int index, std::string&& value) {
  graphic_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.graphic)
}
inline void SystemInfo::set_graphic(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  graphic_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:streaming_performance.SystemInfo.graphic)
}
inline void SystemInfo::set_graphic(int index, const char* value, size_t size) {
  graphic_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:streaming_performance.SystemInfo.graphic)
}
inline std::string* SystemInfo::_internal_add_graphic() {
  return graphic_.Add();
}
inline void SystemInfo::add_graphic(const std::string& value) {
  graphic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:streaming_performance.SystemInfo.graphic)
}
inline void SystemInfo::add_graphic(std::string&& value) {
  graphic_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:streaming_performance.SystemInfo.graphic)
}
inline void SystemInfo::add_graphic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  graphic_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:streaming_performance.SystemInfo.graphic)
}
inline void SystemInfo::add_graphic(const char* value, size_t size) {
  graphic_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:streaming_performance.SystemInfo.graphic)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SystemInfo::graphic() const {
  // @@protoc_insertion_point(field_list:streaming_performance.SystemInfo.graphic)
  return graphic_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SystemInfo::mutable_graphic() {
  // @@protoc_insertion_point(field_mutable_list:streaming_performance.SystemInfo.graphic)
  return &graphic_;
}

// string load_graphic = 4;
inline void SystemInfo::clear_load_graphic() {
  load_graphic_.ClearToEmpty();
}
inline const std::string& SystemInfo::load_graphic() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SystemInfo.load_graphic)
  return _internal_load_graphic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_load_graphic(ArgT0&& arg0, ArgT... args) {
 
 load_graphic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.load_graphic)
}
inline std::string* SystemInfo::mutable_load_graphic() {
  std::string* _s = _internal_mutable_load_graphic();
  // @@protoc_insertion_point(field_mutable:streaming_performance.SystemInfo.load_graphic)
  return _s;
}
inline const std::string& SystemInfo::_internal_load_graphic() const {
  return load_graphic_.Get();
}
inline void SystemInfo::_internal_set_load_graphic(const std::string& value) {
  
  load_graphic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_load_graphic() {
  
  return load_graphic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_load_graphic() {
  // @@protoc_insertion_point(field_release:streaming_performance.SystemInfo.load_graphic)
  return load_graphic_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_load_graphic(std::string* load_graphic) {
  if (load_graphic != nullptr) {
    
  } else {
    
  }
  load_graphic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), load_graphic,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.SystemInfo.load_graphic)
}

// string memory = 5;
inline void SystemInfo::clear_memory() {
  memory_.ClearToEmpty();
}
inline const std::string& SystemInfo::memory() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SystemInfo.memory)
  return _internal_memory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_memory(ArgT0&& arg0, ArgT... args) {
 
 memory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.memory)
}
inline std::string* SystemInfo::mutable_memory() {
  std::string* _s = _internal_mutable_memory();
  // @@protoc_insertion_point(field_mutable:streaming_performance.SystemInfo.memory)
  return _s;
}
inline const std::string& SystemInfo::_internal_memory() const {
  return memory_.Get();
}
inline void SystemInfo::_internal_set_memory(const std::string& value) {
  
  memory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_memory() {
  
  return memory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_memory() {
  // @@protoc_insertion_point(field_release:streaming_performance.SystemInfo.memory)
  return memory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_memory(std::string* memory) {
  if (memory != nullptr) {
    
  } else {
    
  }
  memory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.SystemInfo.memory)
}

// .streaming_performance.RuntimeNetWork network = 6;
inline void SystemInfo::clear_network() {
  network_ = 0;
}
inline ::streaming_performance::RuntimeNetWork SystemInfo::_internal_network() const {
  return static_cast< ::streaming_performance::RuntimeNetWork >(network_);
}
inline ::streaming_performance::RuntimeNetWork SystemInfo::network() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SystemInfo.network)
  return _internal_network();
}
inline void SystemInfo::_internal_set_network(::streaming_performance::RuntimeNetWork value) {
  
  network_ = value;
}
inline void SystemInfo::set_network(::streaming_performance::RuntimeNetWork value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.network)
}

// string co = 7;
inline void SystemInfo::clear_co() {
  co_.ClearToEmpty();
}
inline const std::string& SystemInfo::co() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SystemInfo.co)
  return _internal_co();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_co(ArgT0&& arg0, ArgT... args) {
 
 co_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.co)
}
inline std::string* SystemInfo::mutable_co() {
  std::string* _s = _internal_mutable_co();
  // @@protoc_insertion_point(field_mutable:streaming_performance.SystemInfo.co)
  return _s;
}
inline const std::string& SystemInfo::_internal_co() const {
  return co_.Get();
}
inline void SystemInfo::_internal_set_co(const std::string& value) {
  
  co_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_co() {
  
  return co_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_co() {
  // @@protoc_insertion_point(field_release:streaming_performance.SystemInfo.co)
  return co_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_co(std::string* co) {
  if (co != nullptr) {
    
  } else {
    
  }
  co_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), co,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.SystemInfo.co)
}

// string ip = 8;
inline void SystemInfo::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& SystemInfo::ip() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SystemInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.ip)
}
inline std::string* SystemInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:streaming_performance.SystemInfo.ip)
  return _s;
}
inline const std::string& SystemInfo::_internal_ip() const {
  return ip_.Get();
}
inline void SystemInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_ip() {
  // @@protoc_insertion_point(field_release:streaming_performance.SystemInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.SystemInfo.ip)
}

// string region = 9;
inline void SystemInfo::clear_region() {
  region_.ClearToEmpty();
}
inline const std::string& SystemInfo::region() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SystemInfo.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_region(ArgT0&& arg0, ArgT... args) {
 
 region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.SystemInfo.region)
}
inline std::string* SystemInfo::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:streaming_performance.SystemInfo.region)
  return _s;
}
inline const std::string& SystemInfo::_internal_region() const {
  return region_.Get();
}
inline void SystemInfo::_internal_set_region(const std::string& value) {
  
  region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_region() {
  
  return region_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_region() {
  // @@protoc_insertion_point(field_release:streaming_performance.SystemInfo.region)
  return region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.SystemInfo.region)
}

// -------------------------------------------------------------------

// AppInfo

// .streaming_performance.SystemInfo sys_info = 1;
inline bool AppInfo::_internal_has_sys_info() const {
  return this != internal_default_instance() && sys_info_ != nullptr;
}
inline bool AppInfo::has_sys_info() const {
  return _internal_has_sys_info();
}
inline void AppInfo::clear_sys_info() {
  if (GetArenaForAllocation() == nullptr && sys_info_ != nullptr) {
    delete sys_info_;
  }
  sys_info_ = nullptr;
}
inline const ::streaming_performance::SystemInfo& AppInfo::_internal_sys_info() const {
  const ::streaming_performance::SystemInfo* p = sys_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::SystemInfo&>(
      ::streaming_performance::_SystemInfo_default_instance_);
}
inline const ::streaming_performance::SystemInfo& AppInfo::sys_info() const {
  // @@protoc_insertion_point(field_get:streaming_performance.AppInfo.sys_info)
  return _internal_sys_info();
}
inline void AppInfo::unsafe_arena_set_allocated_sys_info(
    ::streaming_performance::SystemInfo* sys_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sys_info_);
  }
  sys_info_ = sys_info;
  if (sys_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.AppInfo.sys_info)
}
inline ::streaming_performance::SystemInfo* AppInfo::release_sys_info() {
  
  ::streaming_performance::SystemInfo* temp = sys_info_;
  sys_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::SystemInfo* AppInfo::unsafe_arena_release_sys_info() {
  // @@protoc_insertion_point(field_release:streaming_performance.AppInfo.sys_info)
  
  ::streaming_performance::SystemInfo* temp = sys_info_;
  sys_info_ = nullptr;
  return temp;
}
inline ::streaming_performance::SystemInfo* AppInfo::_internal_mutable_sys_info() {
  
  if (sys_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::SystemInfo>(GetArenaForAllocation());
    sys_info_ = p;
  }
  return sys_info_;
}
inline ::streaming_performance::SystemInfo* AppInfo::mutable_sys_info() {
  ::streaming_performance::SystemInfo* _msg = _internal_mutable_sys_info();
  // @@protoc_insertion_point(field_mutable:streaming_performance.AppInfo.sys_info)
  return _msg;
}
inline void AppInfo::set_allocated_sys_info(::streaming_performance::SystemInfo* sys_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sys_info_;
  }
  if (sys_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::SystemInfo>::GetOwningArena(sys_info);
    if (message_arena != submessage_arena) {
      sys_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sys_info, submessage_arena);
    }
    
  } else {
    
  }
  sys_info_ = sys_info;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.AppInfo.sys_info)
}

// int32 app_id = 2;
inline void AppInfo::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::app_id() const {
  // @@protoc_insertion_point(field_get:streaming_performance.AppInfo.app_id)
  return _internal_app_id();
}
inline void AppInfo::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
}
inline void AppInfo::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:streaming_performance.AppInfo.app_id)
}

// int32 platform = 3;
inline void AppInfo::clear_platform() {
  platform_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::_internal_platform() const {
  return platform_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::platform() const {
  // @@protoc_insertion_point(field_get:streaming_performance.AppInfo.platform)
  return _internal_platform();
}
inline void AppInfo::_internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platform_ = value;
}
inline void AppInfo::set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:streaming_performance.AppInfo.platform)
}

// string buvid = 4;
inline void AppInfo::clear_buvid() {
  buvid_.ClearToEmpty();
}
inline const std::string& AppInfo::buvid() const {
  // @@protoc_insertion_point(field_get:streaming_performance.AppInfo.buvid)
  return _internal_buvid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_buvid(ArgT0&& arg0, ArgT... args) {
 
 buvid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.AppInfo.buvid)
}
inline std::string* AppInfo::mutable_buvid() {
  std::string* _s = _internal_mutable_buvid();
  // @@protoc_insertion_point(field_mutable:streaming_performance.AppInfo.buvid)
  return _s;
}
inline const std::string& AppInfo::_internal_buvid() const {
  return buvid_.Get();
}
inline void AppInfo::_internal_set_buvid(const std::string& value) {
  
  buvid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_buvid() {
  
  return buvid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_buvid() {
  // @@protoc_insertion_point(field_release:streaming_performance.AppInfo.buvid)
  return buvid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_buvid(std::string* buvid) {
  if (buvid != nullptr) {
    
  } else {
    
  }
  buvid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buvid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.AppInfo.buvid)
}

// string version = 5;
inline void AppInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& AppInfo::version() const {
  // @@protoc_insertion_point(field_get:streaming_performance.AppInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.AppInfo.version)
}
inline std::string* AppInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:streaming_performance.AppInfo.version)
  return _s;
}
inline const std::string& AppInfo::_internal_version() const {
  return version_.Get();
}
inline void AppInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_version() {
  // @@protoc_insertion_point(field_release:streaming_performance.AppInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.AppInfo.version)
}

// int32 build_no = 6;
inline void AppInfo::clear_build_no() {
  build_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::_internal_build_no() const {
  return build_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::build_no() const {
  // @@protoc_insertion_point(field_get:streaming_performance.AppInfo.build_no)
  return _internal_build_no();
}
inline void AppInfo::_internal_set_build_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  build_no_ = value;
}
inline void AppInfo::set_build_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_build_no(value);
  // @@protoc_insertion_point(field_set:streaming_performance.AppInfo.build_no)
}

// string account = 7;
inline void AppInfo::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AppInfo::account() const {
  // @@protoc_insertion_point(field_get:streaming_performance.AppInfo.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.AppInfo.account)
}
inline std::string* AppInfo::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:streaming_performance.AppInfo.account)
  return _s;
}
inline const std::string& AppInfo::_internal_account() const {
  return account_.Get();
}
inline void AppInfo::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_account() {
  // @@protoc_insertion_point(field_release:streaming_performance.AppInfo.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.AppInfo.account)
}

// int64 uid = 8;
inline void AppInfo::clear_uid() {
  uid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppInfo::uid() const {
  // @@protoc_insertion_point(field_get:streaming_performance.AppInfo.uid)
  return _internal_uid();
}
inline void AppInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
}
inline void AppInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:streaming_performance.AppInfo.uid)
}

// int64 roomid = 9;
inline void AppInfo::clear_roomid() {
  roomid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppInfo::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppInfo::roomid() const {
  // @@protoc_insertion_point(field_get:streaming_performance.AppInfo.roomid)
  return _internal_roomid();
}
inline void AppInfo::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  roomid_ = value;
}
inline void AppInfo::set_roomid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:streaming_performance.AppInfo.roomid)
}

// -------------------------------------------------------------------

// EncodingSettings

// int64 ts = 1;
inline void EncodingSettings::clear_ts() {
  ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EncodingSettings::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EncodingSettings::ts() const {
  // @@protoc_insertion_point(field_get:streaming_performance.EncodingSettings.ts)
  return _internal_ts();
}
inline void EncodingSettings::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void EncodingSettings::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:streaming_performance.EncodingSettings.ts)
}

// int32 bit_rate = 2;
inline void EncodingSettings::clear_bit_rate() {
  bit_rate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncodingSettings::_internal_bit_rate() const {
  return bit_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EncodingSettings::bit_rate() const {
  // @@protoc_insertion_point(field_get:streaming_performance.EncodingSettings.bit_rate)
  return _internal_bit_rate();
}
inline void EncodingSettings::_internal_set_bit_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bit_rate_ = value;
}
inline void EncodingSettings::set_bit_rate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bit_rate(value);
  // @@protoc_insertion_point(field_set:streaming_performance.EncodingSettings.bit_rate)
}

// string rate_type = 3;
inline void EncodingSettings::clear_rate_type() {
  rate_type_.ClearToEmpty();
}
inline const std::string& EncodingSettings::rate_type() const {
  // @@protoc_insertion_point(field_get:streaming_performance.EncodingSettings.rate_type)
  return _internal_rate_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncodingSettings::set_rate_type(ArgT0&& arg0, ArgT... args) {
 
 rate_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.EncodingSettings.rate_type)
}
inline std::string* EncodingSettings::mutable_rate_type() {
  std::string* _s = _internal_mutable_rate_type();
  // @@protoc_insertion_point(field_mutable:streaming_performance.EncodingSettings.rate_type)
  return _s;
}
inline const std::string& EncodingSettings::_internal_rate_type() const {
  return rate_type_.Get();
}
inline void EncodingSettings::_internal_set_rate_type(const std::string& value) {
  
  rate_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EncodingSettings::_internal_mutable_rate_type() {
  
  return rate_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EncodingSettings::release_rate_type() {
  // @@protoc_insertion_point(field_release:streaming_performance.EncodingSettings.rate_type)
  return rate_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EncodingSettings::set_allocated_rate_type(std::string* rate_type) {
  if (rate_type != nullptr) {
    
  } else {
    
  }
  rate_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rate_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.EncodingSettings.rate_type)
}

// string fps = 4;
inline void EncodingSettings::clear_fps() {
  fps_.ClearToEmpty();
}
inline const std::string& EncodingSettings::fps() const {
  // @@protoc_insertion_point(field_get:streaming_performance.EncodingSettings.fps)
  return _internal_fps();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncodingSettings::set_fps(ArgT0&& arg0, ArgT... args) {
 
 fps_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.EncodingSettings.fps)
}
inline std::string* EncodingSettings::mutable_fps() {
  std::string* _s = _internal_mutable_fps();
  // @@protoc_insertion_point(field_mutable:streaming_performance.EncodingSettings.fps)
  return _s;
}
inline const std::string& EncodingSettings::_internal_fps() const {
  return fps_.Get();
}
inline void EncodingSettings::_internal_set_fps(const std::string& value) {
  
  fps_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EncodingSettings::_internal_mutable_fps() {
  
  return fps_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EncodingSettings::release_fps() {
  // @@protoc_insertion_point(field_release:streaming_performance.EncodingSettings.fps)
  return fps_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EncodingSettings::set_allocated_fps(std::string* fps) {
  if (fps != nullptr) {
    
  } else {
    
  }
  fps_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fps,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.EncodingSettings.fps)
}

// string resolution = 5;
inline void EncodingSettings::clear_resolution() {
  resolution_.ClearToEmpty();
}
inline const std::string& EncodingSettings::resolution() const {
  // @@protoc_insertion_point(field_get:streaming_performance.EncodingSettings.resolution)
  return _internal_resolution();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncodingSettings::set_resolution(ArgT0&& arg0, ArgT... args) {
 
 resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.EncodingSettings.resolution)
}
inline std::string* EncodingSettings::mutable_resolution() {
  std::string* _s = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:streaming_performance.EncodingSettings.resolution)
  return _s;
}
inline const std::string& EncodingSettings::_internal_resolution() const {
  return resolution_.Get();
}
inline void EncodingSettings::_internal_set_resolution(const std::string& value) {
  
  resolution_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EncodingSettings::_internal_mutable_resolution() {
  
  return resolution_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EncodingSettings::release_resolution() {
  // @@protoc_insertion_point(field_release:streaming_performance.EncodingSettings.resolution)
  return resolution_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EncodingSettings::set_allocated_resolution(std::string* resolution) {
  if (resolution != nullptr) {
    
  } else {
    
  }
  resolution_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resolution,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.EncodingSettings.resolution)
}

// string encoder = 6;
inline void EncodingSettings::clear_encoder() {
  encoder_.ClearToEmpty();
}
inline const std::string& EncodingSettings::encoder() const {
  // @@protoc_insertion_point(field_get:streaming_performance.EncodingSettings.encoder)
  return _internal_encoder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncodingSettings::set_encoder(ArgT0&& arg0, ArgT... args) {
 
 encoder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.EncodingSettings.encoder)
}
inline std::string* EncodingSettings::mutable_encoder() {
  std::string* _s = _internal_mutable_encoder();
  // @@protoc_insertion_point(field_mutable:streaming_performance.EncodingSettings.encoder)
  return _s;
}
inline const std::string& EncodingSettings::_internal_encoder() const {
  return encoder_.Get();
}
inline void EncodingSettings::_internal_set_encoder(const std::string& value) {
  
  encoder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EncodingSettings::_internal_mutable_encoder() {
  
  return encoder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EncodingSettings::release_encoder() {
  // @@protoc_insertion_point(field_release:streaming_performance.EncodingSettings.encoder)
  return encoder_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EncodingSettings::set_allocated_encoder(std::string* encoder) {
  if (encoder != nullptr) {
    
  } else {
    
  }
  encoder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoder,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.EncodingSettings.encoder)
}

// string quality = 7;
inline void EncodingSettings::clear_quality() {
  quality_.ClearToEmpty();
}
inline const std::string& EncodingSettings::quality() const {
  // @@protoc_insertion_point(field_get:streaming_performance.EncodingSettings.quality)
  return _internal_quality();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncodingSettings::set_quality(ArgT0&& arg0, ArgT... args) {
 
 quality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.EncodingSettings.quality)
}
inline std::string* EncodingSettings::mutable_quality() {
  std::string* _s = _internal_mutable_quality();
  // @@protoc_insertion_point(field_mutable:streaming_performance.EncodingSettings.quality)
  return _s;
}
inline const std::string& EncodingSettings::_internal_quality() const {
  return quality_.Get();
}
inline void EncodingSettings::_internal_set_quality(const std::string& value) {
  
  quality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EncodingSettings::_internal_mutable_quality() {
  
  return quality_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EncodingSettings::release_quality() {
  // @@protoc_insertion_point(field_release:streaming_performance.EncodingSettings.quality)
  return quality_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EncodingSettings::set_allocated_quality(std::string* quality) {
  if (quality != nullptr) {
    
  } else {
    
  }
  quality_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quality,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.EncodingSettings.quality)
}

// -------------------------------------------------------------------

// StartLiveInfo

// string live_key = 1;
inline void StartLiveInfo::clear_live_key() {
  live_key_.ClearToEmpty();
}
inline const std::string& StartLiveInfo::live_key() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StartLiveInfo.live_key)
  return _internal_live_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartLiveInfo::set_live_key(ArgT0&& arg0, ArgT... args) {
 
 live_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.StartLiveInfo.live_key)
}
inline std::string* StartLiveInfo::mutable_live_key() {
  std::string* _s = _internal_mutable_live_key();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StartLiveInfo.live_key)
  return _s;
}
inline const std::string& StartLiveInfo::_internal_live_key() const {
  return live_key_.Get();
}
inline void StartLiveInfo::_internal_set_live_key(const std::string& value) {
  
  live_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartLiveInfo::_internal_mutable_live_key() {
  
  return live_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartLiveInfo::release_live_key() {
  // @@protoc_insertion_point(field_release:streaming_performance.StartLiveInfo.live_key)
  return live_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartLiveInfo::set_allocated_live_key(std::string* live_key) {
  if (live_key != nullptr) {
    
  } else {
    
  }
  live_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), live_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StartLiveInfo.live_key)
}

// string cdn_host = 2;
inline void StartLiveInfo::clear_cdn_host() {
  cdn_host_.ClearToEmpty();
}
inline const std::string& StartLiveInfo::cdn_host() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StartLiveInfo.cdn_host)
  return _internal_cdn_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartLiveInfo::set_cdn_host(ArgT0&& arg0, ArgT... args) {
 
 cdn_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.StartLiveInfo.cdn_host)
}
inline std::string* StartLiveInfo::mutable_cdn_host() {
  std::string* _s = _internal_mutable_cdn_host();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StartLiveInfo.cdn_host)
  return _s;
}
inline const std::string& StartLiveInfo::_internal_cdn_host() const {
  return cdn_host_.Get();
}
inline void StartLiveInfo::_internal_set_cdn_host(const std::string& value) {
  
  cdn_host_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartLiveInfo::_internal_mutable_cdn_host() {
  
  return cdn_host_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartLiveInfo::release_cdn_host() {
  // @@protoc_insertion_point(field_release:streaming_performance.StartLiveInfo.cdn_host)
  return cdn_host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartLiveInfo::set_allocated_cdn_host(std::string* cdn_host) {
  if (cdn_host != nullptr) {
    
  } else {
    
  }
  cdn_host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cdn_host,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StartLiveInfo.cdn_host)
}

// string addr = 3;
inline void StartLiveInfo::clear_addr() {
  addr_.ClearToEmpty();
}
inline const std::string& StartLiveInfo::addr() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StartLiveInfo.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartLiveInfo::set_addr(ArgT0&& arg0, ArgT... args) {
 
 addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.StartLiveInfo.addr)
}
inline std::string* StartLiveInfo::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StartLiveInfo.addr)
  return _s;
}
inline const std::string& StartLiveInfo::_internal_addr() const {
  return addr_.Get();
}
inline void StartLiveInfo::_internal_set_addr(const std::string& value) {
  
  addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartLiveInfo::_internal_mutable_addr() {
  
  return addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartLiveInfo::release_addr() {
  // @@protoc_insertion_point(field_release:streaming_performance.StartLiveInfo.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartLiveInfo::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StartLiveInfo.addr)
}

// string code = 4;
inline void StartLiveInfo::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& StartLiveInfo::code() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StartLiveInfo.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartLiveInfo::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.StartLiveInfo.code)
}
inline std::string* StartLiveInfo::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StartLiveInfo.code)
  return _s;
}
inline const std::string& StartLiveInfo::_internal_code() const {
  return code_.Get();
}
inline void StartLiveInfo::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StartLiveInfo::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StartLiveInfo::release_code() {
  // @@protoc_insertion_point(field_release:streaming_performance.StartLiveInfo.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StartLiveInfo::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StartLiveInfo.code)
}

// int32 live_type = 5;
inline void StartLiveInfo::clear_live_type() {
  live_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartLiveInfo::_internal_live_type() const {
  return live_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartLiveInfo::live_type() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StartLiveInfo.live_type)
  return _internal_live_type();
}
inline void StartLiveInfo::_internal_set_live_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  live_type_ = value;
}
inline void StartLiveInfo::set_live_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_live_type(value);
  // @@protoc_insertion_point(field_set:streaming_performance.StartLiveInfo.live_type)
}

// int32 live_status = 6;
inline void StartLiveInfo::clear_live_status() {
  live_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartLiveInfo::_internal_live_status() const {
  return live_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartLiveInfo::live_status() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StartLiveInfo.live_status)
  return _internal_live_status();
}
inline void StartLiveInfo::_internal_set_live_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  live_status_ = value;
}
inline void StartLiveInfo::set_live_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_live_status(value);
  // @@protoc_insertion_point(field_set:streaming_performance.StartLiveInfo.live_status)
}

// int64 start_time = 7;
inline void StartLiveInfo::clear_start_time() {
  start_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartLiveInfo::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartLiveInfo::start_time() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StartLiveInfo.start_time)
  return _internal_start_time();
}
inline void StartLiveInfo::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_ = value;
}
inline void StartLiveInfo::set_start_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:streaming_performance.StartLiveInfo.start_time)
}

// int64 end_time = 8;
inline void StartLiveInfo::clear_end_time() {
  end_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartLiveInfo::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StartLiveInfo::end_time() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StartLiveInfo.end_time)
  return _internal_end_time();
}
inline void StartLiveInfo::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_ = value;
}
inline void StartLiveInfo::set_end_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:streaming_performance.StartLiveInfo.end_time)
}

// repeated .streaming_performance.EncodingSettings video_settings = 9;
inline int StartLiveInfo::_internal_video_settings_size() const {
  return video_settings_.size();
}
inline int StartLiveInfo::video_settings_size() const {
  return _internal_video_settings_size();
}
inline void StartLiveInfo::clear_video_settings() {
  video_settings_.Clear();
}
inline ::streaming_performance::EncodingSettings* StartLiveInfo::mutable_video_settings(int index) {
  // @@protoc_insertion_point(field_mutable:streaming_performance.StartLiveInfo.video_settings)
  return video_settings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::EncodingSettings >*
StartLiveInfo::mutable_video_settings() {
  // @@protoc_insertion_point(field_mutable_list:streaming_performance.StartLiveInfo.video_settings)
  return &video_settings_;
}
inline const ::streaming_performance::EncodingSettings& StartLiveInfo::_internal_video_settings(int index) const {
  return video_settings_.Get(index);
}
inline const ::streaming_performance::EncodingSettings& StartLiveInfo::video_settings(int index) const {
  // @@protoc_insertion_point(field_get:streaming_performance.StartLiveInfo.video_settings)
  return _internal_video_settings(index);
}
inline ::streaming_performance::EncodingSettings* StartLiveInfo::_internal_add_video_settings() {
  return video_settings_.Add();
}
inline ::streaming_performance::EncodingSettings* StartLiveInfo::add_video_settings() {
  ::streaming_performance::EncodingSettings* _add = _internal_add_video_settings();
  // @@protoc_insertion_point(field_add:streaming_performance.StartLiveInfo.video_settings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::EncodingSettings >&
StartLiveInfo::video_settings() const {
  // @@protoc_insertion_point(field_list:streaming_performance.StartLiveInfo.video_settings)
  return video_settings_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SourceItem

// int32 source_type = 1;
inline void SourceItem::clear_source_type() {
  source_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SourceItem::_internal_source_type() const {
  return source_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SourceItem::source_type() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SourceItem.source_type)
  return _internal_source_type();
}
inline void SourceItem::_internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_type_ = value;
}
inline void SourceItem::set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:streaming_performance.SourceItem.source_type)
}

// string source_name = 2;
inline void SourceItem::clear_source_name() {
  source_name_.ClearToEmpty();
}
inline const std::string& SourceItem::source_name() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SourceItem.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceItem::set_source_name(ArgT0&& arg0, ArgT... args) {
 
 source_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:streaming_performance.SourceItem.source_name)
}
inline std::string* SourceItem::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:streaming_performance.SourceItem.source_name)
  return _s;
}
inline const std::string& SourceItem::_internal_source_name() const {
  return source_name_.Get();
}
inline void SourceItem::_internal_set_source_name(const std::string& value) {
  
  source_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SourceItem::_internal_mutable_source_name() {
  
  return source_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SourceItem::release_source_name() {
  // @@protoc_insertion_point(field_release:streaming_performance.SourceItem.source_name)
  return source_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SourceItem::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.SourceItem.source_name)
}

// map<string, string> props = 3;
inline int SourceItem::_internal_props_size() const {
  return props_.size();
}
inline int SourceItem::props_size() const {
  return _internal_props_size();
}
inline void SourceItem::clear_props() {
  props_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SourceItem::_internal_props() const {
  return props_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
SourceItem::props() const {
  // @@protoc_insertion_point(field_map:streaming_performance.SourceItem.props)
  return _internal_props();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SourceItem::_internal_mutable_props() {
  return props_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
SourceItem::mutable_props() {
  // @@protoc_insertion_point(field_mutable_map:streaming_performance.SourceItem.props)
  return _internal_mutable_props();
}

// bool visible = 4;
inline void SourceItem::clear_visible() {
  visible_ = false;
}
inline bool SourceItem::_internal_visible() const {
  return visible_;
}
inline bool SourceItem::visible() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SourceItem.visible)
  return _internal_visible();
}
inline void SourceItem::_internal_set_visible(bool value) {
  
  visible_ = value;
}
inline void SourceItem::set_visible(bool value) {
  _internal_set_visible(value);
  // @@protoc_insertion_point(field_set:streaming_performance.SourceItem.visible)
}

// -------------------------------------------------------------------

// SampleData

// int64 timestamp = 1;
inline void SampleData::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SampleData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SampleData::timestamp() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SampleData.timestamp)
  return _internal_timestamp();
}
inline void SampleData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void SampleData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:streaming_performance.SampleData.timestamp)
}

// double data = 2;
inline void SampleData::clear_data() {
  data_ = 0;
}
inline double SampleData::_internal_data() const {
  return data_;
}
inline double SampleData::data() const {
  // @@protoc_insertion_point(field_get:streaming_performance.SampleData.data)
  return _internal_data();
}
inline void SampleData::_internal_set_data(double value) {
  
  data_ = value;
}
inline void SampleData::set_data(double value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:streaming_performance.SampleData.data)
}

// -------------------------------------------------------------------

// BaseStatisticInfo

// repeated .streaming_performance.SampleData samples = 1;
inline int BaseStatisticInfo::_internal_samples_size() const {
  return samples_.size();
}
inline int BaseStatisticInfo::samples_size() const {
  return _internal_samples_size();
}
inline void BaseStatisticInfo::clear_samples() {
  samples_.Clear();
}
inline ::streaming_performance::SampleData* BaseStatisticInfo::mutable_samples(int index) {
  // @@protoc_insertion_point(field_mutable:streaming_performance.BaseStatisticInfo.samples)
  return samples_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SampleData >*
BaseStatisticInfo::mutable_samples() {
  // @@protoc_insertion_point(field_mutable_list:streaming_performance.BaseStatisticInfo.samples)
  return &samples_;
}
inline const ::streaming_performance::SampleData& BaseStatisticInfo::_internal_samples(int index) const {
  return samples_.Get(index);
}
inline const ::streaming_performance::SampleData& BaseStatisticInfo::samples(int index) const {
  // @@protoc_insertion_point(field_get:streaming_performance.BaseStatisticInfo.samples)
  return _internal_samples(index);
}
inline ::streaming_performance::SampleData* BaseStatisticInfo::_internal_add_samples() {
  return samples_.Add();
}
inline ::streaming_performance::SampleData* BaseStatisticInfo::add_samples() {
  ::streaming_performance::SampleData* _add = _internal_add_samples();
  // @@protoc_insertion_point(field_add:streaming_performance.BaseStatisticInfo.samples)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SampleData >&
BaseStatisticInfo::samples() const {
  // @@protoc_insertion_point(field_list:streaming_performance.BaseStatisticInfo.samples)
  return samples_;
}

// -------------------------------------------------------------------

// NetworkDropFrame

// .streaming_performance.BaseStatisticInfo data = 1;
inline bool NetworkDropFrame::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool NetworkDropFrame::has_data() const {
  return _internal_has_data();
}
inline void NetworkDropFrame::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::streaming_performance::BaseStatisticInfo& NetworkDropFrame::_internal_data() const {
  const ::streaming_performance::BaseStatisticInfo* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::BaseStatisticInfo&>(
      ::streaming_performance::_BaseStatisticInfo_default_instance_);
}
inline const ::streaming_performance::BaseStatisticInfo& NetworkDropFrame::data() const {
  // @@protoc_insertion_point(field_get:streaming_performance.NetworkDropFrame.data)
  return _internal_data();
}
inline void NetworkDropFrame::unsafe_arena_set_allocated_data(
    ::streaming_performance::BaseStatisticInfo* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.NetworkDropFrame.data)
}
inline ::streaming_performance::BaseStatisticInfo* NetworkDropFrame::release_data() {
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* NetworkDropFrame::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:streaming_performance.NetworkDropFrame.data)
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* NetworkDropFrame::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::BaseStatisticInfo>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::streaming_performance::BaseStatisticInfo* NetworkDropFrame::mutable_data() {
  ::streaming_performance::BaseStatisticInfo* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:streaming_performance.NetworkDropFrame.data)
  return _msg;
}
inline void NetworkDropFrame::set_allocated_data(::streaming_performance::BaseStatisticInfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::BaseStatisticInfo>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.NetworkDropFrame.data)
}

// -------------------------------------------------------------------

// RenderDropFrame

// .streaming_performance.BaseStatisticInfo data = 1;
inline bool RenderDropFrame::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RenderDropFrame::has_data() const {
  return _internal_has_data();
}
inline void RenderDropFrame::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::streaming_performance::BaseStatisticInfo& RenderDropFrame::_internal_data() const {
  const ::streaming_performance::BaseStatisticInfo* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::BaseStatisticInfo&>(
      ::streaming_performance::_BaseStatisticInfo_default_instance_);
}
inline const ::streaming_performance::BaseStatisticInfo& RenderDropFrame::data() const {
  // @@protoc_insertion_point(field_get:streaming_performance.RenderDropFrame.data)
  return _internal_data();
}
inline void RenderDropFrame::unsafe_arena_set_allocated_data(
    ::streaming_performance::BaseStatisticInfo* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.RenderDropFrame.data)
}
inline ::streaming_performance::BaseStatisticInfo* RenderDropFrame::release_data() {
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* RenderDropFrame::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:streaming_performance.RenderDropFrame.data)
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* RenderDropFrame::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::BaseStatisticInfo>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::streaming_performance::BaseStatisticInfo* RenderDropFrame::mutable_data() {
  ::streaming_performance::BaseStatisticInfo* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:streaming_performance.RenderDropFrame.data)
  return _msg;
}
inline void RenderDropFrame::set_allocated_data(::streaming_performance::BaseStatisticInfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::BaseStatisticInfo>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.RenderDropFrame.data)
}

// -------------------------------------------------------------------

// EncodeDropFrame

// .streaming_performance.BaseStatisticInfo data = 1;
inline bool EncodeDropFrame::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool EncodeDropFrame::has_data() const {
  return _internal_has_data();
}
inline void EncodeDropFrame::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::streaming_performance::BaseStatisticInfo& EncodeDropFrame::_internal_data() const {
  const ::streaming_performance::BaseStatisticInfo* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::BaseStatisticInfo&>(
      ::streaming_performance::_BaseStatisticInfo_default_instance_);
}
inline const ::streaming_performance::BaseStatisticInfo& EncodeDropFrame::data() const {
  // @@protoc_insertion_point(field_get:streaming_performance.EncodeDropFrame.data)
  return _internal_data();
}
inline void EncodeDropFrame::unsafe_arena_set_allocated_data(
    ::streaming_performance::BaseStatisticInfo* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.EncodeDropFrame.data)
}
inline ::streaming_performance::BaseStatisticInfo* EncodeDropFrame::release_data() {
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* EncodeDropFrame::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:streaming_performance.EncodeDropFrame.data)
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* EncodeDropFrame::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::BaseStatisticInfo>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::streaming_performance::BaseStatisticInfo* EncodeDropFrame::mutable_data() {
  ::streaming_performance::BaseStatisticInfo* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:streaming_performance.EncodeDropFrame.data)
  return _msg;
}
inline void EncodeDropFrame::set_allocated_data(::streaming_performance::BaseStatisticInfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::BaseStatisticInfo>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.EncodeDropFrame.data)
}

// -------------------------------------------------------------------

// GpuUsage

// .streaming_performance.BaseStatisticInfo data = 1;
inline bool GpuUsage::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GpuUsage::has_data() const {
  return _internal_has_data();
}
inline void GpuUsage::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::streaming_performance::BaseStatisticInfo& GpuUsage::_internal_data() const {
  const ::streaming_performance::BaseStatisticInfo* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::BaseStatisticInfo&>(
      ::streaming_performance::_BaseStatisticInfo_default_instance_);
}
inline const ::streaming_performance::BaseStatisticInfo& GpuUsage::data() const {
  // @@protoc_insertion_point(field_get:streaming_performance.GpuUsage.data)
  return _internal_data();
}
inline void GpuUsage::unsafe_arena_set_allocated_data(
    ::streaming_performance::BaseStatisticInfo* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.GpuUsage.data)
}
inline ::streaming_performance::BaseStatisticInfo* GpuUsage::release_data() {
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* GpuUsage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:streaming_performance.GpuUsage.data)
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* GpuUsage::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::BaseStatisticInfo>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::streaming_performance::BaseStatisticInfo* GpuUsage::mutable_data() {
  ::streaming_performance::BaseStatisticInfo* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:streaming_performance.GpuUsage.data)
  return _msg;
}
inline void GpuUsage::set_allocated_data(::streaming_performance::BaseStatisticInfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::BaseStatisticInfo>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.GpuUsage.data)
}

// -------------------------------------------------------------------

// CpuUsage

// .streaming_performance.BaseStatisticInfo data = 1;
inline bool CpuUsage::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool CpuUsage::has_data() const {
  return _internal_has_data();
}
inline void CpuUsage::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::streaming_performance::BaseStatisticInfo& CpuUsage::_internal_data() const {
  const ::streaming_performance::BaseStatisticInfo* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::BaseStatisticInfo&>(
      ::streaming_performance::_BaseStatisticInfo_default_instance_);
}
inline const ::streaming_performance::BaseStatisticInfo& CpuUsage::data() const {
  // @@protoc_insertion_point(field_get:streaming_performance.CpuUsage.data)
  return _internal_data();
}
inline void CpuUsage::unsafe_arena_set_allocated_data(
    ::streaming_performance::BaseStatisticInfo* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.CpuUsage.data)
}
inline ::streaming_performance::BaseStatisticInfo* CpuUsage::release_data() {
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* CpuUsage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:streaming_performance.CpuUsage.data)
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* CpuUsage::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::BaseStatisticInfo>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::streaming_performance::BaseStatisticInfo* CpuUsage::mutable_data() {
  ::streaming_performance::BaseStatisticInfo* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:streaming_performance.CpuUsage.data)
  return _msg;
}
inline void CpuUsage::set_allocated_data(::streaming_performance::BaseStatisticInfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::BaseStatisticInfo>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.CpuUsage.data)
}

// -------------------------------------------------------------------

// MemoryUsage

// .streaming_performance.BaseStatisticInfo data = 1;
inline bool MemoryUsage::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool MemoryUsage::has_data() const {
  return _internal_has_data();
}
inline void MemoryUsage::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::streaming_performance::BaseStatisticInfo& MemoryUsage::_internal_data() const {
  const ::streaming_performance::BaseStatisticInfo* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::BaseStatisticInfo&>(
      ::streaming_performance::_BaseStatisticInfo_default_instance_);
}
inline const ::streaming_performance::BaseStatisticInfo& MemoryUsage::data() const {
  // @@protoc_insertion_point(field_get:streaming_performance.MemoryUsage.data)
  return _internal_data();
}
inline void MemoryUsage::unsafe_arena_set_allocated_data(
    ::streaming_performance::BaseStatisticInfo* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.MemoryUsage.data)
}
inline ::streaming_performance::BaseStatisticInfo* MemoryUsage::release_data() {
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* MemoryUsage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:streaming_performance.MemoryUsage.data)
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* MemoryUsage::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::BaseStatisticInfo>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::streaming_performance::BaseStatisticInfo* MemoryUsage::mutable_data() {
  ::streaming_performance::BaseStatisticInfo* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:streaming_performance.MemoryUsage.data)
  return _msg;
}
inline void MemoryUsage::set_allocated_data(::streaming_performance::BaseStatisticInfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::BaseStatisticInfo>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.MemoryUsage.data)
}

// -------------------------------------------------------------------

// ProcessCpuUsage

// .streaming_performance.BaseStatisticInfo data = 1;
inline bool ProcessCpuUsage::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ProcessCpuUsage::has_data() const {
  return _internal_has_data();
}
inline void ProcessCpuUsage::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::streaming_performance::BaseStatisticInfo& ProcessCpuUsage::_internal_data() const {
  const ::streaming_performance::BaseStatisticInfo* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::BaseStatisticInfo&>(
      ::streaming_performance::_BaseStatisticInfo_default_instance_);
}
inline const ::streaming_performance::BaseStatisticInfo& ProcessCpuUsage::data() const {
  // @@protoc_insertion_point(field_get:streaming_performance.ProcessCpuUsage.data)
  return _internal_data();
}
inline void ProcessCpuUsage::unsafe_arena_set_allocated_data(
    ::streaming_performance::BaseStatisticInfo* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.ProcessCpuUsage.data)
}
inline ::streaming_performance::BaseStatisticInfo* ProcessCpuUsage::release_data() {
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* ProcessCpuUsage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:streaming_performance.ProcessCpuUsage.data)
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* ProcessCpuUsage::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::BaseStatisticInfo>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::streaming_performance::BaseStatisticInfo* ProcessCpuUsage::mutable_data() {
  ::streaming_performance::BaseStatisticInfo* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:streaming_performance.ProcessCpuUsage.data)
  return _msg;
}
inline void ProcessCpuUsage::set_allocated_data(::streaming_performance::BaseStatisticInfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::BaseStatisticInfo>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.ProcessCpuUsage.data)
}

// -------------------------------------------------------------------

// ProcessMemoryUsage

// .streaming_performance.BaseStatisticInfo data = 1;
inline bool ProcessMemoryUsage::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ProcessMemoryUsage::has_data() const {
  return _internal_has_data();
}
inline void ProcessMemoryUsage::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::streaming_performance::BaseStatisticInfo& ProcessMemoryUsage::_internal_data() const {
  const ::streaming_performance::BaseStatisticInfo* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::BaseStatisticInfo&>(
      ::streaming_performance::_BaseStatisticInfo_default_instance_);
}
inline const ::streaming_performance::BaseStatisticInfo& ProcessMemoryUsage::data() const {
  // @@protoc_insertion_point(field_get:streaming_performance.ProcessMemoryUsage.data)
  return _internal_data();
}
inline void ProcessMemoryUsage::unsafe_arena_set_allocated_data(
    ::streaming_performance::BaseStatisticInfo* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.ProcessMemoryUsage.data)
}
inline ::streaming_performance::BaseStatisticInfo* ProcessMemoryUsage::release_data() {
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* ProcessMemoryUsage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:streaming_performance.ProcessMemoryUsage.data)
  
  ::streaming_performance::BaseStatisticInfo* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::streaming_performance::BaseStatisticInfo* ProcessMemoryUsage::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::BaseStatisticInfo>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::streaming_performance::BaseStatisticInfo* ProcessMemoryUsage::mutable_data() {
  ::streaming_performance::BaseStatisticInfo* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:streaming_performance.ProcessMemoryUsage.data)
  return _msg;
}
inline void ProcessMemoryUsage::set_allocated_data(::streaming_performance::BaseStatisticInfo* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::BaseStatisticInfo>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.ProcessMemoryUsage.data)
}

// -------------------------------------------------------------------

// StatisticsSet

// .streaming_performance.NetworkDropFrame ndf = 1;
inline bool StatisticsSet::_internal_has_ndf() const {
  return this != internal_default_instance() && ndf_ != nullptr;
}
inline bool StatisticsSet::has_ndf() const {
  return _internal_has_ndf();
}
inline void StatisticsSet::clear_ndf() {
  if (GetArenaForAllocation() == nullptr && ndf_ != nullptr) {
    delete ndf_;
  }
  ndf_ = nullptr;
}
inline const ::streaming_performance::NetworkDropFrame& StatisticsSet::_internal_ndf() const {
  const ::streaming_performance::NetworkDropFrame* p = ndf_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::NetworkDropFrame&>(
      ::streaming_performance::_NetworkDropFrame_default_instance_);
}
inline const ::streaming_performance::NetworkDropFrame& StatisticsSet::ndf() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StatisticsSet.ndf)
  return _internal_ndf();
}
inline void StatisticsSet::unsafe_arena_set_allocated_ndf(
    ::streaming_performance::NetworkDropFrame* ndf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ndf_);
  }
  ndf_ = ndf;
  if (ndf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.StatisticsSet.ndf)
}
inline ::streaming_performance::NetworkDropFrame* StatisticsSet::release_ndf() {
  
  ::streaming_performance::NetworkDropFrame* temp = ndf_;
  ndf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::NetworkDropFrame* StatisticsSet::unsafe_arena_release_ndf() {
  // @@protoc_insertion_point(field_release:streaming_performance.StatisticsSet.ndf)
  
  ::streaming_performance::NetworkDropFrame* temp = ndf_;
  ndf_ = nullptr;
  return temp;
}
inline ::streaming_performance::NetworkDropFrame* StatisticsSet::_internal_mutable_ndf() {
  
  if (ndf_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::NetworkDropFrame>(GetArenaForAllocation());
    ndf_ = p;
  }
  return ndf_;
}
inline ::streaming_performance::NetworkDropFrame* StatisticsSet::mutable_ndf() {
  ::streaming_performance::NetworkDropFrame* _msg = _internal_mutable_ndf();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StatisticsSet.ndf)
  return _msg;
}
inline void StatisticsSet::set_allocated_ndf(::streaming_performance::NetworkDropFrame* ndf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ndf_;
  }
  if (ndf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::NetworkDropFrame>::GetOwningArena(ndf);
    if (message_arena != submessage_arena) {
      ndf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ndf, submessage_arena);
    }
    
  } else {
    
  }
  ndf_ = ndf;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StatisticsSet.ndf)
}

// .streaming_performance.RenderDropFrame rdf = 2;
inline bool StatisticsSet::_internal_has_rdf() const {
  return this != internal_default_instance() && rdf_ != nullptr;
}
inline bool StatisticsSet::has_rdf() const {
  return _internal_has_rdf();
}
inline void StatisticsSet::clear_rdf() {
  if (GetArenaForAllocation() == nullptr && rdf_ != nullptr) {
    delete rdf_;
  }
  rdf_ = nullptr;
}
inline const ::streaming_performance::RenderDropFrame& StatisticsSet::_internal_rdf() const {
  const ::streaming_performance::RenderDropFrame* p = rdf_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::RenderDropFrame&>(
      ::streaming_performance::_RenderDropFrame_default_instance_);
}
inline const ::streaming_performance::RenderDropFrame& StatisticsSet::rdf() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StatisticsSet.rdf)
  return _internal_rdf();
}
inline void StatisticsSet::unsafe_arena_set_allocated_rdf(
    ::streaming_performance::RenderDropFrame* rdf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rdf_);
  }
  rdf_ = rdf;
  if (rdf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.StatisticsSet.rdf)
}
inline ::streaming_performance::RenderDropFrame* StatisticsSet::release_rdf() {
  
  ::streaming_performance::RenderDropFrame* temp = rdf_;
  rdf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::RenderDropFrame* StatisticsSet::unsafe_arena_release_rdf() {
  // @@protoc_insertion_point(field_release:streaming_performance.StatisticsSet.rdf)
  
  ::streaming_performance::RenderDropFrame* temp = rdf_;
  rdf_ = nullptr;
  return temp;
}
inline ::streaming_performance::RenderDropFrame* StatisticsSet::_internal_mutable_rdf() {
  
  if (rdf_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::RenderDropFrame>(GetArenaForAllocation());
    rdf_ = p;
  }
  return rdf_;
}
inline ::streaming_performance::RenderDropFrame* StatisticsSet::mutable_rdf() {
  ::streaming_performance::RenderDropFrame* _msg = _internal_mutable_rdf();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StatisticsSet.rdf)
  return _msg;
}
inline void StatisticsSet::set_allocated_rdf(::streaming_performance::RenderDropFrame* rdf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete rdf_;
  }
  if (rdf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::RenderDropFrame>::GetOwningArena(rdf);
    if (message_arena != submessage_arena) {
      rdf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rdf, submessage_arena);
    }
    
  } else {
    
  }
  rdf_ = rdf;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StatisticsSet.rdf)
}

// .streaming_performance.EncodeDropFrame edf = 3;
inline bool StatisticsSet::_internal_has_edf() const {
  return this != internal_default_instance() && edf_ != nullptr;
}
inline bool StatisticsSet::has_edf() const {
  return _internal_has_edf();
}
inline void StatisticsSet::clear_edf() {
  if (GetArenaForAllocation() == nullptr && edf_ != nullptr) {
    delete edf_;
  }
  edf_ = nullptr;
}
inline const ::streaming_performance::EncodeDropFrame& StatisticsSet::_internal_edf() const {
  const ::streaming_performance::EncodeDropFrame* p = edf_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::EncodeDropFrame&>(
      ::streaming_performance::_EncodeDropFrame_default_instance_);
}
inline const ::streaming_performance::EncodeDropFrame& StatisticsSet::edf() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StatisticsSet.edf)
  return _internal_edf();
}
inline void StatisticsSet::unsafe_arena_set_allocated_edf(
    ::streaming_performance::EncodeDropFrame* edf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edf_);
  }
  edf_ = edf;
  if (edf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.StatisticsSet.edf)
}
inline ::streaming_performance::EncodeDropFrame* StatisticsSet::release_edf() {
  
  ::streaming_performance::EncodeDropFrame* temp = edf_;
  edf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::EncodeDropFrame* StatisticsSet::unsafe_arena_release_edf() {
  // @@protoc_insertion_point(field_release:streaming_performance.StatisticsSet.edf)
  
  ::streaming_performance::EncodeDropFrame* temp = edf_;
  edf_ = nullptr;
  return temp;
}
inline ::streaming_performance::EncodeDropFrame* StatisticsSet::_internal_mutable_edf() {
  
  if (edf_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::EncodeDropFrame>(GetArenaForAllocation());
    edf_ = p;
  }
  return edf_;
}
inline ::streaming_performance::EncodeDropFrame* StatisticsSet::mutable_edf() {
  ::streaming_performance::EncodeDropFrame* _msg = _internal_mutable_edf();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StatisticsSet.edf)
  return _msg;
}
inline void StatisticsSet::set_allocated_edf(::streaming_performance::EncodeDropFrame* edf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete edf_;
  }
  if (edf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::EncodeDropFrame>::GetOwningArena(edf);
    if (message_arena != submessage_arena) {
      edf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edf, submessage_arena);
    }
    
  } else {
    
  }
  edf_ = edf;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StatisticsSet.edf)
}

// .streaming_performance.GpuUsage gpu = 4;
inline bool StatisticsSet::_internal_has_gpu() const {
  return this != internal_default_instance() && gpu_ != nullptr;
}
inline bool StatisticsSet::has_gpu() const {
  return _internal_has_gpu();
}
inline void StatisticsSet::clear_gpu() {
  if (GetArenaForAllocation() == nullptr && gpu_ != nullptr) {
    delete gpu_;
  }
  gpu_ = nullptr;
}
inline const ::streaming_performance::GpuUsage& StatisticsSet::_internal_gpu() const {
  const ::streaming_performance::GpuUsage* p = gpu_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::GpuUsage&>(
      ::streaming_performance::_GpuUsage_default_instance_);
}
inline const ::streaming_performance::GpuUsage& StatisticsSet::gpu() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StatisticsSet.gpu)
  return _internal_gpu();
}
inline void StatisticsSet::unsafe_arena_set_allocated_gpu(
    ::streaming_performance::GpuUsage* gpu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gpu_);
  }
  gpu_ = gpu;
  if (gpu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.StatisticsSet.gpu)
}
inline ::streaming_performance::GpuUsage* StatisticsSet::release_gpu() {
  
  ::streaming_performance::GpuUsage* temp = gpu_;
  gpu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::GpuUsage* StatisticsSet::unsafe_arena_release_gpu() {
  // @@protoc_insertion_point(field_release:streaming_performance.StatisticsSet.gpu)
  
  ::streaming_performance::GpuUsage* temp = gpu_;
  gpu_ = nullptr;
  return temp;
}
inline ::streaming_performance::GpuUsage* StatisticsSet::_internal_mutable_gpu() {
  
  if (gpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::GpuUsage>(GetArenaForAllocation());
    gpu_ = p;
  }
  return gpu_;
}
inline ::streaming_performance::GpuUsage* StatisticsSet::mutable_gpu() {
  ::streaming_performance::GpuUsage* _msg = _internal_mutable_gpu();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StatisticsSet.gpu)
  return _msg;
}
inline void StatisticsSet::set_allocated_gpu(::streaming_performance::GpuUsage* gpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gpu_;
  }
  if (gpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::GpuUsage>::GetOwningArena(gpu);
    if (message_arena != submessage_arena) {
      gpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpu, submessage_arena);
    }
    
  } else {
    
  }
  gpu_ = gpu;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StatisticsSet.gpu)
}

// .streaming_performance.CpuUsage cpu = 5;
inline bool StatisticsSet::_internal_has_cpu() const {
  return this != internal_default_instance() && cpu_ != nullptr;
}
inline bool StatisticsSet::has_cpu() const {
  return _internal_has_cpu();
}
inline void StatisticsSet::clear_cpu() {
  if (GetArenaForAllocation() == nullptr && cpu_ != nullptr) {
    delete cpu_;
  }
  cpu_ = nullptr;
}
inline const ::streaming_performance::CpuUsage& StatisticsSet::_internal_cpu() const {
  const ::streaming_performance::CpuUsage* p = cpu_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::CpuUsage&>(
      ::streaming_performance::_CpuUsage_default_instance_);
}
inline const ::streaming_performance::CpuUsage& StatisticsSet::cpu() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StatisticsSet.cpu)
  return _internal_cpu();
}
inline void StatisticsSet::unsafe_arena_set_allocated_cpu(
    ::streaming_performance::CpuUsage* cpu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cpu_);
  }
  cpu_ = cpu;
  if (cpu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.StatisticsSet.cpu)
}
inline ::streaming_performance::CpuUsage* StatisticsSet::release_cpu() {
  
  ::streaming_performance::CpuUsage* temp = cpu_;
  cpu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::CpuUsage* StatisticsSet::unsafe_arena_release_cpu() {
  // @@protoc_insertion_point(field_release:streaming_performance.StatisticsSet.cpu)
  
  ::streaming_performance::CpuUsage* temp = cpu_;
  cpu_ = nullptr;
  return temp;
}
inline ::streaming_performance::CpuUsage* StatisticsSet::_internal_mutable_cpu() {
  
  if (cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::CpuUsage>(GetArenaForAllocation());
    cpu_ = p;
  }
  return cpu_;
}
inline ::streaming_performance::CpuUsage* StatisticsSet::mutable_cpu() {
  ::streaming_performance::CpuUsage* _msg = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StatisticsSet.cpu)
  return _msg;
}
inline void StatisticsSet::set_allocated_cpu(::streaming_performance::CpuUsage* cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cpu_;
  }
  if (cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::CpuUsage>::GetOwningArena(cpu);
    if (message_arena != submessage_arena) {
      cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    
  } else {
    
  }
  cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StatisticsSet.cpu)
}

// .streaming_performance.MemoryUsage mem = 6;
inline bool StatisticsSet::_internal_has_mem() const {
  return this != internal_default_instance() && mem_ != nullptr;
}
inline bool StatisticsSet::has_mem() const {
  return _internal_has_mem();
}
inline void StatisticsSet::clear_mem() {
  if (GetArenaForAllocation() == nullptr && mem_ != nullptr) {
    delete mem_;
  }
  mem_ = nullptr;
}
inline const ::streaming_performance::MemoryUsage& StatisticsSet::_internal_mem() const {
  const ::streaming_performance::MemoryUsage* p = mem_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::MemoryUsage&>(
      ::streaming_performance::_MemoryUsage_default_instance_);
}
inline const ::streaming_performance::MemoryUsage& StatisticsSet::mem() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StatisticsSet.mem)
  return _internal_mem();
}
inline void StatisticsSet::unsafe_arena_set_allocated_mem(
    ::streaming_performance::MemoryUsage* mem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mem_);
  }
  mem_ = mem;
  if (mem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.StatisticsSet.mem)
}
inline ::streaming_performance::MemoryUsage* StatisticsSet::release_mem() {
  
  ::streaming_performance::MemoryUsage* temp = mem_;
  mem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::MemoryUsage* StatisticsSet::unsafe_arena_release_mem() {
  // @@protoc_insertion_point(field_release:streaming_performance.StatisticsSet.mem)
  
  ::streaming_performance::MemoryUsage* temp = mem_;
  mem_ = nullptr;
  return temp;
}
inline ::streaming_performance::MemoryUsage* StatisticsSet::_internal_mutable_mem() {
  
  if (mem_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::MemoryUsage>(GetArenaForAllocation());
    mem_ = p;
  }
  return mem_;
}
inline ::streaming_performance::MemoryUsage* StatisticsSet::mutable_mem() {
  ::streaming_performance::MemoryUsage* _msg = _internal_mutable_mem();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StatisticsSet.mem)
  return _msg;
}
inline void StatisticsSet::set_allocated_mem(::streaming_performance::MemoryUsage* mem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mem_;
  }
  if (mem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::MemoryUsage>::GetOwningArena(mem);
    if (message_arena != submessage_arena) {
      mem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem, submessage_arena);
    }
    
  } else {
    
  }
  mem_ = mem;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StatisticsSet.mem)
}

// .streaming_performance.ProcessCpuUsage p_cpu = 7;
inline bool StatisticsSet::_internal_has_p_cpu() const {
  return this != internal_default_instance() && p_cpu_ != nullptr;
}
inline bool StatisticsSet::has_p_cpu() const {
  return _internal_has_p_cpu();
}
inline void StatisticsSet::clear_p_cpu() {
  if (GetArenaForAllocation() == nullptr && p_cpu_ != nullptr) {
    delete p_cpu_;
  }
  p_cpu_ = nullptr;
}
inline const ::streaming_performance::ProcessCpuUsage& StatisticsSet::_internal_p_cpu() const {
  const ::streaming_performance::ProcessCpuUsage* p = p_cpu_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::ProcessCpuUsage&>(
      ::streaming_performance::_ProcessCpuUsage_default_instance_);
}
inline const ::streaming_performance::ProcessCpuUsage& StatisticsSet::p_cpu() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StatisticsSet.p_cpu)
  return _internal_p_cpu();
}
inline void StatisticsSet::unsafe_arena_set_allocated_p_cpu(
    ::streaming_performance::ProcessCpuUsage* p_cpu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p_cpu_);
  }
  p_cpu_ = p_cpu;
  if (p_cpu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.StatisticsSet.p_cpu)
}
inline ::streaming_performance::ProcessCpuUsage* StatisticsSet::release_p_cpu() {
  
  ::streaming_performance::ProcessCpuUsage* temp = p_cpu_;
  p_cpu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::ProcessCpuUsage* StatisticsSet::unsafe_arena_release_p_cpu() {
  // @@protoc_insertion_point(field_release:streaming_performance.StatisticsSet.p_cpu)
  
  ::streaming_performance::ProcessCpuUsage* temp = p_cpu_;
  p_cpu_ = nullptr;
  return temp;
}
inline ::streaming_performance::ProcessCpuUsage* StatisticsSet::_internal_mutable_p_cpu() {
  
  if (p_cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::ProcessCpuUsage>(GetArenaForAllocation());
    p_cpu_ = p;
  }
  return p_cpu_;
}
inline ::streaming_performance::ProcessCpuUsage* StatisticsSet::mutable_p_cpu() {
  ::streaming_performance::ProcessCpuUsage* _msg = _internal_mutable_p_cpu();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StatisticsSet.p_cpu)
  return _msg;
}
inline void StatisticsSet::set_allocated_p_cpu(::streaming_performance::ProcessCpuUsage* p_cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete p_cpu_;
  }
  if (p_cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::ProcessCpuUsage>::GetOwningArena(p_cpu);
    if (message_arena != submessage_arena) {
      p_cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p_cpu, submessage_arena);
    }
    
  } else {
    
  }
  p_cpu_ = p_cpu;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StatisticsSet.p_cpu)
}

// .streaming_performance.ProcessMemoryUsage p_mem = 8;
inline bool StatisticsSet::_internal_has_p_mem() const {
  return this != internal_default_instance() && p_mem_ != nullptr;
}
inline bool StatisticsSet::has_p_mem() const {
  return _internal_has_p_mem();
}
inline void StatisticsSet::clear_p_mem() {
  if (GetArenaForAllocation() == nullptr && p_mem_ != nullptr) {
    delete p_mem_;
  }
  p_mem_ = nullptr;
}
inline const ::streaming_performance::ProcessMemoryUsage& StatisticsSet::_internal_p_mem() const {
  const ::streaming_performance::ProcessMemoryUsage* p = p_mem_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::ProcessMemoryUsage&>(
      ::streaming_performance::_ProcessMemoryUsage_default_instance_);
}
inline const ::streaming_performance::ProcessMemoryUsage& StatisticsSet::p_mem() const {
  // @@protoc_insertion_point(field_get:streaming_performance.StatisticsSet.p_mem)
  return _internal_p_mem();
}
inline void StatisticsSet::unsafe_arena_set_allocated_p_mem(
    ::streaming_performance::ProcessMemoryUsage* p_mem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p_mem_);
  }
  p_mem_ = p_mem;
  if (p_mem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.StatisticsSet.p_mem)
}
inline ::streaming_performance::ProcessMemoryUsage* StatisticsSet::release_p_mem() {
  
  ::streaming_performance::ProcessMemoryUsage* temp = p_mem_;
  p_mem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::ProcessMemoryUsage* StatisticsSet::unsafe_arena_release_p_mem() {
  // @@protoc_insertion_point(field_release:streaming_performance.StatisticsSet.p_mem)
  
  ::streaming_performance::ProcessMemoryUsage* temp = p_mem_;
  p_mem_ = nullptr;
  return temp;
}
inline ::streaming_performance::ProcessMemoryUsage* StatisticsSet::_internal_mutable_p_mem() {
  
  if (p_mem_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::ProcessMemoryUsage>(GetArenaForAllocation());
    p_mem_ = p;
  }
  return p_mem_;
}
inline ::streaming_performance::ProcessMemoryUsage* StatisticsSet::mutable_p_mem() {
  ::streaming_performance::ProcessMemoryUsage* _msg = _internal_mutable_p_mem();
  // @@protoc_insertion_point(field_mutable:streaming_performance.StatisticsSet.p_mem)
  return _msg;
}
inline void StatisticsSet::set_allocated_p_mem(::streaming_performance::ProcessMemoryUsage* p_mem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete p_mem_;
  }
  if (p_mem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::ProcessMemoryUsage>::GetOwningArena(p_mem);
    if (message_arena != submessage_arena) {
      p_mem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p_mem, submessage_arena);
    }
    
  } else {
    
  }
  p_mem_ = p_mem;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.StatisticsSet.p_mem)
}

// -------------------------------------------------------------------

// PerformanceReport

// int32 logver = 1;
inline void PerformanceReport::clear_logver() {
  logver_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformanceReport::_internal_logver() const {
  return logver_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformanceReport::logver() const {
  // @@protoc_insertion_point(field_get:streaming_performance.PerformanceReport.logver)
  return _internal_logver();
}
inline void PerformanceReport::_internal_set_logver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logver_ = value;
}
inline void PerformanceReport::set_logver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logver(value);
  // @@protoc_insertion_point(field_set:streaming_performance.PerformanceReport.logver)
}

// int32 sampling = 2;
inline void PerformanceReport::clear_sampling() {
  sampling_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformanceReport::_internal_sampling() const {
  return sampling_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PerformanceReport::sampling() const {
  // @@protoc_insertion_point(field_get:streaming_performance.PerformanceReport.sampling)
  return _internal_sampling();
}
inline void PerformanceReport::_internal_set_sampling(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sampling_ = value;
}
inline void PerformanceReport::set_sampling(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sampling(value);
  // @@protoc_insertion_point(field_set:streaming_performance.PerformanceReport.sampling)
}

// .streaming_performance.AppInfo app_info = 3;
inline bool PerformanceReport::_internal_has_app_info() const {
  return this != internal_default_instance() && app_info_ != nullptr;
}
inline bool PerformanceReport::has_app_info() const {
  return _internal_has_app_info();
}
inline void PerformanceReport::clear_app_info() {
  if (GetArenaForAllocation() == nullptr && app_info_ != nullptr) {
    delete app_info_;
  }
  app_info_ = nullptr;
}
inline const ::streaming_performance::AppInfo& PerformanceReport::_internal_app_info() const {
  const ::streaming_performance::AppInfo* p = app_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::AppInfo&>(
      ::streaming_performance::_AppInfo_default_instance_);
}
inline const ::streaming_performance::AppInfo& PerformanceReport::app_info() const {
  // @@protoc_insertion_point(field_get:streaming_performance.PerformanceReport.app_info)
  return _internal_app_info();
}
inline void PerformanceReport::unsafe_arena_set_allocated_app_info(
    ::streaming_performance::AppInfo* app_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_info_);
  }
  app_info_ = app_info;
  if (app_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.PerformanceReport.app_info)
}
inline ::streaming_performance::AppInfo* PerformanceReport::release_app_info() {
  
  ::streaming_performance::AppInfo* temp = app_info_;
  app_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::AppInfo* PerformanceReport::unsafe_arena_release_app_info() {
  // @@protoc_insertion_point(field_release:streaming_performance.PerformanceReport.app_info)
  
  ::streaming_performance::AppInfo* temp = app_info_;
  app_info_ = nullptr;
  return temp;
}
inline ::streaming_performance::AppInfo* PerformanceReport::_internal_mutable_app_info() {
  
  if (app_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::AppInfo>(GetArenaForAllocation());
    app_info_ = p;
  }
  return app_info_;
}
inline ::streaming_performance::AppInfo* PerformanceReport::mutable_app_info() {
  ::streaming_performance::AppInfo* _msg = _internal_mutable_app_info();
  // @@protoc_insertion_point(field_mutable:streaming_performance.PerformanceReport.app_info)
  return _msg;
}
inline void PerformanceReport::set_allocated_app_info(::streaming_performance::AppInfo* app_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_info_;
  }
  if (app_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::AppInfo>::GetOwningArena(app_info);
    if (message_arena != submessage_arena) {
      app_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_info, submessage_arena);
    }
    
  } else {
    
  }
  app_info_ = app_info;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.PerformanceReport.app_info)
}

// .streaming_performance.StartLiveInfo runtime_info = 4;
inline bool PerformanceReport::_internal_has_runtime_info() const {
  return this != internal_default_instance() && runtime_info_ != nullptr;
}
inline bool PerformanceReport::has_runtime_info() const {
  return _internal_has_runtime_info();
}
inline void PerformanceReport::clear_runtime_info() {
  if (GetArenaForAllocation() == nullptr && runtime_info_ != nullptr) {
    delete runtime_info_;
  }
  runtime_info_ = nullptr;
}
inline const ::streaming_performance::StartLiveInfo& PerformanceReport::_internal_runtime_info() const {
  const ::streaming_performance::StartLiveInfo* p = runtime_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::StartLiveInfo&>(
      ::streaming_performance::_StartLiveInfo_default_instance_);
}
inline const ::streaming_performance::StartLiveInfo& PerformanceReport::runtime_info() const {
  // @@protoc_insertion_point(field_get:streaming_performance.PerformanceReport.runtime_info)
  return _internal_runtime_info();
}
inline void PerformanceReport::unsafe_arena_set_allocated_runtime_info(
    ::streaming_performance::StartLiveInfo* runtime_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_info_);
  }
  runtime_info_ = runtime_info;
  if (runtime_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.PerformanceReport.runtime_info)
}
inline ::streaming_performance::StartLiveInfo* PerformanceReport::release_runtime_info() {
  
  ::streaming_performance::StartLiveInfo* temp = runtime_info_;
  runtime_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::StartLiveInfo* PerformanceReport::unsafe_arena_release_runtime_info() {
  // @@protoc_insertion_point(field_release:streaming_performance.PerformanceReport.runtime_info)
  
  ::streaming_performance::StartLiveInfo* temp = runtime_info_;
  runtime_info_ = nullptr;
  return temp;
}
inline ::streaming_performance::StartLiveInfo* PerformanceReport::_internal_mutable_runtime_info() {
  
  if (runtime_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::StartLiveInfo>(GetArenaForAllocation());
    runtime_info_ = p;
  }
  return runtime_info_;
}
inline ::streaming_performance::StartLiveInfo* PerformanceReport::mutable_runtime_info() {
  ::streaming_performance::StartLiveInfo* _msg = _internal_mutable_runtime_info();
  // @@protoc_insertion_point(field_mutable:streaming_performance.PerformanceReport.runtime_info)
  return _msg;
}
inline void PerformanceReport::set_allocated_runtime_info(::streaming_performance::StartLiveInfo* runtime_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete runtime_info_;
  }
  if (runtime_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::StartLiveInfo>::GetOwningArena(runtime_info);
    if (message_arena != submessage_arena) {
      runtime_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_info, submessage_arena);
    }
    
  } else {
    
  }
  runtime_info_ = runtime_info;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.PerformanceReport.runtime_info)
}

// .streaming_performance.StatisticsSet statistics = 5;
inline bool PerformanceReport::_internal_has_statistics() const {
  return this != internal_default_instance() && statistics_ != nullptr;
}
inline bool PerformanceReport::has_statistics() const {
  return _internal_has_statistics();
}
inline void PerformanceReport::clear_statistics() {
  if (GetArenaForAllocation() == nullptr && statistics_ != nullptr) {
    delete statistics_;
  }
  statistics_ = nullptr;
}
inline const ::streaming_performance::StatisticsSet& PerformanceReport::_internal_statistics() const {
  const ::streaming_performance::StatisticsSet* p = statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::streaming_performance::StatisticsSet&>(
      ::streaming_performance::_StatisticsSet_default_instance_);
}
inline const ::streaming_performance::StatisticsSet& PerformanceReport::statistics() const {
  // @@protoc_insertion_point(field_get:streaming_performance.PerformanceReport.statistics)
  return _internal_statistics();
}
inline void PerformanceReport::unsafe_arena_set_allocated_statistics(
    ::streaming_performance::StatisticsSet* statistics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statistics_);
  }
  statistics_ = statistics;
  if (statistics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:streaming_performance.PerformanceReport.statistics)
}
inline ::streaming_performance::StatisticsSet* PerformanceReport::release_statistics() {
  
  ::streaming_performance::StatisticsSet* temp = statistics_;
  statistics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::streaming_performance::StatisticsSet* PerformanceReport::unsafe_arena_release_statistics() {
  // @@protoc_insertion_point(field_release:streaming_performance.PerformanceReport.statistics)
  
  ::streaming_performance::StatisticsSet* temp = statistics_;
  statistics_ = nullptr;
  return temp;
}
inline ::streaming_performance::StatisticsSet* PerformanceReport::_internal_mutable_statistics() {
  
  if (statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::streaming_performance::StatisticsSet>(GetArenaForAllocation());
    statistics_ = p;
  }
  return statistics_;
}
inline ::streaming_performance::StatisticsSet* PerformanceReport::mutable_statistics() {
  ::streaming_performance::StatisticsSet* _msg = _internal_mutable_statistics();
  // @@protoc_insertion_point(field_mutable:streaming_performance.PerformanceReport.statistics)
  return _msg;
}
inline void PerformanceReport::set_allocated_statistics(::streaming_performance::StatisticsSet* statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete statistics_;
  }
  if (statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::streaming_performance::StatisticsSet>::GetOwningArena(statistics);
    if (message_arena != submessage_arena) {
      statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statistics, submessage_arena);
    }
    
  } else {
    
  }
  statistics_ = statistics;
  // @@protoc_insertion_point(field_set_allocated:streaming_performance.PerformanceReport.statistics)
}

// repeated .streaming_performance.SourceItem source_items = 16;
inline int PerformanceReport::_internal_source_items_size() const {
  return source_items_.size();
}
inline int PerformanceReport::source_items_size() const {
  return _internal_source_items_size();
}
inline void PerformanceReport::clear_source_items() {
  source_items_.Clear();
}
inline ::streaming_performance::SourceItem* PerformanceReport::mutable_source_items(int index) {
  // @@protoc_insertion_point(field_mutable:streaming_performance.PerformanceReport.source_items)
  return source_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SourceItem >*
PerformanceReport::mutable_source_items() {
  // @@protoc_insertion_point(field_mutable_list:streaming_performance.PerformanceReport.source_items)
  return &source_items_;
}
inline const ::streaming_performance::SourceItem& PerformanceReport::_internal_source_items(int index) const {
  return source_items_.Get(index);
}
inline const ::streaming_performance::SourceItem& PerformanceReport::source_items(int index) const {
  // @@protoc_insertion_point(field_get:streaming_performance.PerformanceReport.source_items)
  return _internal_source_items(index);
}
inline ::streaming_performance::SourceItem* PerformanceReport::_internal_add_source_items() {
  return source_items_.Add();
}
inline ::streaming_performance::SourceItem* PerformanceReport::add_source_items() {
  ::streaming_performance::SourceItem* _add = _internal_add_source_items();
  // @@protoc_insertion_point(field_add:streaming_performance.PerformanceReport.source_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::streaming_performance::SourceItem >&
PerformanceReport::source_items() const {
  // @@protoc_insertion_point(field_list:streaming_performance.PerformanceReport.source_items)
  return source_items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace streaming_performance

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::streaming_performance::RuntimeNetWork> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::streaming_performance::RuntimeNetWork>() {
  return ::streaming_performance::RuntimeNetWork_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_streaming_5fdetails_2eproto
