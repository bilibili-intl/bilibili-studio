// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: infoc_app_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_infoc_5fapp_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_infoc_5fapp_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_infoc_5fapp_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_infoc_5fapp_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_infoc_5fapp_5fevent_2eproto;
class AppClickInfo;
struct AppClickInfoDefaultTypeInternal;
extern AppClickInfoDefaultTypeInternal _AppClickInfo_default_instance_;
class AppEvent;
struct AppEventDefaultTypeInternal;
extern AppEventDefaultTypeInternal _AppEvent_default_instance_;
class AppEvent_ExtendedFieldsEntry_DoNotUse;
struct AppEvent_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal;
extern AppEvent_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal _AppEvent_ExtendedFieldsEntry_DoNotUse_default_instance_;
class AppExposureInfo;
struct AppExposureInfoDefaultTypeInternal;
extern AppExposureInfoDefaultTypeInternal _AppExposureInfo_default_instance_;
class AppExposureInfo_AppExposureContentInfo;
struct AppExposureInfo_AppExposureContentInfoDefaultTypeInternal;
extern AppExposureInfo_AppExposureContentInfoDefaultTypeInternal _AppExposureInfo_AppExposureContentInfo_default_instance_;
class AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse;
struct AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal;
extern AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUseDefaultTypeInternal _AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse_default_instance_;
class AppInfo;
struct AppInfoDefaultTypeInternal;
extern AppInfoDefaultTypeInternal _AppInfo_default_instance_;
class AppPageViewInfo;
struct AppPageViewInfoDefaultTypeInternal;
extern AppPageViewInfoDefaultTypeInternal _AppPageViewInfo_default_instance_;
class AppPlayerInfo;
struct AppPlayerInfoDefaultTypeInternal;
extern AppPlayerInfoDefaultTypeInternal _AppPlayerInfo_default_instance_;
class AppRuntimeInfo;
struct AppRuntimeInfoDefaultTypeInternal;
extern AppRuntimeInfoDefaultTypeInternal _AppRuntimeInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AppClickInfo* Arena::CreateMaybeMessage<::AppClickInfo>(Arena*);
template<> ::AppEvent* Arena::CreateMaybeMessage<::AppEvent>(Arena*);
template<> ::AppEvent_ExtendedFieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::AppEvent_ExtendedFieldsEntry_DoNotUse>(Arena*);
template<> ::AppExposureInfo* Arena::CreateMaybeMessage<::AppExposureInfo>(Arena*);
template<> ::AppExposureInfo_AppExposureContentInfo* Arena::CreateMaybeMessage<::AppExposureInfo_AppExposureContentInfo>(Arena*);
template<> ::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse>(Arena*);
template<> ::AppInfo* Arena::CreateMaybeMessage<::AppInfo>(Arena*);
template<> ::AppPageViewInfo* Arena::CreateMaybeMessage<::AppPageViewInfo>(Arena*);
template<> ::AppPlayerInfo* Arena::CreateMaybeMessage<::AppPlayerInfo>(Arena*);
template<> ::AppRuntimeInfo* Arena::CreateMaybeMessage<::AppRuntimeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EventCategory : int {
  OTHER = 0,
  PAGEVIEW = 1,
  CLICK = 2,
  EXPOSURE = 3,
  SYSTEM = 4,
  TRACKER = 5,
  CUSTOM = 7,
  COMPATIBLE = 8,
  PLAYER = 9,
  EventCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EventCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EventCategory_IsValid(int value);
constexpr EventCategory EventCategory_MIN = OTHER;
constexpr EventCategory EventCategory_MAX = PLAYER;
constexpr int EventCategory_ARRAYSIZE = EventCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventCategory_descriptor();
template<typename T>
inline const std::string& EventCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventCategory_descriptor(), enum_t_value);
}
inline bool EventCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventCategory>(
    EventCategory_descriptor(), name, value);
}
enum RuntimeNetWork : int {
  UNKNOWN = 0,
  WIFI = 1,
  CELLULAR = 2,
  OFFLINE = 3,
  OTHERNET = 4,
  ETHERNET = 5,
  RuntimeNetWork_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RuntimeNetWork_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RuntimeNetWork_IsValid(int value);
constexpr RuntimeNetWork RuntimeNetWork_MIN = UNKNOWN;
constexpr RuntimeNetWork RuntimeNetWork_MAX = ETHERNET;
constexpr int RuntimeNetWork_ARRAYSIZE = RuntimeNetWork_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuntimeNetWork_descriptor();
template<typename T>
inline const std::string& RuntimeNetWork_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RuntimeNetWork>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RuntimeNetWork_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RuntimeNetWork_descriptor(), enum_t_value);
}
inline bool RuntimeNetWork_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RuntimeNetWork* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RuntimeNetWork>(
    RuntimeNetWork_descriptor(), name, value);
}
// ===================================================================

class AppInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppInfo) */ {
 public:
  inline AppInfo() : AppInfo(nullptr) {}
  ~AppInfo() override;
  explicit constexpr AppInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppInfo(const AppInfo& from);
  AppInfo(AppInfo&& from) noexcept
    : AppInfo() {
    *this = ::std::move(from);
  }

  inline AppInfo& operator=(const AppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppInfo& operator=(AppInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppInfo* internal_default_instance() {
    return reinterpret_cast<const AppInfo*>(
               &_AppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppInfo& a, AppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppInfo* New() const final {
    return new AppInfo();
  }

  AppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppInfo";
  }
  protected:
  explicit AppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuvidFieldNumber = 3,
    kChidFieldNumber = 4,
    kBrandFieldNumber = 5,
    kDeviceIdFieldNumber = 6,
    kModelFieldNumber = 7,
    kOsverFieldNumber = 8,
    kBuvidSharedFieldNumber = 10,
    kAbiFieldNumber = 13,
    kBilifpFieldNumber = 14,
    kSessionIdFieldNumber = 15,
    kAppIdFieldNumber = 1,
    kPlatformFieldNumber = 2,
    kFtsFieldNumber = 9,
    kUidFieldNumber = 11,
    kApiLevelFieldNumber = 12,
  };
  // string buvid = 3;
  void clear_buvid();
  const std::string& buvid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buvid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buvid();
  PROTOBUF_MUST_USE_RESULT std::string* release_buvid();
  void set_allocated_buvid(std::string* buvid);
  private:
  const std::string& _internal_buvid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buvid(const std::string& value);
  std::string* _internal_mutable_buvid();
  public:

  // string chid = 4;
  void clear_chid();
  const std::string& chid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chid();
  PROTOBUF_MUST_USE_RESULT std::string* release_chid();
  void set_allocated_chid(std::string* chid);
  private:
  const std::string& _internal_chid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chid(const std::string& value);
  std::string* _internal_mutable_chid();
  public:

  // string brand = 5;
  void clear_brand();
  const std::string& brand() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brand(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brand();
  PROTOBUF_MUST_USE_RESULT std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  private:
  const std::string& _internal_brand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // string device_id = 6;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string model = 7;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string osver = 8;
  void clear_osver();
  const std::string& osver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_osver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_osver();
  PROTOBUF_MUST_USE_RESULT std::string* release_osver();
  void set_allocated_osver(std::string* osver);
  private:
  const std::string& _internal_osver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_osver(const std::string& value);
  std::string* _internal_mutable_osver();
  public:

  // string buvid_shared = 10;
  void clear_buvid_shared();
  const std::string& buvid_shared() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buvid_shared(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buvid_shared();
  PROTOBUF_MUST_USE_RESULT std::string* release_buvid_shared();
  void set_allocated_buvid_shared(std::string* buvid_shared);
  private:
  const std::string& _internal_buvid_shared() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buvid_shared(const std::string& value);
  std::string* _internal_mutable_buvid_shared();
  public:

  // string abi = 13;
  void clear_abi();
  const std::string& abi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abi();
  PROTOBUF_MUST_USE_RESULT std::string* release_abi();
  void set_allocated_abi(std::string* abi);
  private:
  const std::string& _internal_abi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abi(const std::string& value);
  std::string* _internal_mutable_abi();
  public:

  // string bilifp = 14;
  void clear_bilifp();
  const std::string& bilifp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bilifp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bilifp();
  PROTOBUF_MUST_USE_RESULT std::string* release_bilifp();
  void set_allocated_bilifp(std::string* bilifp);
  private:
  const std::string& _internal_bilifp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bilifp(const std::string& value);
  std::string* _internal_mutable_bilifp();
  public:

  // string session_id = 15;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // int32 app_id = 1;
  void clear_app_id();
  ::PROTOBUF_NAMESPACE_ID::int32 app_id() const;
  void set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_app_id() const;
  void _internal_set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 platform = 2;
  void clear_platform();
  ::PROTOBUF_NAMESPACE_ID::int32 platform() const;
  void set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_platform() const;
  void _internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 fts = 9;
  void clear_fts();
  ::PROTOBUF_NAMESPACE_ID::int64 fts() const;
  void set_fts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fts() const;
  void _internal_set_fts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 uid = 11;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 api_level = 12;
  void clear_api_level();
  ::PROTOBUF_NAMESPACE_ID::int32 api_level() const;
  void set_api_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_api_level() const;
  void _internal_set_api_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buvid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buvid_shared_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bilifp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 app_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 platform_;
  ::PROTOBUF_NAMESPACE_ID::int64 fts_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 api_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infoc_5fapp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class AppRuntimeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppRuntimeInfo) */ {
 public:
  inline AppRuntimeInfo() : AppRuntimeInfo(nullptr) {}
  ~AppRuntimeInfo() override;
  explicit constexpr AppRuntimeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppRuntimeInfo(const AppRuntimeInfo& from);
  AppRuntimeInfo(AppRuntimeInfo&& from) noexcept
    : AppRuntimeInfo() {
    *this = ::std::move(from);
  }

  inline AppRuntimeInfo& operator=(const AppRuntimeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppRuntimeInfo& operator=(AppRuntimeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppRuntimeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppRuntimeInfo* internal_default_instance() {
    return reinterpret_cast<const AppRuntimeInfo*>(
               &_AppRuntimeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppRuntimeInfo& a, AppRuntimeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppRuntimeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppRuntimeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppRuntimeInfo* New() const final {
    return new AppRuntimeInfo();
  }

  AppRuntimeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppRuntimeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppRuntimeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppRuntimeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppRuntimeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppRuntimeInfo";
  }
  protected:
  explicit AppRuntimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOidFieldNumber = 2,
    kVersionFieldNumber = 5,
    kVersionCodeFieldNumber = 6,
    kLogverFieldNumber = 7,
    kAbtestFieldNumber = 8,
    kFfVersionFieldNumber = 9,
    kLongitudeFieldNumber = 3,
    kLatitudeFieldNumber = 4,
    kNetworkFieldNumber = 1,
  };
  // string oid = 2;
  void clear_oid();
  const std::string& oid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oid();
  PROTOBUF_MUST_USE_RESULT std::string* release_oid();
  void set_allocated_oid(std::string* oid);
  private:
  const std::string& _internal_oid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oid(const std::string& value);
  std::string* _internal_mutable_oid();
  public:

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string version_code = 6;
  void clear_version_code();
  const std::string& version_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_version_code();
  void set_allocated_version_code(std::string* version_code);
  private:
  const std::string& _internal_version_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version_code(const std::string& value);
  std::string* _internal_mutable_version_code();
  public:

  // string logver = 7;
  void clear_logver();
  const std::string& logver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logver();
  PROTOBUF_MUST_USE_RESULT std::string* release_logver();
  void set_allocated_logver(std::string* logver);
  private:
  const std::string& _internal_logver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logver(const std::string& value);
  std::string* _internal_mutable_logver();
  public:

  // string abtest = 8;
  void clear_abtest();
  const std::string& abtest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_abtest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_abtest();
  PROTOBUF_MUST_USE_RESULT std::string* release_abtest();
  void set_allocated_abtest(std::string* abtest);
  private:
  const std::string& _internal_abtest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abtest(const std::string& value);
  std::string* _internal_mutable_abtest();
  public:

  // string ff_version = 9;
  void clear_ff_version();
  const std::string& ff_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ff_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ff_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_ff_version();
  void set_allocated_ff_version(std::string* ff_version);
  private:
  const std::string& _internal_ff_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ff_version(const std::string& value);
  std::string* _internal_mutable_ff_version();
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 4;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // .RuntimeNetWork network = 1;
  void clear_network();
  ::RuntimeNetWork network() const;
  void set_network(::RuntimeNetWork value);
  private:
  ::RuntimeNetWork _internal_network() const;
  void _internal_set_network(::RuntimeNetWork value);
  public:

  // @@protoc_insertion_point(class_scope:AppRuntimeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abtest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ff_version_;
  double longitude_;
  double latitude_;
  int network_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infoc_5fapp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class AppEvent_ExtendedFieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppEvent_ExtendedFieldsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppEvent_ExtendedFieldsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppEvent_ExtendedFieldsEntry_DoNotUse();
  explicit constexpr AppEvent_ExtendedFieldsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppEvent_ExtendedFieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppEvent_ExtendedFieldsEntry_DoNotUse& other);
  static const AppEvent_ExtendedFieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppEvent_ExtendedFieldsEntry_DoNotUse*>(&_AppEvent_ExtendedFieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AppEvent.ExtendedFieldsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AppEvent.ExtendedFieldsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AppEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppEvent) */ {
 public:
  inline AppEvent() : AppEvent(nullptr) {}
  ~AppEvent() override;
  explicit constexpr AppEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppEvent(const AppEvent& from);
  AppEvent(AppEvent&& from) noexcept
    : AppEvent() {
    *this = ::std::move(from);
  }

  inline AppEvent& operator=(const AppEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppEvent& operator=(AppEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppEvent* internal_default_instance() {
    return reinterpret_cast<const AppEvent*>(
               &_AppEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppEvent& a, AppEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AppEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppEvent* New() const final {
    return new AppEvent();
  }

  AppEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppEvent";
  }
  protected:
  explicit AppEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtendedFieldsFieldNumber = 13,
    kEventIdFieldNumber = 1,
    kMidFieldNumber = 4,
    kLogIdFieldNumber = 6,
    kAppInfoFieldNumber = 2,
    kRuntimeInfoFieldNumber = 3,
    kAppPageViewInfoFieldNumber = 10,
    kAppClickInfoFieldNumber = 11,
    kAppExposureInfoFieldNumber = 12,
    kAppPlayerInfoFieldNumber = 17,
    kCtimeFieldNumber = 5,
    kSnFieldNumber = 8,
    kRetrySendCountFieldNumber = 7,
    kEventCategoryFieldNumber = 9,
    kSnGenTimeFieldNumber = 15,
    kUploadTimeFieldNumber = 16,
    kPageTypeFieldNumber = 14,
  };
  // map<string, string> extended_fields = 13;
  int extended_fields_size() const;
  private:
  int _internal_extended_fields_size() const;
  public:
  void clear_extended_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extended_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extended_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extended_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extended_fields();

  // string event_id = 1;
  void clear_event_id();
  const std::string& event_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);
  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(const std::string& value);
  std::string* _internal_mutable_event_id();
  public:

  // string mid = 4;
  void clear_mid();
  const std::string& mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mid();
  PROTOBUF_MUST_USE_RESULT std::string* release_mid();
  void set_allocated_mid(std::string* mid);
  private:
  const std::string& _internal_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* _internal_mutable_mid();
  public:

  // string log_id = 6;
  void clear_log_id();
  const std::string& log_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_log_id();
  void set_allocated_log_id(std::string* log_id);
  private:
  const std::string& _internal_log_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_id(const std::string& value);
  std::string* _internal_mutable_log_id();
  public:

  // .AppInfo app_info = 2;
  bool has_app_info() const;
  private:
  bool _internal_has_app_info() const;
  public:
  void clear_app_info();
  const ::AppInfo& app_info() const;
  PROTOBUF_MUST_USE_RESULT ::AppInfo* release_app_info();
  ::AppInfo* mutable_app_info();
  void set_allocated_app_info(::AppInfo* app_info);
  private:
  const ::AppInfo& _internal_app_info() const;
  ::AppInfo* _internal_mutable_app_info();
  public:
  void unsafe_arena_set_allocated_app_info(
      ::AppInfo* app_info);
  ::AppInfo* unsafe_arena_release_app_info();

  // .AppRuntimeInfo runtime_info = 3;
  bool has_runtime_info() const;
  private:
  bool _internal_has_runtime_info() const;
  public:
  void clear_runtime_info();
  const ::AppRuntimeInfo& runtime_info() const;
  PROTOBUF_MUST_USE_RESULT ::AppRuntimeInfo* release_runtime_info();
  ::AppRuntimeInfo* mutable_runtime_info();
  void set_allocated_runtime_info(::AppRuntimeInfo* runtime_info);
  private:
  const ::AppRuntimeInfo& _internal_runtime_info() const;
  ::AppRuntimeInfo* _internal_mutable_runtime_info();
  public:
  void unsafe_arena_set_allocated_runtime_info(
      ::AppRuntimeInfo* runtime_info);
  ::AppRuntimeInfo* unsafe_arena_release_runtime_info();

  // .AppPageViewInfo app_page_view_info = 10;
  bool has_app_page_view_info() const;
  private:
  bool _internal_has_app_page_view_info() const;
  public:
  void clear_app_page_view_info();
  const ::AppPageViewInfo& app_page_view_info() const;
  PROTOBUF_MUST_USE_RESULT ::AppPageViewInfo* release_app_page_view_info();
  ::AppPageViewInfo* mutable_app_page_view_info();
  void set_allocated_app_page_view_info(::AppPageViewInfo* app_page_view_info);
  private:
  const ::AppPageViewInfo& _internal_app_page_view_info() const;
  ::AppPageViewInfo* _internal_mutable_app_page_view_info();
  public:
  void unsafe_arena_set_allocated_app_page_view_info(
      ::AppPageViewInfo* app_page_view_info);
  ::AppPageViewInfo* unsafe_arena_release_app_page_view_info();

  // .AppClickInfo app_click_info = 11;
  bool has_app_click_info() const;
  private:
  bool _internal_has_app_click_info() const;
  public:
  void clear_app_click_info();
  const ::AppClickInfo& app_click_info() const;
  PROTOBUF_MUST_USE_RESULT ::AppClickInfo* release_app_click_info();
  ::AppClickInfo* mutable_app_click_info();
  void set_allocated_app_click_info(::AppClickInfo* app_click_info);
  private:
  const ::AppClickInfo& _internal_app_click_info() const;
  ::AppClickInfo* _internal_mutable_app_click_info();
  public:
  void unsafe_arena_set_allocated_app_click_info(
      ::AppClickInfo* app_click_info);
  ::AppClickInfo* unsafe_arena_release_app_click_info();

  // .AppExposureInfo app_exposure_info = 12;
  bool has_app_exposure_info() const;
  private:
  bool _internal_has_app_exposure_info() const;
  public:
  void clear_app_exposure_info();
  const ::AppExposureInfo& app_exposure_info() const;
  PROTOBUF_MUST_USE_RESULT ::AppExposureInfo* release_app_exposure_info();
  ::AppExposureInfo* mutable_app_exposure_info();
  void set_allocated_app_exposure_info(::AppExposureInfo* app_exposure_info);
  private:
  const ::AppExposureInfo& _internal_app_exposure_info() const;
  ::AppExposureInfo* _internal_mutable_app_exposure_info();
  public:
  void unsafe_arena_set_allocated_app_exposure_info(
      ::AppExposureInfo* app_exposure_info);
  ::AppExposureInfo* unsafe_arena_release_app_exposure_info();

  // .AppPlayerInfo app_player_info = 17;
  bool has_app_player_info() const;
  private:
  bool _internal_has_app_player_info() const;
  public:
  void clear_app_player_info();
  const ::AppPlayerInfo& app_player_info() const;
  PROTOBUF_MUST_USE_RESULT ::AppPlayerInfo* release_app_player_info();
  ::AppPlayerInfo* mutable_app_player_info();
  void set_allocated_app_player_info(::AppPlayerInfo* app_player_info);
  private:
  const ::AppPlayerInfo& _internal_app_player_info() const;
  ::AppPlayerInfo* _internal_mutable_app_player_info();
  public:
  void unsafe_arena_set_allocated_app_player_info(
      ::AppPlayerInfo* app_player_info);
  ::AppPlayerInfo* unsafe_arena_release_app_player_info();

  // int64 ctime = 5;
  void clear_ctime();
  ::PROTOBUF_NAMESPACE_ID::int64 ctime() const;
  void set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ctime() const;
  void _internal_set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sn = 8;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::int64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sn() const;
  void _internal_set_sn(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 retry_send_count = 7;
  void clear_retry_send_count();
  ::PROTOBUF_NAMESPACE_ID::int32 retry_send_count() const;
  void set_retry_send_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retry_send_count() const;
  void _internal_set_retry_send_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .EventCategory event_category = 9;
  void clear_event_category();
  ::EventCategory event_category() const;
  void set_event_category(::EventCategory value);
  private:
  ::EventCategory _internal_event_category() const;
  void _internal_set_event_category(::EventCategory value);
  public:

  // int64 sn_gen_time = 15;
  void clear_sn_gen_time();
  ::PROTOBUF_NAMESPACE_ID::int64 sn_gen_time() const;
  void set_sn_gen_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sn_gen_time() const;
  void _internal_set_sn_gen_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 upload_time = 16;
  void clear_upload_time();
  ::PROTOBUF_NAMESPACE_ID::int64 upload_time() const;
  void set_upload_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upload_time() const;
  void _internal_set_upload_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 page_type = 14;
  void clear_page_type();
  ::PROTOBUF_NAMESPACE_ID::int32 page_type() const;
  void set_page_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_type() const;
  void _internal_set_page_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AppEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppEvent_ExtendedFieldsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> extended_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_id_;
  ::AppInfo* app_info_;
  ::AppRuntimeInfo* runtime_info_;
  ::AppPageViewInfo* app_page_view_info_;
  ::AppClickInfo* app_click_info_;
  ::AppExposureInfo* app_exposure_info_;
  ::AppPlayerInfo* app_player_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 ctime_;
  ::PROTOBUF_NAMESPACE_ID::int64 sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 retry_send_count_;
  int event_category_;
  ::PROTOBUF_NAMESPACE_ID::int64 sn_gen_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 upload_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infoc_5fapp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class AppPageViewInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppPageViewInfo) */ {
 public:
  inline AppPageViewInfo() : AppPageViewInfo(nullptr) {}
  ~AppPageViewInfo() override;
  explicit constexpr AppPageViewInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppPageViewInfo(const AppPageViewInfo& from);
  AppPageViewInfo(AppPageViewInfo&& from) noexcept
    : AppPageViewInfo() {
    *this = ::std::move(from);
  }

  inline AppPageViewInfo& operator=(const AppPageViewInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppPageViewInfo& operator=(AppPageViewInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppPageViewInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppPageViewInfo* internal_default_instance() {
    return reinterpret_cast<const AppPageViewInfo*>(
               &_AppPageViewInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppPageViewInfo& a, AppPageViewInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppPageViewInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppPageViewInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppPageViewInfo* New() const final {
    return new AppPageViewInfo();
  }

  AppPageViewInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppPageViewInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppPageViewInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppPageViewInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppPageViewInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppPageViewInfo";
  }
  protected:
  explicit AppPageViewInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFromFieldNumber = 1,
    kDurationFieldNumber = 5,
    kPvstartFieldNumber = 6,
    kLoadTypeFieldNumber = 4,
    kPvendFieldNumber = 7,
  };
  // string event_id_from = 1;
  void clear_event_id_from();
  const std::string& event_id_from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_id_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_id_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_event_id_from();
  void set_allocated_event_id_from(std::string* event_id_from);
  private:
  const std::string& _internal_event_id_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id_from(const std::string& value);
  std::string* _internal_mutable_event_id_from();
  public:

  // int64 duration = 5;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pvstart = 6;
  void clear_pvstart();
  ::PROTOBUF_NAMESPACE_ID::int64 pvstart() const;
  void set_pvstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pvstart() const;
  void _internal_set_pvstart(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 load_type = 4;
  void clear_load_type();
  ::PROTOBUF_NAMESPACE_ID::int32 load_type() const;
  void set_load_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_load_type() const;
  void _internal_set_load_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 pvend = 7;
  void clear_pvend();
  ::PROTOBUF_NAMESPACE_ID::int64 pvend() const;
  void set_pvend(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pvend() const;
  void _internal_set_pvend(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AppPageViewInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_from_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  ::PROTOBUF_NAMESPACE_ID::int64 pvstart_;
  ::PROTOBUF_NAMESPACE_ID::int32 load_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 pvend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infoc_5fapp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse();
  explicit constexpr AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse& other);
  static const AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse*>(&_AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AppExposureInfo.AppExposureContentInfo.ExtendedFieldsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "AppExposureInfo.AppExposureContentInfo.ExtendedFieldsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AppExposureInfo_AppExposureContentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppExposureInfo.AppExposureContentInfo) */ {
 public:
  inline AppExposureInfo_AppExposureContentInfo() : AppExposureInfo_AppExposureContentInfo(nullptr) {}
  ~AppExposureInfo_AppExposureContentInfo() override;
  explicit constexpr AppExposureInfo_AppExposureContentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppExposureInfo_AppExposureContentInfo(const AppExposureInfo_AppExposureContentInfo& from);
  AppExposureInfo_AppExposureContentInfo(AppExposureInfo_AppExposureContentInfo&& from) noexcept
    : AppExposureInfo_AppExposureContentInfo() {
    *this = ::std::move(from);
  }

  inline AppExposureInfo_AppExposureContentInfo& operator=(const AppExposureInfo_AppExposureContentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppExposureInfo_AppExposureContentInfo& operator=(AppExposureInfo_AppExposureContentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppExposureInfo_AppExposureContentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppExposureInfo_AppExposureContentInfo* internal_default_instance() {
    return reinterpret_cast<const AppExposureInfo_AppExposureContentInfo*>(
               &_AppExposureInfo_AppExposureContentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AppExposureInfo_AppExposureContentInfo& a, AppExposureInfo_AppExposureContentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppExposureInfo_AppExposureContentInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppExposureInfo_AppExposureContentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppExposureInfo_AppExposureContentInfo* New() const final {
    return new AppExposureInfo_AppExposureContentInfo();
  }

  AppExposureInfo_AppExposureContentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppExposureInfo_AppExposureContentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppExposureInfo_AppExposureContentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppExposureInfo_AppExposureContentInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppExposureInfo_AppExposureContentInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppExposureInfo.AppExposureContentInfo";
  }
  protected:
  explicit AppExposureInfo_AppExposureContentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtendedFieldsFieldNumber = 2,
    kEventIdFieldNumber = 1,
  };
  // map<string, string> extended_fields = 2;
  int extended_fields_size() const;
  private:
  int _internal_extended_fields_size() const;
  public:
  void clear_extended_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extended_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extended_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extended_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extended_fields();

  // string event_id = 1;
  void clear_event_id();
  const std::string& event_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);
  private:
  const std::string& _internal_event_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_id(const std::string& value);
  std::string* _internal_mutable_event_id();
  public:

  // @@protoc_insertion_point(class_scope:AppExposureInfo.AppExposureContentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppExposureInfo_AppExposureContentInfo_ExtendedFieldsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> extended_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infoc_5fapp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class AppExposureInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppExposureInfo) */ {
 public:
  inline AppExposureInfo() : AppExposureInfo(nullptr) {}
  ~AppExposureInfo() override;
  explicit constexpr AppExposureInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppExposureInfo(const AppExposureInfo& from);
  AppExposureInfo(AppExposureInfo&& from) noexcept
    : AppExposureInfo() {
    *this = ::std::move(from);
  }

  inline AppExposureInfo& operator=(const AppExposureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppExposureInfo& operator=(AppExposureInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppExposureInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppExposureInfo* internal_default_instance() {
    return reinterpret_cast<const AppExposureInfo*>(
               &_AppExposureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AppExposureInfo& a, AppExposureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppExposureInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppExposureInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppExposureInfo* New() const final {
    return new AppExposureInfo();
  }

  AppExposureInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppExposureInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppExposureInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppExposureInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppExposureInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppExposureInfo";
  }
  protected:
  explicit AppExposureInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AppExposureInfo_AppExposureContentInfo AppExposureContentInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kContentInfosFieldNumber = 1,
  };
  // repeated .AppExposureInfo.AppExposureContentInfo content_infos = 1;
  int content_infos_size() const;
  private:
  int _internal_content_infos_size() const;
  public:
  void clear_content_infos();
  ::AppExposureInfo_AppExposureContentInfo* mutable_content_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppExposureInfo_AppExposureContentInfo >*
      mutable_content_infos();
  private:
  const ::AppExposureInfo_AppExposureContentInfo& _internal_content_infos(int index) const;
  ::AppExposureInfo_AppExposureContentInfo* _internal_add_content_infos();
  public:
  const ::AppExposureInfo_AppExposureContentInfo& content_infos(int index) const;
  ::AppExposureInfo_AppExposureContentInfo* add_content_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppExposureInfo_AppExposureContentInfo >&
      content_infos() const;

  // @@protoc_insertion_point(class_scope:AppExposureInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppExposureInfo_AppExposureContentInfo > content_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infoc_5fapp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class AppClickInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppClickInfo) */ {
 public:
  inline AppClickInfo() : AppClickInfo(nullptr) {}
  ~AppClickInfo() override;
  explicit constexpr AppClickInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppClickInfo(const AppClickInfo& from);
  AppClickInfo(AppClickInfo&& from) noexcept
    : AppClickInfo() {
    *this = ::std::move(from);
  }

  inline AppClickInfo& operator=(const AppClickInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppClickInfo& operator=(AppClickInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppClickInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppClickInfo* internal_default_instance() {
    return reinterpret_cast<const AppClickInfo*>(
               &_AppClickInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AppClickInfo& a, AppClickInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppClickInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppClickInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppClickInfo* New() const final {
    return new AppClickInfo();
  }

  AppClickInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppClickInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppClickInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppClickInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppClickInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppClickInfo";
  }
  protected:
  explicit AppClickInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AppClickInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infoc_5fapp_5fevent_2eproto;
};
// -------------------------------------------------------------------

class AppPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppPlayerInfo) */ {
 public:
  inline AppPlayerInfo() : AppPlayerInfo(nullptr) {}
  ~AppPlayerInfo() override;
  explicit constexpr AppPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppPlayerInfo(const AppPlayerInfo& from);
  AppPlayerInfo(AppPlayerInfo&& from) noexcept
    : AppPlayerInfo() {
    *this = ::std::move(from);
  }

  inline AppPlayerInfo& operator=(const AppPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppPlayerInfo& operator=(AppPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const AppPlayerInfo*>(
               &_AppPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AppPlayerInfo& a, AppPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppPlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppPlayerInfo* New() const final {
    return new AppPlayerInfo();
  }

  AppPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppPlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppPlayerInfo";
  }
  protected:
  explicit AppPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayFromSpmidFieldNumber = 1,
    kSeasonIdFieldNumber = 2,
    kEpIdFieldNumber = 5,
    kProgressFieldNumber = 6,
    kAvidFieldNumber = 7,
    kCidFieldNumber = 8,
    kPlayerSessionIdFieldNumber = 14,
    kSpeedFieldNumber = 15,
    kPlayerClarityFieldNumber = 16,
    kTypeFieldNumber = 3,
    kSubTypeFieldNumber = 4,
    kNetworkTypeFieldNumber = 9,
    kDanmakuFieldNumber = 10,
    kStatusFieldNumber = 11,
    kPlayMethodFieldNumber = 12,
    kPlayTypeFieldNumber = 13,
    kIsAutoplayFieldNumber = 17,
    kVideoFormatFieldNumber = 18,
  };
  // string play_from_spmid = 1;
  void clear_play_from_spmid();
  const std::string& play_from_spmid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_play_from_spmid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_play_from_spmid();
  PROTOBUF_MUST_USE_RESULT std::string* release_play_from_spmid();
  void set_allocated_play_from_spmid(std::string* play_from_spmid);
  private:
  const std::string& _internal_play_from_spmid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_play_from_spmid(const std::string& value);
  std::string* _internal_mutable_play_from_spmid();
  public:

  // string season_id = 2;
  void clear_season_id();
  const std::string& season_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_season_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_season_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_season_id();
  void set_allocated_season_id(std::string* season_id);
  private:
  const std::string& _internal_season_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_season_id(const std::string& value);
  std::string* _internal_mutable_season_id();
  public:

  // string ep_id = 5;
  void clear_ep_id();
  const std::string& ep_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ep_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ep_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_ep_id();
  void set_allocated_ep_id(std::string* ep_id);
  private:
  const std::string& _internal_ep_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ep_id(const std::string& value);
  std::string* _internal_mutable_ep_id();
  public:

  // string progress = 6;
  void clear_progress();
  const std::string& progress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_progress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_progress();
  PROTOBUF_MUST_USE_RESULT std::string* release_progress();
  void set_allocated_progress(std::string* progress);
  private:
  const std::string& _internal_progress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_progress(const std::string& value);
  std::string* _internal_mutable_progress();
  public:

  // string avid = 7;
  void clear_avid();
  const std::string& avid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avid();
  PROTOBUF_MUST_USE_RESULT std::string* release_avid();
  void set_allocated_avid(std::string* avid);
  private:
  const std::string& _internal_avid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avid(const std::string& value);
  std::string* _internal_mutable_avid();
  public:

  // string cid = 8;
  void clear_cid();
  const std::string& cid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cid();
  PROTOBUF_MUST_USE_RESULT std::string* release_cid();
  void set_allocated_cid(std::string* cid);
  private:
  const std::string& _internal_cid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cid(const std::string& value);
  std::string* _internal_mutable_cid();
  public:

  // string player_session_id = 14;
  void clear_player_session_id();
  const std::string& player_session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_session_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_player_session_id();
  void set_allocated_player_session_id(std::string* player_session_id);
  private:
  const std::string& _internal_player_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_session_id(const std::string& value);
  std::string* _internal_mutable_player_session_id();
  public:

  // string speed = 15;
  void clear_speed();
  const std::string& speed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_speed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_speed();
  PROTOBUF_MUST_USE_RESULT std::string* release_speed();
  void set_allocated_speed(std::string* speed);
  private:
  const std::string& _internal_speed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speed(const std::string& value);
  std::string* _internal_mutable_speed();
  public:

  // string player_clarity = 16;
  void clear_player_clarity();
  const std::string& player_clarity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_clarity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_clarity();
  PROTOBUF_MUST_USE_RESULT std::string* release_player_clarity();
  void set_allocated_player_clarity(std::string* player_clarity);
  private:
  const std::string& _internal_player_clarity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_clarity(const std::string& value);
  std::string* _internal_mutable_player_clarity();
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sub_type = 4;
  void clear_sub_type();
  ::PROTOBUF_NAMESPACE_ID::int32 sub_type() const;
  void set_sub_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sub_type() const;
  void _internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 network_type = 9;
  void clear_network_type();
  ::PROTOBUF_NAMESPACE_ID::int32 network_type() const;
  void set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_network_type() const;
  void _internal_set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 danmaku = 10;
  void clear_danmaku();
  ::PROTOBUF_NAMESPACE_ID::int32 danmaku() const;
  void set_danmaku(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_danmaku() const;
  void _internal_set_danmaku(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 11;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 play_method = 12;
  void clear_play_method();
  ::PROTOBUF_NAMESPACE_ID::int32 play_method() const;
  void set_play_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_play_method() const;
  void _internal_set_play_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 play_type = 13;
  void clear_play_type();
  ::PROTOBUF_NAMESPACE_ID::int32 play_type() const;
  void set_play_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_play_type() const;
  void _internal_set_play_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_autoplay = 17;
  void clear_is_autoplay();
  ::PROTOBUF_NAMESPACE_ID::int32 is_autoplay() const;
  void set_is_autoplay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_autoplay() const;
  void _internal_set_is_autoplay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 video_format = 18;
  void clear_video_format();
  ::PROTOBUF_NAMESPACE_ID::int32 video_format() const;
  void set_video_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_video_format() const;
  void _internal_set_video_format(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:AppPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr play_from_spmid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr season_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ep_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr progress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_clarity_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 sub_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 network_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 danmaku_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 play_method_;
  ::PROTOBUF_NAMESPACE_ID::int32 play_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_autoplay_;
  ::PROTOBUF_NAMESPACE_ID::int32 video_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infoc_5fapp_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppInfo

// int32 app_id = 1;
inline void AppInfo::clear_app_id() {
  app_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::_internal_app_id() const {
  return app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::app_id() const {
  // @@protoc_insertion_point(field_get:AppInfo.app_id)
  return _internal_app_id();
}
inline void AppInfo::_internal_set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  app_id_ = value;
}
inline void AppInfo::set_app_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:AppInfo.app_id)
}

// int32 platform = 2;
inline void AppInfo::clear_platform() {
  platform_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::_internal_platform() const {
  return platform_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::platform() const {
  // @@protoc_insertion_point(field_get:AppInfo.platform)
  return _internal_platform();
}
inline void AppInfo::_internal_set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platform_ = value;
}
inline void AppInfo::set_platform(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:AppInfo.platform)
}

// string buvid = 3;
inline void AppInfo::clear_buvid() {
  buvid_.ClearToEmpty();
}
inline const std::string& AppInfo::buvid() const {
  // @@protoc_insertion_point(field_get:AppInfo.buvid)
  return _internal_buvid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_buvid(ArgT0&& arg0, ArgT... args) {
 
 buvid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.buvid)
}
inline std::string* AppInfo::mutable_buvid() {
  std::string* _s = _internal_mutable_buvid();
  // @@protoc_insertion_point(field_mutable:AppInfo.buvid)
  return _s;
}
inline const std::string& AppInfo::_internal_buvid() const {
  return buvid_.Get();
}
inline void AppInfo::_internal_set_buvid(const std::string& value) {
  
  buvid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_buvid() {
  
  return buvid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_buvid() {
  // @@protoc_insertion_point(field_release:AppInfo.buvid)
  return buvid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_buvid(std::string* buvid) {
  if (buvid != nullptr) {
    
  } else {
    
  }
  buvid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buvid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.buvid)
}

// string chid = 4;
inline void AppInfo::clear_chid() {
  chid_.ClearToEmpty();
}
inline const std::string& AppInfo::chid() const {
  // @@protoc_insertion_point(field_get:AppInfo.chid)
  return _internal_chid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_chid(ArgT0&& arg0, ArgT... args) {
 
 chid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.chid)
}
inline std::string* AppInfo::mutable_chid() {
  std::string* _s = _internal_mutable_chid();
  // @@protoc_insertion_point(field_mutable:AppInfo.chid)
  return _s;
}
inline const std::string& AppInfo::_internal_chid() const {
  return chid_.Get();
}
inline void AppInfo::_internal_set_chid(const std::string& value) {
  
  chid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_chid() {
  
  return chid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_chid() {
  // @@protoc_insertion_point(field_release:AppInfo.chid)
  return chid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_chid(std::string* chid) {
  if (chid != nullptr) {
    
  } else {
    
  }
  chid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.chid)
}

// string brand = 5;
inline void AppInfo::clear_brand() {
  brand_.ClearToEmpty();
}
inline const std::string& AppInfo::brand() const {
  // @@protoc_insertion_point(field_get:AppInfo.brand)
  return _internal_brand();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_brand(ArgT0&& arg0, ArgT... args) {
 
 brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.brand)
}
inline std::string* AppInfo::mutable_brand() {
  std::string* _s = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:AppInfo.brand)
  return _s;
}
inline const std::string& AppInfo::_internal_brand() const {
  return brand_.Get();
}
inline void AppInfo::_internal_set_brand(const std::string& value) {
  
  brand_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_brand() {
  
  return brand_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_brand() {
  // @@protoc_insertion_point(field_release:AppInfo.brand)
  return brand_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), brand,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.brand)
}

// string device_id = 6;
inline void AppInfo::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& AppInfo::device_id() const {
  // @@protoc_insertion_point(field_get:AppInfo.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.device_id)
}
inline std::string* AppInfo::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:AppInfo.device_id)
  return _s;
}
inline const std::string& AppInfo::_internal_device_id() const {
  return device_id_.Get();
}
inline void AppInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:AppInfo.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.device_id)
}

// string model = 7;
inline void AppInfo::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& AppInfo::model() const {
  // @@protoc_insertion_point(field_get:AppInfo.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.model)
}
inline std::string* AppInfo::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:AppInfo.model)
  return _s;
}
inline const std::string& AppInfo::_internal_model() const {
  return model_.Get();
}
inline void AppInfo::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_model() {
  // @@protoc_insertion_point(field_release:AppInfo.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.model)
}

// string osver = 8;
inline void AppInfo::clear_osver() {
  osver_.ClearToEmpty();
}
inline const std::string& AppInfo::osver() const {
  // @@protoc_insertion_point(field_get:AppInfo.osver)
  return _internal_osver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_osver(ArgT0&& arg0, ArgT... args) {
 
 osver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.osver)
}
inline std::string* AppInfo::mutable_osver() {
  std::string* _s = _internal_mutable_osver();
  // @@protoc_insertion_point(field_mutable:AppInfo.osver)
  return _s;
}
inline const std::string& AppInfo::_internal_osver() const {
  return osver_.Get();
}
inline void AppInfo::_internal_set_osver(const std::string& value) {
  
  osver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_osver() {
  
  return osver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_osver() {
  // @@protoc_insertion_point(field_release:AppInfo.osver)
  return osver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_osver(std::string* osver) {
  if (osver != nullptr) {
    
  } else {
    
  }
  osver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osver,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.osver)
}

// int64 fts = 9;
inline void AppInfo::clear_fts() {
  fts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppInfo::_internal_fts() const {
  return fts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppInfo::fts() const {
  // @@protoc_insertion_point(field_get:AppInfo.fts)
  return _internal_fts();
}
inline void AppInfo::_internal_set_fts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fts_ = value;
}
inline void AppInfo::set_fts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fts(value);
  // @@protoc_insertion_point(field_set:AppInfo.fts)
}

// string buvid_shared = 10;
inline void AppInfo::clear_buvid_shared() {
  buvid_shared_.ClearToEmpty();
}
inline const std::string& AppInfo::buvid_shared() const {
  // @@protoc_insertion_point(field_get:AppInfo.buvid_shared)
  return _internal_buvid_shared();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_buvid_shared(ArgT0&& arg0, ArgT... args) {
 
 buvid_shared_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.buvid_shared)
}
inline std::string* AppInfo::mutable_buvid_shared() {
  std::string* _s = _internal_mutable_buvid_shared();
  // @@protoc_insertion_point(field_mutable:AppInfo.buvid_shared)
  return _s;
}
inline const std::string& AppInfo::_internal_buvid_shared() const {
  return buvid_shared_.Get();
}
inline void AppInfo::_internal_set_buvid_shared(const std::string& value) {
  
  buvid_shared_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_buvid_shared() {
  
  return buvid_shared_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_buvid_shared() {
  // @@protoc_insertion_point(field_release:AppInfo.buvid_shared)
  return buvid_shared_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_buvid_shared(std::string* buvid_shared) {
  if (buvid_shared != nullptr) {
    
  } else {
    
  }
  buvid_shared_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buvid_shared,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.buvid_shared)
}

// int32 uid = 11;
inline void AppInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::uid() const {
  // @@protoc_insertion_point(field_get:AppInfo.uid)
  return _internal_uid();
}
inline void AppInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void AppInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:AppInfo.uid)
}

// int32 api_level = 12;
inline void AppInfo::clear_api_level() {
  api_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::_internal_api_level() const {
  return api_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppInfo::api_level() const {
  // @@protoc_insertion_point(field_get:AppInfo.api_level)
  return _internal_api_level();
}
inline void AppInfo::_internal_set_api_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  api_level_ = value;
}
inline void AppInfo::set_api_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_api_level(value);
  // @@protoc_insertion_point(field_set:AppInfo.api_level)
}

// string abi = 13;
inline void AppInfo::clear_abi() {
  abi_.ClearToEmpty();
}
inline const std::string& AppInfo::abi() const {
  // @@protoc_insertion_point(field_get:AppInfo.abi)
  return _internal_abi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_abi(ArgT0&& arg0, ArgT... args) {
 
 abi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.abi)
}
inline std::string* AppInfo::mutable_abi() {
  std::string* _s = _internal_mutable_abi();
  // @@protoc_insertion_point(field_mutable:AppInfo.abi)
  return _s;
}
inline const std::string& AppInfo::_internal_abi() const {
  return abi_.Get();
}
inline void AppInfo::_internal_set_abi(const std::string& value) {
  
  abi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_abi() {
  
  return abi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_abi() {
  // @@protoc_insertion_point(field_release:AppInfo.abi)
  return abi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_abi(std::string* abi) {
  if (abi != nullptr) {
    
  } else {
    
  }
  abi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), abi,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.abi)
}

// string bilifp = 14;
inline void AppInfo::clear_bilifp() {
  bilifp_.ClearToEmpty();
}
inline const std::string& AppInfo::bilifp() const {
  // @@protoc_insertion_point(field_get:AppInfo.bilifp)
  return _internal_bilifp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_bilifp(ArgT0&& arg0, ArgT... args) {
 
 bilifp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.bilifp)
}
inline std::string* AppInfo::mutable_bilifp() {
  std::string* _s = _internal_mutable_bilifp();
  // @@protoc_insertion_point(field_mutable:AppInfo.bilifp)
  return _s;
}
inline const std::string& AppInfo::_internal_bilifp() const {
  return bilifp_.Get();
}
inline void AppInfo::_internal_set_bilifp(const std::string& value) {
  
  bilifp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_bilifp() {
  
  return bilifp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_bilifp() {
  // @@protoc_insertion_point(field_release:AppInfo.bilifp)
  return bilifp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_bilifp(std::string* bilifp) {
  if (bilifp != nullptr) {
    
  } else {
    
  }
  bilifp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bilifp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.bilifp)
}

// string session_id = 15;
inline void AppInfo::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& AppInfo::session_id() const {
  // @@protoc_insertion_point(field_get:AppInfo.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppInfo::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppInfo.session_id)
}
inline std::string* AppInfo::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:AppInfo.session_id)
  return _s;
}
inline const std::string& AppInfo::_internal_session_id() const {
  return session_id_.Get();
}
inline void AppInfo::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppInfo::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppInfo::release_session_id() {
  // @@protoc_insertion_point(field_release:AppInfo.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppInfo::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppInfo.session_id)
}

// -------------------------------------------------------------------

// AppRuntimeInfo

// .RuntimeNetWork network = 1;
inline void AppRuntimeInfo::clear_network() {
  network_ = 0;
}
inline ::RuntimeNetWork AppRuntimeInfo::_internal_network() const {
  return static_cast< ::RuntimeNetWork >(network_);
}
inline ::RuntimeNetWork AppRuntimeInfo::network() const {
  // @@protoc_insertion_point(field_get:AppRuntimeInfo.network)
  return _internal_network();
}
inline void AppRuntimeInfo::_internal_set_network(::RuntimeNetWork value) {
  
  network_ = value;
}
inline void AppRuntimeInfo::set_network(::RuntimeNetWork value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:AppRuntimeInfo.network)
}

// string oid = 2;
inline void AppRuntimeInfo::clear_oid() {
  oid_.ClearToEmpty();
}
inline const std::string& AppRuntimeInfo::oid() const {
  // @@protoc_insertion_point(field_get:AppRuntimeInfo.oid)
  return _internal_oid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppRuntimeInfo::set_oid(ArgT0&& arg0, ArgT... args) {
 
 oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppRuntimeInfo.oid)
}
inline std::string* AppRuntimeInfo::mutable_oid() {
  std::string* _s = _internal_mutable_oid();
  // @@protoc_insertion_point(field_mutable:AppRuntimeInfo.oid)
  return _s;
}
inline const std::string& AppRuntimeInfo::_internal_oid() const {
  return oid_.Get();
}
inline void AppRuntimeInfo::_internal_set_oid(const std::string& value) {
  
  oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::_internal_mutable_oid() {
  
  return oid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::release_oid() {
  // @@protoc_insertion_point(field_release:AppRuntimeInfo.oid)
  return oid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppRuntimeInfo::set_allocated_oid(std::string* oid) {
  if (oid != nullptr) {
    
  } else {
    
  }
  oid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppRuntimeInfo.oid)
}

// double longitude = 3;
inline void AppRuntimeInfo::clear_longitude() {
  longitude_ = 0;
}
inline double AppRuntimeInfo::_internal_longitude() const {
  return longitude_;
}
inline double AppRuntimeInfo::longitude() const {
  // @@protoc_insertion_point(field_get:AppRuntimeInfo.longitude)
  return _internal_longitude();
}
inline void AppRuntimeInfo::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void AppRuntimeInfo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:AppRuntimeInfo.longitude)
}

// double latitude = 4;
inline void AppRuntimeInfo::clear_latitude() {
  latitude_ = 0;
}
inline double AppRuntimeInfo::_internal_latitude() const {
  return latitude_;
}
inline double AppRuntimeInfo::latitude() const {
  // @@protoc_insertion_point(field_get:AppRuntimeInfo.latitude)
  return _internal_latitude();
}
inline void AppRuntimeInfo::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void AppRuntimeInfo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:AppRuntimeInfo.latitude)
}

// string version = 5;
inline void AppRuntimeInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& AppRuntimeInfo::version() const {
  // @@protoc_insertion_point(field_get:AppRuntimeInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppRuntimeInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppRuntimeInfo.version)
}
inline std::string* AppRuntimeInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:AppRuntimeInfo.version)
  return _s;
}
inline const std::string& AppRuntimeInfo::_internal_version() const {
  return version_.Get();
}
inline void AppRuntimeInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::release_version() {
  // @@protoc_insertion_point(field_release:AppRuntimeInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppRuntimeInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppRuntimeInfo.version)
}

// string version_code = 6;
inline void AppRuntimeInfo::clear_version_code() {
  version_code_.ClearToEmpty();
}
inline const std::string& AppRuntimeInfo::version_code() const {
  // @@protoc_insertion_point(field_get:AppRuntimeInfo.version_code)
  return _internal_version_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppRuntimeInfo::set_version_code(ArgT0&& arg0, ArgT... args) {
 
 version_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppRuntimeInfo.version_code)
}
inline std::string* AppRuntimeInfo::mutable_version_code() {
  std::string* _s = _internal_mutable_version_code();
  // @@protoc_insertion_point(field_mutable:AppRuntimeInfo.version_code)
  return _s;
}
inline const std::string& AppRuntimeInfo::_internal_version_code() const {
  return version_code_.Get();
}
inline void AppRuntimeInfo::_internal_set_version_code(const std::string& value) {
  
  version_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::_internal_mutable_version_code() {
  
  return version_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::release_version_code() {
  // @@protoc_insertion_point(field_release:AppRuntimeInfo.version_code)
  return version_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppRuntimeInfo::set_allocated_version_code(std::string* version_code) {
  if (version_code != nullptr) {
    
  } else {
    
  }
  version_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppRuntimeInfo.version_code)
}

// string logver = 7;
inline void AppRuntimeInfo::clear_logver() {
  logver_.ClearToEmpty();
}
inline const std::string& AppRuntimeInfo::logver() const {
  // @@protoc_insertion_point(field_get:AppRuntimeInfo.logver)
  return _internal_logver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppRuntimeInfo::set_logver(ArgT0&& arg0, ArgT... args) {
 
 logver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppRuntimeInfo.logver)
}
inline std::string* AppRuntimeInfo::mutable_logver() {
  std::string* _s = _internal_mutable_logver();
  // @@protoc_insertion_point(field_mutable:AppRuntimeInfo.logver)
  return _s;
}
inline const std::string& AppRuntimeInfo::_internal_logver() const {
  return logver_.Get();
}
inline void AppRuntimeInfo::_internal_set_logver(const std::string& value) {
  
  logver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::_internal_mutable_logver() {
  
  return logver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::release_logver() {
  // @@protoc_insertion_point(field_release:AppRuntimeInfo.logver)
  return logver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppRuntimeInfo::set_allocated_logver(std::string* logver) {
  if (logver != nullptr) {
    
  } else {
    
  }
  logver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logver,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppRuntimeInfo.logver)
}

// string abtest = 8;
inline void AppRuntimeInfo::clear_abtest() {
  abtest_.ClearToEmpty();
}
inline const std::string& AppRuntimeInfo::abtest() const {
  // @@protoc_insertion_point(field_get:AppRuntimeInfo.abtest)
  return _internal_abtest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppRuntimeInfo::set_abtest(ArgT0&& arg0, ArgT... args) {
 
 abtest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppRuntimeInfo.abtest)
}
inline std::string* AppRuntimeInfo::mutable_abtest() {
  std::string* _s = _internal_mutable_abtest();
  // @@protoc_insertion_point(field_mutable:AppRuntimeInfo.abtest)
  return _s;
}
inline const std::string& AppRuntimeInfo::_internal_abtest() const {
  return abtest_.Get();
}
inline void AppRuntimeInfo::_internal_set_abtest(const std::string& value) {
  
  abtest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::_internal_mutable_abtest() {
  
  return abtest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::release_abtest() {
  // @@protoc_insertion_point(field_release:AppRuntimeInfo.abtest)
  return abtest_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppRuntimeInfo::set_allocated_abtest(std::string* abtest) {
  if (abtest != nullptr) {
    
  } else {
    
  }
  abtest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), abtest,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppRuntimeInfo.abtest)
}

// string ff_version = 9;
inline void AppRuntimeInfo::clear_ff_version() {
  ff_version_.ClearToEmpty();
}
inline const std::string& AppRuntimeInfo::ff_version() const {
  // @@protoc_insertion_point(field_get:AppRuntimeInfo.ff_version)
  return _internal_ff_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppRuntimeInfo::set_ff_version(ArgT0&& arg0, ArgT... args) {
 
 ff_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppRuntimeInfo.ff_version)
}
inline std::string* AppRuntimeInfo::mutable_ff_version() {
  std::string* _s = _internal_mutable_ff_version();
  // @@protoc_insertion_point(field_mutable:AppRuntimeInfo.ff_version)
  return _s;
}
inline const std::string& AppRuntimeInfo::_internal_ff_version() const {
  return ff_version_.Get();
}
inline void AppRuntimeInfo::_internal_set_ff_version(const std::string& value) {
  
  ff_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::_internal_mutable_ff_version() {
  
  return ff_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppRuntimeInfo::release_ff_version() {
  // @@protoc_insertion_point(field_release:AppRuntimeInfo.ff_version)
  return ff_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppRuntimeInfo::set_allocated_ff_version(std::string* ff_version) {
  if (ff_version != nullptr) {
    
  } else {
    
  }
  ff_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ff_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppRuntimeInfo.ff_version)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppEvent

// string event_id = 1;
inline void AppEvent::clear_event_id() {
  event_id_.ClearToEmpty();
}
inline const std::string& AppEvent::event_id() const {
  // @@protoc_insertion_point(field_get:AppEvent.event_id)
  return _internal_event_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppEvent::set_event_id(ArgT0&& arg0, ArgT... args) {
 
 event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppEvent.event_id)
}
inline std::string* AppEvent::mutable_event_id() {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:AppEvent.event_id)
  return _s;
}
inline const std::string& AppEvent::_internal_event_id() const {
  return event_id_.Get();
}
inline void AppEvent::_internal_set_event_id(const std::string& value) {
  
  event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppEvent::_internal_mutable_event_id() {
  
  return event_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppEvent::release_event_id() {
  // @@protoc_insertion_point(field_release:AppEvent.event_id)
  return event_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppEvent::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    
  } else {
    
  }
  event_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppEvent.event_id)
}

// .AppInfo app_info = 2;
inline bool AppEvent::_internal_has_app_info() const {
  return this != internal_default_instance() && app_info_ != nullptr;
}
inline bool AppEvent::has_app_info() const {
  return _internal_has_app_info();
}
inline void AppEvent::clear_app_info() {
  if (GetArenaForAllocation() == nullptr && app_info_ != nullptr) {
    delete app_info_;
  }
  app_info_ = nullptr;
}
inline const ::AppInfo& AppEvent::_internal_app_info() const {
  const ::AppInfo* p = app_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::AppInfo&>(
      ::_AppInfo_default_instance_);
}
inline const ::AppInfo& AppEvent::app_info() const {
  // @@protoc_insertion_point(field_get:AppEvent.app_info)
  return _internal_app_info();
}
inline void AppEvent::unsafe_arena_set_allocated_app_info(
    ::AppInfo* app_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_info_);
  }
  app_info_ = app_info;
  if (app_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AppEvent.app_info)
}
inline ::AppInfo* AppEvent::release_app_info() {
  
  ::AppInfo* temp = app_info_;
  app_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AppInfo* AppEvent::unsafe_arena_release_app_info() {
  // @@protoc_insertion_point(field_release:AppEvent.app_info)
  
  ::AppInfo* temp = app_info_;
  app_info_ = nullptr;
  return temp;
}
inline ::AppInfo* AppEvent::_internal_mutable_app_info() {
  
  if (app_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::AppInfo>(GetArenaForAllocation());
    app_info_ = p;
  }
  return app_info_;
}
inline ::AppInfo* AppEvent::mutable_app_info() {
  ::AppInfo* _msg = _internal_mutable_app_info();
  // @@protoc_insertion_point(field_mutable:AppEvent.app_info)
  return _msg;
}
inline void AppEvent::set_allocated_app_info(::AppInfo* app_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_info_;
  }
  if (app_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AppInfo>::GetOwningArena(app_info);
    if (message_arena != submessage_arena) {
      app_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_info, submessage_arena);
    }
    
  } else {
    
  }
  app_info_ = app_info;
  // @@protoc_insertion_point(field_set_allocated:AppEvent.app_info)
}

// .AppRuntimeInfo runtime_info = 3;
inline bool AppEvent::_internal_has_runtime_info() const {
  return this != internal_default_instance() && runtime_info_ != nullptr;
}
inline bool AppEvent::has_runtime_info() const {
  return _internal_has_runtime_info();
}
inline void AppEvent::clear_runtime_info() {
  if (GetArenaForAllocation() == nullptr && runtime_info_ != nullptr) {
    delete runtime_info_;
  }
  runtime_info_ = nullptr;
}
inline const ::AppRuntimeInfo& AppEvent::_internal_runtime_info() const {
  const ::AppRuntimeInfo* p = runtime_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::AppRuntimeInfo&>(
      ::_AppRuntimeInfo_default_instance_);
}
inline const ::AppRuntimeInfo& AppEvent::runtime_info() const {
  // @@protoc_insertion_point(field_get:AppEvent.runtime_info)
  return _internal_runtime_info();
}
inline void AppEvent::unsafe_arena_set_allocated_runtime_info(
    ::AppRuntimeInfo* runtime_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_info_);
  }
  runtime_info_ = runtime_info;
  if (runtime_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AppEvent.runtime_info)
}
inline ::AppRuntimeInfo* AppEvent::release_runtime_info() {
  
  ::AppRuntimeInfo* temp = runtime_info_;
  runtime_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AppRuntimeInfo* AppEvent::unsafe_arena_release_runtime_info() {
  // @@protoc_insertion_point(field_release:AppEvent.runtime_info)
  
  ::AppRuntimeInfo* temp = runtime_info_;
  runtime_info_ = nullptr;
  return temp;
}
inline ::AppRuntimeInfo* AppEvent::_internal_mutable_runtime_info() {
  
  if (runtime_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::AppRuntimeInfo>(GetArenaForAllocation());
    runtime_info_ = p;
  }
  return runtime_info_;
}
inline ::AppRuntimeInfo* AppEvent::mutable_runtime_info() {
  ::AppRuntimeInfo* _msg = _internal_mutable_runtime_info();
  // @@protoc_insertion_point(field_mutable:AppEvent.runtime_info)
  return _msg;
}
inline void AppEvent::set_allocated_runtime_info(::AppRuntimeInfo* runtime_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete runtime_info_;
  }
  if (runtime_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AppRuntimeInfo>::GetOwningArena(runtime_info);
    if (message_arena != submessage_arena) {
      runtime_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_info, submessage_arena);
    }
    
  } else {
    
  }
  runtime_info_ = runtime_info;
  // @@protoc_insertion_point(field_set_allocated:AppEvent.runtime_info)
}

// string mid = 4;
inline void AppEvent::clear_mid() {
  mid_.ClearToEmpty();
}
inline const std::string& AppEvent::mid() const {
  // @@protoc_insertion_point(field_get:AppEvent.mid)
  return _internal_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppEvent::set_mid(ArgT0&& arg0, ArgT... args) {
 
 mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppEvent.mid)
}
inline std::string* AppEvent::mutable_mid() {
  std::string* _s = _internal_mutable_mid();
  // @@protoc_insertion_point(field_mutable:AppEvent.mid)
  return _s;
}
inline const std::string& AppEvent::_internal_mid() const {
  return mid_.Get();
}
inline void AppEvent::_internal_set_mid(const std::string& value) {
  
  mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppEvent::_internal_mutable_mid() {
  
  return mid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppEvent::release_mid() {
  // @@protoc_insertion_point(field_release:AppEvent.mid)
  return mid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppEvent::set_allocated_mid(std::string* mid) {
  if (mid != nullptr) {
    
  } else {
    
  }
  mid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppEvent.mid)
}

// int64 ctime = 5;
inline void AppEvent::clear_ctime() {
  ctime_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppEvent::_internal_ctime() const {
  return ctime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppEvent::ctime() const {
  // @@protoc_insertion_point(field_get:AppEvent.ctime)
  return _internal_ctime();
}
inline void AppEvent::_internal_set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ctime_ = value;
}
inline void AppEvent::set_ctime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ctime(value);
  // @@protoc_insertion_point(field_set:AppEvent.ctime)
}

// string log_id = 6;
inline void AppEvent::clear_log_id() {
  log_id_.ClearToEmpty();
}
inline const std::string& AppEvent::log_id() const {
  // @@protoc_insertion_point(field_get:AppEvent.log_id)
  return _internal_log_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppEvent::set_log_id(ArgT0&& arg0, ArgT... args) {
 
 log_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppEvent.log_id)
}
inline std::string* AppEvent::mutable_log_id() {
  std::string* _s = _internal_mutable_log_id();
  // @@protoc_insertion_point(field_mutable:AppEvent.log_id)
  return _s;
}
inline const std::string& AppEvent::_internal_log_id() const {
  return log_id_.Get();
}
inline void AppEvent::_internal_set_log_id(const std::string& value) {
  
  log_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppEvent::_internal_mutable_log_id() {
  
  return log_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppEvent::release_log_id() {
  // @@protoc_insertion_point(field_release:AppEvent.log_id)
  return log_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppEvent::set_allocated_log_id(std::string* log_id) {
  if (log_id != nullptr) {
    
  } else {
    
  }
  log_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppEvent.log_id)
}

// int32 retry_send_count = 7;
inline void AppEvent::clear_retry_send_count() {
  retry_send_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppEvent::_internal_retry_send_count() const {
  return retry_send_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppEvent::retry_send_count() const {
  // @@protoc_insertion_point(field_get:AppEvent.retry_send_count)
  return _internal_retry_send_count();
}
inline void AppEvent::_internal_set_retry_send_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  retry_send_count_ = value;
}
inline void AppEvent::set_retry_send_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retry_send_count(value);
  // @@protoc_insertion_point(field_set:AppEvent.retry_send_count)
}

// int64 sn = 8;
inline void AppEvent::clear_sn() {
  sn_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppEvent::_internal_sn() const {
  return sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppEvent::sn() const {
  // @@protoc_insertion_point(field_get:AppEvent.sn)
  return _internal_sn();
}
inline void AppEvent::_internal_set_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sn_ = value;
}
inline void AppEvent::set_sn(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:AppEvent.sn)
}

// .EventCategory event_category = 9;
inline void AppEvent::clear_event_category() {
  event_category_ = 0;
}
inline ::EventCategory AppEvent::_internal_event_category() const {
  return static_cast< ::EventCategory >(event_category_);
}
inline ::EventCategory AppEvent::event_category() const {
  // @@protoc_insertion_point(field_get:AppEvent.event_category)
  return _internal_event_category();
}
inline void AppEvent::_internal_set_event_category(::EventCategory value) {
  
  event_category_ = value;
}
inline void AppEvent::set_event_category(::EventCategory value) {
  _internal_set_event_category(value);
  // @@protoc_insertion_point(field_set:AppEvent.event_category)
}

// .AppPageViewInfo app_page_view_info = 10;
inline bool AppEvent::_internal_has_app_page_view_info() const {
  return this != internal_default_instance() && app_page_view_info_ != nullptr;
}
inline bool AppEvent::has_app_page_view_info() const {
  return _internal_has_app_page_view_info();
}
inline void AppEvent::clear_app_page_view_info() {
  if (GetArenaForAllocation() == nullptr && app_page_view_info_ != nullptr) {
    delete app_page_view_info_;
  }
  app_page_view_info_ = nullptr;
}
inline const ::AppPageViewInfo& AppEvent::_internal_app_page_view_info() const {
  const ::AppPageViewInfo* p = app_page_view_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::AppPageViewInfo&>(
      ::_AppPageViewInfo_default_instance_);
}
inline const ::AppPageViewInfo& AppEvent::app_page_view_info() const {
  // @@protoc_insertion_point(field_get:AppEvent.app_page_view_info)
  return _internal_app_page_view_info();
}
inline void AppEvent::unsafe_arena_set_allocated_app_page_view_info(
    ::AppPageViewInfo* app_page_view_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_page_view_info_);
  }
  app_page_view_info_ = app_page_view_info;
  if (app_page_view_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AppEvent.app_page_view_info)
}
inline ::AppPageViewInfo* AppEvent::release_app_page_view_info() {
  
  ::AppPageViewInfo* temp = app_page_view_info_;
  app_page_view_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AppPageViewInfo* AppEvent::unsafe_arena_release_app_page_view_info() {
  // @@protoc_insertion_point(field_release:AppEvent.app_page_view_info)
  
  ::AppPageViewInfo* temp = app_page_view_info_;
  app_page_view_info_ = nullptr;
  return temp;
}
inline ::AppPageViewInfo* AppEvent::_internal_mutable_app_page_view_info() {
  
  if (app_page_view_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::AppPageViewInfo>(GetArenaForAllocation());
    app_page_view_info_ = p;
  }
  return app_page_view_info_;
}
inline ::AppPageViewInfo* AppEvent::mutable_app_page_view_info() {
  ::AppPageViewInfo* _msg = _internal_mutable_app_page_view_info();
  // @@protoc_insertion_point(field_mutable:AppEvent.app_page_view_info)
  return _msg;
}
inline void AppEvent::set_allocated_app_page_view_info(::AppPageViewInfo* app_page_view_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_page_view_info_;
  }
  if (app_page_view_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AppPageViewInfo>::GetOwningArena(app_page_view_info);
    if (message_arena != submessage_arena) {
      app_page_view_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_page_view_info, submessage_arena);
    }
    
  } else {
    
  }
  app_page_view_info_ = app_page_view_info;
  // @@protoc_insertion_point(field_set_allocated:AppEvent.app_page_view_info)
}

// .AppClickInfo app_click_info = 11;
inline bool AppEvent::_internal_has_app_click_info() const {
  return this != internal_default_instance() && app_click_info_ != nullptr;
}
inline bool AppEvent::has_app_click_info() const {
  return _internal_has_app_click_info();
}
inline void AppEvent::clear_app_click_info() {
  if (GetArenaForAllocation() == nullptr && app_click_info_ != nullptr) {
    delete app_click_info_;
  }
  app_click_info_ = nullptr;
}
inline const ::AppClickInfo& AppEvent::_internal_app_click_info() const {
  const ::AppClickInfo* p = app_click_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::AppClickInfo&>(
      ::_AppClickInfo_default_instance_);
}
inline const ::AppClickInfo& AppEvent::app_click_info() const {
  // @@protoc_insertion_point(field_get:AppEvent.app_click_info)
  return _internal_app_click_info();
}
inline void AppEvent::unsafe_arena_set_allocated_app_click_info(
    ::AppClickInfo* app_click_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_click_info_);
  }
  app_click_info_ = app_click_info;
  if (app_click_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AppEvent.app_click_info)
}
inline ::AppClickInfo* AppEvent::release_app_click_info() {
  
  ::AppClickInfo* temp = app_click_info_;
  app_click_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AppClickInfo* AppEvent::unsafe_arena_release_app_click_info() {
  // @@protoc_insertion_point(field_release:AppEvent.app_click_info)
  
  ::AppClickInfo* temp = app_click_info_;
  app_click_info_ = nullptr;
  return temp;
}
inline ::AppClickInfo* AppEvent::_internal_mutable_app_click_info() {
  
  if (app_click_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::AppClickInfo>(GetArenaForAllocation());
    app_click_info_ = p;
  }
  return app_click_info_;
}
inline ::AppClickInfo* AppEvent::mutable_app_click_info() {
  ::AppClickInfo* _msg = _internal_mutable_app_click_info();
  // @@protoc_insertion_point(field_mutable:AppEvent.app_click_info)
  return _msg;
}
inline void AppEvent::set_allocated_app_click_info(::AppClickInfo* app_click_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_click_info_;
  }
  if (app_click_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AppClickInfo>::GetOwningArena(app_click_info);
    if (message_arena != submessage_arena) {
      app_click_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_click_info, submessage_arena);
    }
    
  } else {
    
  }
  app_click_info_ = app_click_info;
  // @@protoc_insertion_point(field_set_allocated:AppEvent.app_click_info)
}

// .AppExposureInfo app_exposure_info = 12;
inline bool AppEvent::_internal_has_app_exposure_info() const {
  return this != internal_default_instance() && app_exposure_info_ != nullptr;
}
inline bool AppEvent::has_app_exposure_info() const {
  return _internal_has_app_exposure_info();
}
inline void AppEvent::clear_app_exposure_info() {
  if (GetArenaForAllocation() == nullptr && app_exposure_info_ != nullptr) {
    delete app_exposure_info_;
  }
  app_exposure_info_ = nullptr;
}
inline const ::AppExposureInfo& AppEvent::_internal_app_exposure_info() const {
  const ::AppExposureInfo* p = app_exposure_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::AppExposureInfo&>(
      ::_AppExposureInfo_default_instance_);
}
inline const ::AppExposureInfo& AppEvent::app_exposure_info() const {
  // @@protoc_insertion_point(field_get:AppEvent.app_exposure_info)
  return _internal_app_exposure_info();
}
inline void AppEvent::unsafe_arena_set_allocated_app_exposure_info(
    ::AppExposureInfo* app_exposure_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_exposure_info_);
  }
  app_exposure_info_ = app_exposure_info;
  if (app_exposure_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AppEvent.app_exposure_info)
}
inline ::AppExposureInfo* AppEvent::release_app_exposure_info() {
  
  ::AppExposureInfo* temp = app_exposure_info_;
  app_exposure_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AppExposureInfo* AppEvent::unsafe_arena_release_app_exposure_info() {
  // @@protoc_insertion_point(field_release:AppEvent.app_exposure_info)
  
  ::AppExposureInfo* temp = app_exposure_info_;
  app_exposure_info_ = nullptr;
  return temp;
}
inline ::AppExposureInfo* AppEvent::_internal_mutable_app_exposure_info() {
  
  if (app_exposure_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::AppExposureInfo>(GetArenaForAllocation());
    app_exposure_info_ = p;
  }
  return app_exposure_info_;
}
inline ::AppExposureInfo* AppEvent::mutable_app_exposure_info() {
  ::AppExposureInfo* _msg = _internal_mutable_app_exposure_info();
  // @@protoc_insertion_point(field_mutable:AppEvent.app_exposure_info)
  return _msg;
}
inline void AppEvent::set_allocated_app_exposure_info(::AppExposureInfo* app_exposure_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_exposure_info_;
  }
  if (app_exposure_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AppExposureInfo>::GetOwningArena(app_exposure_info);
    if (message_arena != submessage_arena) {
      app_exposure_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_exposure_info, submessage_arena);
    }
    
  } else {
    
  }
  app_exposure_info_ = app_exposure_info;
  // @@protoc_insertion_point(field_set_allocated:AppEvent.app_exposure_info)
}

// map<string, string> extended_fields = 13;
inline int AppEvent::_internal_extended_fields_size() const {
  return extended_fields_.size();
}
inline int AppEvent::extended_fields_size() const {
  return _internal_extended_fields_size();
}
inline void AppEvent::clear_extended_fields() {
  extended_fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppEvent::_internal_extended_fields() const {
  return extended_fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppEvent::extended_fields() const {
  // @@protoc_insertion_point(field_map:AppEvent.extended_fields)
  return _internal_extended_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppEvent::_internal_mutable_extended_fields() {
  return extended_fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppEvent::mutable_extended_fields() {
  // @@protoc_insertion_point(field_mutable_map:AppEvent.extended_fields)
  return _internal_mutable_extended_fields();
}

// int32 page_type = 14;
inline void AppEvent::clear_page_type() {
  page_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppEvent::_internal_page_type() const {
  return page_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppEvent::page_type() const {
  // @@protoc_insertion_point(field_get:AppEvent.page_type)
  return _internal_page_type();
}
inline void AppEvent::_internal_set_page_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_type_ = value;
}
inline void AppEvent::set_page_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_type(value);
  // @@protoc_insertion_point(field_set:AppEvent.page_type)
}

// int64 sn_gen_time = 15;
inline void AppEvent::clear_sn_gen_time() {
  sn_gen_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppEvent::_internal_sn_gen_time() const {
  return sn_gen_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppEvent::sn_gen_time() const {
  // @@protoc_insertion_point(field_get:AppEvent.sn_gen_time)
  return _internal_sn_gen_time();
}
inline void AppEvent::_internal_set_sn_gen_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sn_gen_time_ = value;
}
inline void AppEvent::set_sn_gen_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sn_gen_time(value);
  // @@protoc_insertion_point(field_set:AppEvent.sn_gen_time)
}

// int64 upload_time = 16;
inline void AppEvent::clear_upload_time() {
  upload_time_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppEvent::_internal_upload_time() const {
  return upload_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppEvent::upload_time() const {
  // @@protoc_insertion_point(field_get:AppEvent.upload_time)
  return _internal_upload_time();
}
inline void AppEvent::_internal_set_upload_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upload_time_ = value;
}
inline void AppEvent::set_upload_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upload_time(value);
  // @@protoc_insertion_point(field_set:AppEvent.upload_time)
}

// .AppPlayerInfo app_player_info = 17;
inline bool AppEvent::_internal_has_app_player_info() const {
  return this != internal_default_instance() && app_player_info_ != nullptr;
}
inline bool AppEvent::has_app_player_info() const {
  return _internal_has_app_player_info();
}
inline void AppEvent::clear_app_player_info() {
  if (GetArenaForAllocation() == nullptr && app_player_info_ != nullptr) {
    delete app_player_info_;
  }
  app_player_info_ = nullptr;
}
inline const ::AppPlayerInfo& AppEvent::_internal_app_player_info() const {
  const ::AppPlayerInfo* p = app_player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::AppPlayerInfo&>(
      ::_AppPlayerInfo_default_instance_);
}
inline const ::AppPlayerInfo& AppEvent::app_player_info() const {
  // @@protoc_insertion_point(field_get:AppEvent.app_player_info)
  return _internal_app_player_info();
}
inline void AppEvent::unsafe_arena_set_allocated_app_player_info(
    ::AppPlayerInfo* app_player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_player_info_);
  }
  app_player_info_ = app_player_info;
  if (app_player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AppEvent.app_player_info)
}
inline ::AppPlayerInfo* AppEvent::release_app_player_info() {
  
  ::AppPlayerInfo* temp = app_player_info_;
  app_player_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AppPlayerInfo* AppEvent::unsafe_arena_release_app_player_info() {
  // @@protoc_insertion_point(field_release:AppEvent.app_player_info)
  
  ::AppPlayerInfo* temp = app_player_info_;
  app_player_info_ = nullptr;
  return temp;
}
inline ::AppPlayerInfo* AppEvent::_internal_mutable_app_player_info() {
  
  if (app_player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::AppPlayerInfo>(GetArenaForAllocation());
    app_player_info_ = p;
  }
  return app_player_info_;
}
inline ::AppPlayerInfo* AppEvent::mutable_app_player_info() {
  ::AppPlayerInfo* _msg = _internal_mutable_app_player_info();
  // @@protoc_insertion_point(field_mutable:AppEvent.app_player_info)
  return _msg;
}
inline void AppEvent::set_allocated_app_player_info(::AppPlayerInfo* app_player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_player_info_;
  }
  if (app_player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AppPlayerInfo>::GetOwningArena(app_player_info);
    if (message_arena != submessage_arena) {
      app_player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_player_info, submessage_arena);
    }
    
  } else {
    
  }
  app_player_info_ = app_player_info;
  // @@protoc_insertion_point(field_set_allocated:AppEvent.app_player_info)
}

// -------------------------------------------------------------------

// AppPageViewInfo

// string event_id_from = 1;
inline void AppPageViewInfo::clear_event_id_from() {
  event_id_from_.ClearToEmpty();
}
inline const std::string& AppPageViewInfo::event_id_from() const {
  // @@protoc_insertion_point(field_get:AppPageViewInfo.event_id_from)
  return _internal_event_id_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPageViewInfo::set_event_id_from(ArgT0&& arg0, ArgT... args) {
 
 event_id_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPageViewInfo.event_id_from)
}
inline std::string* AppPageViewInfo::mutable_event_id_from() {
  std::string* _s = _internal_mutable_event_id_from();
  // @@protoc_insertion_point(field_mutable:AppPageViewInfo.event_id_from)
  return _s;
}
inline const std::string& AppPageViewInfo::_internal_event_id_from() const {
  return event_id_from_.Get();
}
inline void AppPageViewInfo::_internal_set_event_id_from(const std::string& value) {
  
  event_id_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPageViewInfo::_internal_mutable_event_id_from() {
  
  return event_id_from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPageViewInfo::release_event_id_from() {
  // @@protoc_insertion_point(field_release:AppPageViewInfo.event_id_from)
  return event_id_from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPageViewInfo::set_allocated_event_id_from(std::string* event_id_from) {
  if (event_id_from != nullptr) {
    
  } else {
    
  }
  event_id_from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_id_from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPageViewInfo.event_id_from)
}

// int32 load_type = 4;
inline void AppPageViewInfo::clear_load_type() {
  load_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPageViewInfo::_internal_load_type() const {
  return load_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPageViewInfo::load_type() const {
  // @@protoc_insertion_point(field_get:AppPageViewInfo.load_type)
  return _internal_load_type();
}
inline void AppPageViewInfo::_internal_set_load_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  load_type_ = value;
}
inline void AppPageViewInfo::set_load_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_load_type(value);
  // @@protoc_insertion_point(field_set:AppPageViewInfo.load_type)
}

// int64 duration = 5;
inline void AppPageViewInfo::clear_duration() {
  duration_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppPageViewInfo::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppPageViewInfo::duration() const {
  // @@protoc_insertion_point(field_get:AppPageViewInfo.duration)
  return _internal_duration();
}
inline void AppPageViewInfo::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_ = value;
}
inline void AppPageViewInfo::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:AppPageViewInfo.duration)
}

// int64 pvstart = 6;
inline void AppPageViewInfo::clear_pvstart() {
  pvstart_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppPageViewInfo::_internal_pvstart() const {
  return pvstart_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppPageViewInfo::pvstart() const {
  // @@protoc_insertion_point(field_get:AppPageViewInfo.pvstart)
  return _internal_pvstart();
}
inline void AppPageViewInfo::_internal_set_pvstart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pvstart_ = value;
}
inline void AppPageViewInfo::set_pvstart(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pvstart(value);
  // @@protoc_insertion_point(field_set:AppPageViewInfo.pvstart)
}

// int64 pvend = 7;
inline void AppPageViewInfo::clear_pvend() {
  pvend_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppPageViewInfo::_internal_pvend() const {
  return pvend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppPageViewInfo::pvend() const {
  // @@protoc_insertion_point(field_get:AppPageViewInfo.pvend)
  return _internal_pvend();
}
inline void AppPageViewInfo::_internal_set_pvend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pvend_ = value;
}
inline void AppPageViewInfo::set_pvend(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pvend(value);
  // @@protoc_insertion_point(field_set:AppPageViewInfo.pvend)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppExposureInfo_AppExposureContentInfo

// string event_id = 1;
inline void AppExposureInfo_AppExposureContentInfo::clear_event_id() {
  event_id_.ClearToEmpty();
}
inline const std::string& AppExposureInfo_AppExposureContentInfo::event_id() const {
  // @@protoc_insertion_point(field_get:AppExposureInfo.AppExposureContentInfo.event_id)
  return _internal_event_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppExposureInfo_AppExposureContentInfo::set_event_id(ArgT0&& arg0, ArgT... args) {
 
 event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppExposureInfo.AppExposureContentInfo.event_id)
}
inline std::string* AppExposureInfo_AppExposureContentInfo::mutable_event_id() {
  std::string* _s = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:AppExposureInfo.AppExposureContentInfo.event_id)
  return _s;
}
inline const std::string& AppExposureInfo_AppExposureContentInfo::_internal_event_id() const {
  return event_id_.Get();
}
inline void AppExposureInfo_AppExposureContentInfo::_internal_set_event_id(const std::string& value) {
  
  event_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppExposureInfo_AppExposureContentInfo::_internal_mutable_event_id() {
  
  return event_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppExposureInfo_AppExposureContentInfo::release_event_id() {
  // @@protoc_insertion_point(field_release:AppExposureInfo.AppExposureContentInfo.event_id)
  return event_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppExposureInfo_AppExposureContentInfo::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    
  } else {
    
  }
  event_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppExposureInfo.AppExposureContentInfo.event_id)
}

// map<string, string> extended_fields = 2;
inline int AppExposureInfo_AppExposureContentInfo::_internal_extended_fields_size() const {
  return extended_fields_.size();
}
inline int AppExposureInfo_AppExposureContentInfo::extended_fields_size() const {
  return _internal_extended_fields_size();
}
inline void AppExposureInfo_AppExposureContentInfo::clear_extended_fields() {
  extended_fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppExposureInfo_AppExposureContentInfo::_internal_extended_fields() const {
  return extended_fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AppExposureInfo_AppExposureContentInfo::extended_fields() const {
  // @@protoc_insertion_point(field_map:AppExposureInfo.AppExposureContentInfo.extended_fields)
  return _internal_extended_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppExposureInfo_AppExposureContentInfo::_internal_mutable_extended_fields() {
  return extended_fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AppExposureInfo_AppExposureContentInfo::mutable_extended_fields() {
  // @@protoc_insertion_point(field_mutable_map:AppExposureInfo.AppExposureContentInfo.extended_fields)
  return _internal_mutable_extended_fields();
}

// -------------------------------------------------------------------

// AppExposureInfo

// repeated .AppExposureInfo.AppExposureContentInfo content_infos = 1;
inline int AppExposureInfo::_internal_content_infos_size() const {
  return content_infos_.size();
}
inline int AppExposureInfo::content_infos_size() const {
  return _internal_content_infos_size();
}
inline void AppExposureInfo::clear_content_infos() {
  content_infos_.Clear();
}
inline ::AppExposureInfo_AppExposureContentInfo* AppExposureInfo::mutable_content_infos(int index) {
  // @@protoc_insertion_point(field_mutable:AppExposureInfo.content_infos)
  return content_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppExposureInfo_AppExposureContentInfo >*
AppExposureInfo::mutable_content_infos() {
  // @@protoc_insertion_point(field_mutable_list:AppExposureInfo.content_infos)
  return &content_infos_;
}
inline const ::AppExposureInfo_AppExposureContentInfo& AppExposureInfo::_internal_content_infos(int index) const {
  return content_infos_.Get(index);
}
inline const ::AppExposureInfo_AppExposureContentInfo& AppExposureInfo::content_infos(int index) const {
  // @@protoc_insertion_point(field_get:AppExposureInfo.content_infos)
  return _internal_content_infos(index);
}
inline ::AppExposureInfo_AppExposureContentInfo* AppExposureInfo::_internal_add_content_infos() {
  return content_infos_.Add();
}
inline ::AppExposureInfo_AppExposureContentInfo* AppExposureInfo::add_content_infos() {
  ::AppExposureInfo_AppExposureContentInfo* _add = _internal_add_content_infos();
  // @@protoc_insertion_point(field_add:AppExposureInfo.content_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppExposureInfo_AppExposureContentInfo >&
AppExposureInfo::content_infos() const {
  // @@protoc_insertion_point(field_list:AppExposureInfo.content_infos)
  return content_infos_;
}

// -------------------------------------------------------------------

// AppClickInfo

// -------------------------------------------------------------------

// AppPlayerInfo

// string play_from_spmid = 1;
inline void AppPlayerInfo::clear_play_from_spmid() {
  play_from_spmid_.ClearToEmpty();
}
inline const std::string& AppPlayerInfo::play_from_spmid() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.play_from_spmid)
  return _internal_play_from_spmid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPlayerInfo::set_play_from_spmid(ArgT0&& arg0, ArgT... args) {
 
 play_from_spmid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPlayerInfo.play_from_spmid)
}
inline std::string* AppPlayerInfo::mutable_play_from_spmid() {
  std::string* _s = _internal_mutable_play_from_spmid();
  // @@protoc_insertion_point(field_mutable:AppPlayerInfo.play_from_spmid)
  return _s;
}
inline const std::string& AppPlayerInfo::_internal_play_from_spmid() const {
  return play_from_spmid_.Get();
}
inline void AppPlayerInfo::_internal_set_play_from_spmid(const std::string& value) {
  
  play_from_spmid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::_internal_mutable_play_from_spmid() {
  
  return play_from_spmid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::release_play_from_spmid() {
  // @@protoc_insertion_point(field_release:AppPlayerInfo.play_from_spmid)
  return play_from_spmid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPlayerInfo::set_allocated_play_from_spmid(std::string* play_from_spmid) {
  if (play_from_spmid != nullptr) {
    
  } else {
    
  }
  play_from_spmid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), play_from_spmid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPlayerInfo.play_from_spmid)
}

// string season_id = 2;
inline void AppPlayerInfo::clear_season_id() {
  season_id_.ClearToEmpty();
}
inline const std::string& AppPlayerInfo::season_id() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.season_id)
  return _internal_season_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPlayerInfo::set_season_id(ArgT0&& arg0, ArgT... args) {
 
 season_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPlayerInfo.season_id)
}
inline std::string* AppPlayerInfo::mutable_season_id() {
  std::string* _s = _internal_mutable_season_id();
  // @@protoc_insertion_point(field_mutable:AppPlayerInfo.season_id)
  return _s;
}
inline const std::string& AppPlayerInfo::_internal_season_id() const {
  return season_id_.Get();
}
inline void AppPlayerInfo::_internal_set_season_id(const std::string& value) {
  
  season_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::_internal_mutable_season_id() {
  
  return season_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::release_season_id() {
  // @@protoc_insertion_point(field_release:AppPlayerInfo.season_id)
  return season_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPlayerInfo::set_allocated_season_id(std::string* season_id) {
  if (season_id != nullptr) {
    
  } else {
    
  }
  season_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), season_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPlayerInfo.season_id)
}

// int32 type = 3;
inline void AppPlayerInfo::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::type() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.type)
  return _internal_type();
}
inline void AppPlayerInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void AppPlayerInfo::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:AppPlayerInfo.type)
}

// int32 sub_type = 4;
inline void AppPlayerInfo::clear_sub_type() {
  sub_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::_internal_sub_type() const {
  return sub_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::sub_type() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.sub_type)
  return _internal_sub_type();
}
inline void AppPlayerInfo::_internal_set_sub_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sub_type_ = value;
}
inline void AppPlayerInfo::set_sub_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sub_type(value);
  // @@protoc_insertion_point(field_set:AppPlayerInfo.sub_type)
}

// string ep_id = 5;
inline void AppPlayerInfo::clear_ep_id() {
  ep_id_.ClearToEmpty();
}
inline const std::string& AppPlayerInfo::ep_id() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.ep_id)
  return _internal_ep_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPlayerInfo::set_ep_id(ArgT0&& arg0, ArgT... args) {
 
 ep_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPlayerInfo.ep_id)
}
inline std::string* AppPlayerInfo::mutable_ep_id() {
  std::string* _s = _internal_mutable_ep_id();
  // @@protoc_insertion_point(field_mutable:AppPlayerInfo.ep_id)
  return _s;
}
inline const std::string& AppPlayerInfo::_internal_ep_id() const {
  return ep_id_.Get();
}
inline void AppPlayerInfo::_internal_set_ep_id(const std::string& value) {
  
  ep_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::_internal_mutable_ep_id() {
  
  return ep_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::release_ep_id() {
  // @@protoc_insertion_point(field_release:AppPlayerInfo.ep_id)
  return ep_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPlayerInfo::set_allocated_ep_id(std::string* ep_id) {
  if (ep_id != nullptr) {
    
  } else {
    
  }
  ep_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ep_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPlayerInfo.ep_id)
}

// string progress = 6;
inline void AppPlayerInfo::clear_progress() {
  progress_.ClearToEmpty();
}
inline const std::string& AppPlayerInfo::progress() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.progress)
  return _internal_progress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPlayerInfo::set_progress(ArgT0&& arg0, ArgT... args) {
 
 progress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPlayerInfo.progress)
}
inline std::string* AppPlayerInfo::mutable_progress() {
  std::string* _s = _internal_mutable_progress();
  // @@protoc_insertion_point(field_mutable:AppPlayerInfo.progress)
  return _s;
}
inline const std::string& AppPlayerInfo::_internal_progress() const {
  return progress_.Get();
}
inline void AppPlayerInfo::_internal_set_progress(const std::string& value) {
  
  progress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::_internal_mutable_progress() {
  
  return progress_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::release_progress() {
  // @@protoc_insertion_point(field_release:AppPlayerInfo.progress)
  return progress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPlayerInfo::set_allocated_progress(std::string* progress) {
  if (progress != nullptr) {
    
  } else {
    
  }
  progress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), progress,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPlayerInfo.progress)
}

// string avid = 7;
inline void AppPlayerInfo::clear_avid() {
  avid_.ClearToEmpty();
}
inline const std::string& AppPlayerInfo::avid() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.avid)
  return _internal_avid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPlayerInfo::set_avid(ArgT0&& arg0, ArgT... args) {
 
 avid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPlayerInfo.avid)
}
inline std::string* AppPlayerInfo::mutable_avid() {
  std::string* _s = _internal_mutable_avid();
  // @@protoc_insertion_point(field_mutable:AppPlayerInfo.avid)
  return _s;
}
inline const std::string& AppPlayerInfo::_internal_avid() const {
  return avid_.Get();
}
inline void AppPlayerInfo::_internal_set_avid(const std::string& value) {
  
  avid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::_internal_mutable_avid() {
  
  return avid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::release_avid() {
  // @@protoc_insertion_point(field_release:AppPlayerInfo.avid)
  return avid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPlayerInfo::set_allocated_avid(std::string* avid) {
  if (avid != nullptr) {
    
  } else {
    
  }
  avid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPlayerInfo.avid)
}

// string cid = 8;
inline void AppPlayerInfo::clear_cid() {
  cid_.ClearToEmpty();
}
inline const std::string& AppPlayerInfo::cid() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.cid)
  return _internal_cid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPlayerInfo::set_cid(ArgT0&& arg0, ArgT... args) {
 
 cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPlayerInfo.cid)
}
inline std::string* AppPlayerInfo::mutable_cid() {
  std::string* _s = _internal_mutable_cid();
  // @@protoc_insertion_point(field_mutable:AppPlayerInfo.cid)
  return _s;
}
inline const std::string& AppPlayerInfo::_internal_cid() const {
  return cid_.Get();
}
inline void AppPlayerInfo::_internal_set_cid(const std::string& value) {
  
  cid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::_internal_mutable_cid() {
  
  return cid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::release_cid() {
  // @@protoc_insertion_point(field_release:AppPlayerInfo.cid)
  return cid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPlayerInfo::set_allocated_cid(std::string* cid) {
  if (cid != nullptr) {
    
  } else {
    
  }
  cid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPlayerInfo.cid)
}

// int32 network_type = 9;
inline void AppPlayerInfo::clear_network_type() {
  network_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::_internal_network_type() const {
  return network_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::network_type() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.network_type)
  return _internal_network_type();
}
inline void AppPlayerInfo::_internal_set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  network_type_ = value;
}
inline void AppPlayerInfo::set_network_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_network_type(value);
  // @@protoc_insertion_point(field_set:AppPlayerInfo.network_type)
}

// int32 danmaku = 10;
inline void AppPlayerInfo::clear_danmaku() {
  danmaku_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::_internal_danmaku() const {
  return danmaku_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::danmaku() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.danmaku)
  return _internal_danmaku();
}
inline void AppPlayerInfo::_internal_set_danmaku(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  danmaku_ = value;
}
inline void AppPlayerInfo::set_danmaku(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_danmaku(value);
  // @@protoc_insertion_point(field_set:AppPlayerInfo.danmaku)
}

// int32 status = 11;
inline void AppPlayerInfo::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::status() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.status)
  return _internal_status();
}
inline void AppPlayerInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void AppPlayerInfo::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AppPlayerInfo.status)
}

// int32 play_method = 12;
inline void AppPlayerInfo::clear_play_method() {
  play_method_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::_internal_play_method() const {
  return play_method_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::play_method() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.play_method)
  return _internal_play_method();
}
inline void AppPlayerInfo::_internal_set_play_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  play_method_ = value;
}
inline void AppPlayerInfo::set_play_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_play_method(value);
  // @@protoc_insertion_point(field_set:AppPlayerInfo.play_method)
}

// int32 play_type = 13;
inline void AppPlayerInfo::clear_play_type() {
  play_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::_internal_play_type() const {
  return play_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::play_type() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.play_type)
  return _internal_play_type();
}
inline void AppPlayerInfo::_internal_set_play_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  play_type_ = value;
}
inline void AppPlayerInfo::set_play_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_play_type(value);
  // @@protoc_insertion_point(field_set:AppPlayerInfo.play_type)
}

// string player_session_id = 14;
inline void AppPlayerInfo::clear_player_session_id() {
  player_session_id_.ClearToEmpty();
}
inline const std::string& AppPlayerInfo::player_session_id() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.player_session_id)
  return _internal_player_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPlayerInfo::set_player_session_id(ArgT0&& arg0, ArgT... args) {
 
 player_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPlayerInfo.player_session_id)
}
inline std::string* AppPlayerInfo::mutable_player_session_id() {
  std::string* _s = _internal_mutable_player_session_id();
  // @@protoc_insertion_point(field_mutable:AppPlayerInfo.player_session_id)
  return _s;
}
inline const std::string& AppPlayerInfo::_internal_player_session_id() const {
  return player_session_id_.Get();
}
inline void AppPlayerInfo::_internal_set_player_session_id(const std::string& value) {
  
  player_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::_internal_mutable_player_session_id() {
  
  return player_session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::release_player_session_id() {
  // @@protoc_insertion_point(field_release:AppPlayerInfo.player_session_id)
  return player_session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPlayerInfo::set_allocated_player_session_id(std::string* player_session_id) {
  if (player_session_id != nullptr) {
    
  } else {
    
  }
  player_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPlayerInfo.player_session_id)
}

// string speed = 15;
inline void AppPlayerInfo::clear_speed() {
  speed_.ClearToEmpty();
}
inline const std::string& AppPlayerInfo::speed() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.speed)
  return _internal_speed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPlayerInfo::set_speed(ArgT0&& arg0, ArgT... args) {
 
 speed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPlayerInfo.speed)
}
inline std::string* AppPlayerInfo::mutable_speed() {
  std::string* _s = _internal_mutable_speed();
  // @@protoc_insertion_point(field_mutable:AppPlayerInfo.speed)
  return _s;
}
inline const std::string& AppPlayerInfo::_internal_speed() const {
  return speed_.Get();
}
inline void AppPlayerInfo::_internal_set_speed(const std::string& value) {
  
  speed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::_internal_mutable_speed() {
  
  return speed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::release_speed() {
  // @@protoc_insertion_point(field_release:AppPlayerInfo.speed)
  return speed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPlayerInfo::set_allocated_speed(std::string* speed) {
  if (speed != nullptr) {
    
  } else {
    
  }
  speed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), speed,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPlayerInfo.speed)
}

// string player_clarity = 16;
inline void AppPlayerInfo::clear_player_clarity() {
  player_clarity_.ClearToEmpty();
}
inline const std::string& AppPlayerInfo::player_clarity() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.player_clarity)
  return _internal_player_clarity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AppPlayerInfo::set_player_clarity(ArgT0&& arg0, ArgT... args) {
 
 player_clarity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AppPlayerInfo.player_clarity)
}
inline std::string* AppPlayerInfo::mutable_player_clarity() {
  std::string* _s = _internal_mutable_player_clarity();
  // @@protoc_insertion_point(field_mutable:AppPlayerInfo.player_clarity)
  return _s;
}
inline const std::string& AppPlayerInfo::_internal_player_clarity() const {
  return player_clarity_.Get();
}
inline void AppPlayerInfo::_internal_set_player_clarity(const std::string& value) {
  
  player_clarity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::_internal_mutable_player_clarity() {
  
  return player_clarity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AppPlayerInfo::release_player_clarity() {
  // @@protoc_insertion_point(field_release:AppPlayerInfo.player_clarity)
  return player_clarity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AppPlayerInfo::set_allocated_player_clarity(std::string* player_clarity) {
  if (player_clarity != nullptr) {
    
  } else {
    
  }
  player_clarity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_clarity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:AppPlayerInfo.player_clarity)
}

// int32 is_autoplay = 17;
inline void AppPlayerInfo::clear_is_autoplay() {
  is_autoplay_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::_internal_is_autoplay() const {
  return is_autoplay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::is_autoplay() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.is_autoplay)
  return _internal_is_autoplay();
}
inline void AppPlayerInfo::_internal_set_is_autoplay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_autoplay_ = value;
}
inline void AppPlayerInfo::set_is_autoplay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_autoplay(value);
  // @@protoc_insertion_point(field_set:AppPlayerInfo.is_autoplay)
}

// int32 video_format = 18;
inline void AppPlayerInfo::clear_video_format() {
  video_format_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::_internal_video_format() const {
  return video_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppPlayerInfo::video_format() const {
  // @@protoc_insertion_point(field_get:AppPlayerInfo.video_format)
  return _internal_video_format();
}
inline void AppPlayerInfo::_internal_set_video_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  video_format_ = value;
}
inline void AppPlayerInfo::set_video_format(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_video_format(value);
  // @@protoc_insertion_point(field_set:AppPlayerInfo.video_format)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EventCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EventCategory>() {
  return ::EventCategory_descriptor();
}
template <> struct is_proto_enum< ::RuntimeNetWork> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RuntimeNetWork>() {
  return ::RuntimeNetWork_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_infoc_5fapp_5fevent_2eproto
